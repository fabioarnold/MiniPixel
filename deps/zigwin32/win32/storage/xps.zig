//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (85)
//--------------------------------------------------------------------------------
pub const XPS_E_SIGREQUESTID_DUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108795));
pub const XPS_E_PACKAGE_NOT_OPENED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108794));
pub const XPS_E_PACKAGE_ALREADY_OPENED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108793));
pub const XPS_E_SIGNATUREID_DUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108792));
pub const XPS_E_MARKUP_COMPATIBILITY_ELEMENTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108791));
pub const XPS_E_OBJECT_DETACHED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108790));
pub const XPS_E_INVALID_SIGNATUREBLOCK_MARKUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108789));
pub const XPS_E_INVALID_NUMBER_OF_POINTS_IN_CURVE_SEGMENTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108160));
pub const XPS_E_ABSOLUTE_REFERENCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108159));
pub const XPS_E_INVALID_NUMBER_OF_COLOR_CHANNELS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108158));
pub const XPS_E_INVALID_LANGUAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109696));
pub const XPS_E_INVALID_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109695));
pub const XPS_E_INVALID_RESOURCE_KEY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109694));
pub const XPS_E_INVALID_PAGE_SIZE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109693));
pub const XPS_E_INVALID_BLEED_BOX = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109692));
pub const XPS_E_INVALID_THUMBNAIL_IMAGE_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109691));
pub const XPS_E_INVALID_LOOKUP_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109690));
pub const XPS_E_INVALID_FLOAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109689));
pub const XPS_E_UNEXPECTED_CONTENT_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109688));
pub const XPS_E_INVALID_FONT_URI = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109686));
pub const XPS_E_INVALID_CONTENT_BOX = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109685));
pub const XPS_E_INVALID_MARKUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109684));
pub const XPS_E_INVALID_XML_ENCODING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109683));
pub const XPS_E_INVALID_CONTENT_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109682));
pub const XPS_E_INVALID_OBFUSCATED_FONT_URI = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109681));
pub const XPS_E_UNEXPECTED_RELATIONSHIP_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109680));
pub const XPS_E_UNEXPECTED_RESTRICTED_FONT_RELATIONSHIP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109679));
pub const XPS_E_MISSING_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109440));
pub const XPS_E_MISSING_LOOKUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109439));
pub const XPS_E_MISSING_GLYPHS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109438));
pub const XPS_E_MISSING_SEGMENT_DATA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109437));
pub const XPS_E_MISSING_COLORPROFILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109436));
pub const XPS_E_MISSING_RELATIONSHIP_TARGET = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109435));
pub const XPS_E_MISSING_RESOURCE_RELATIONSHIP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109434));
pub const XPS_E_MISSING_FONTURI = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109433));
pub const XPS_E_MISSING_DOCUMENTSEQUENCE_RELATIONSHIP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109432));
pub const XPS_E_MISSING_DOCUMENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109431));
pub const XPS_E_MISSING_REFERRED_DOCUMENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109430));
pub const XPS_E_MISSING_REFERRED_PAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109429));
pub const XPS_E_MISSING_PAGE_IN_DOCUMENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109428));
pub const XPS_E_MISSING_PAGE_IN_PAGEREFERENCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109427));
pub const XPS_E_MISSING_IMAGE_IN_IMAGEBRUSH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109426));
pub const XPS_E_MISSING_RESOURCE_KEY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109425));
pub const XPS_E_MISSING_PART_REFERENCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109424));
pub const XPS_E_MISSING_RESTRICTED_FONT_RELATIONSHIP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109423));
pub const XPS_E_MISSING_DISCARDCONTROL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109422));
pub const XPS_E_MISSING_PART_STREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109421));
pub const XPS_E_UNAVAILABLE_PACKAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109420));
pub const XPS_E_DUPLICATE_RESOURCE_KEYS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109184));
pub const XPS_E_MULTIPLE_RESOURCES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109183));
pub const XPS_E_MULTIPLE_DOCUMENTSEQUENCE_RELATIONSHIPS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109182));
pub const XPS_E_MULTIPLE_THUMBNAILS_ON_PAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109181));
pub const XPS_E_MULTIPLE_THUMBNAILS_ON_PACKAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109180));
pub const XPS_E_MULTIPLE_PRINTTICKETS_ON_PAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109179));
pub const XPS_E_MULTIPLE_PRINTTICKETS_ON_DOCUMENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109178));
pub const XPS_E_MULTIPLE_PRINTTICKETS_ON_DOCUMENTSEQUENCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109177));
pub const XPS_E_MULTIPLE_REFERENCES_TO_PART = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109176));
pub const XPS_E_DUPLICATE_NAMES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109175));
pub const XPS_E_STRING_TOO_LONG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108928));
pub const XPS_E_TOO_MANY_INDICES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108927));
pub const XPS_E_MAPPING_OUT_OF_ORDER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108926));
pub const XPS_E_MAPPING_OUTSIDE_STRING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108925));
pub const XPS_E_MAPPING_OUTSIDE_INDICES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108924));
pub const XPS_E_CARET_OUTSIDE_STRING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108923));
pub const XPS_E_CARET_OUT_OF_ORDER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108922));
pub const XPS_E_ODD_BIDILEVEL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108921));
pub const XPS_E_ONE_TO_ONE_MAPPING_EXPECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108920));
pub const XPS_E_RESTRICTED_FONT_NOT_OBFUSCATED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108919));
pub const XPS_E_NEGATIVE_FLOAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108918));
pub const XPS_E_XKEY_ATTR_PRESENT_OUTSIDE_RES_DICT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108672));
pub const XPS_E_DICTIONARY_ITEM_NAMED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108671));
pub const XPS_E_NESTED_REMOTE_DICTIONARY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108670));
pub const XPS_E_INDEX_OUT_OF_RANGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108416));
pub const XPS_E_VISUAL_CIRCULAR_REF = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108415));
pub const XPS_E_NO_CUSTOM_OBJECTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108414));
pub const XPS_E_ALREADY_OWNED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108413));
pub const XPS_E_RESOURCE_NOT_OWNED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108412));
pub const XPS_E_UNEXPECTED_COLORPROFILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108411));
pub const XPS_E_COLOR_COMPONENT_OUT_OF_RANGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108410));
pub const XPS_E_BOTH_PATHFIGURE_AND_ABBR_SYNTAX_PRESENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108409));
pub const XPS_E_BOTH_RESOURCE_AND_SOURCEATTR_PRESENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108408));
pub const XPS_E_BLEED_BOX_PAGE_DIMENSIONS_NOT_IN_SYNC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108407));
pub const XPS_E_RELATIONSHIP_EXTERNAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108406));
pub const XPS_E_NOT_ENOUGH_GRADIENT_STOPS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108405));
pub const XPS_E_PACKAGE_WRITER_NOT_CLOSED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108404));

//--------------------------------------------------------------------------------
// Section: Types (110)
//--------------------------------------------------------------------------------
pub const PRINT_WINDOW_FLAGS = enum(u32) {
    Y = 1,
};
pub const PW_CLIENTONLY = PRINT_WINDOW_FLAGS.Y;

pub const DEVICE_CAPABILITIES = enum(u32) {
    BINNAMES = 12,
    BINS = 6,
    COLLATE = 22,
    COLORDEVICE = 32,
    COPIES = 18,
    DRIVER = 11,
    DUPLEX = 7,
    ENUMRESOLUTIONS = 13,
    EXTRA = 9,
    FIELDS = 1,
    FILEDEPENDENCIES = 14,
    MAXEXTENT = 5,
    MEDIAREADY = 29,
    MEDIATYPENAMES = 34,
    MEDIATYPES = 35,
    MINEXTENT = 4,
    ORIENTATION = 17,
    NUP = 33,
    PAPERNAMES = 16,
    PAPERS = 2,
    PAPERSIZE = 3,
    PERSONALITY = 25,
    PRINTERMEM = 28,
    PRINTRATE = 26,
    PRINTRATEPPM = 31,
    PRINTRATEUNIT = 27,
    SIZE = 8,
    STAPLE = 30,
    TRUETYPE = 15,
    VERSION = 10,
};
pub const DC_BINNAMES = DEVICE_CAPABILITIES.BINNAMES;
pub const DC_BINS = DEVICE_CAPABILITIES.BINS;
pub const DC_COLLATE = DEVICE_CAPABILITIES.COLLATE;
pub const DC_COLORDEVICE = DEVICE_CAPABILITIES.COLORDEVICE;
pub const DC_COPIES = DEVICE_CAPABILITIES.COPIES;
pub const DC_DRIVER = DEVICE_CAPABILITIES.DRIVER;
pub const DC_DUPLEX = DEVICE_CAPABILITIES.DUPLEX;
pub const DC_ENUMRESOLUTIONS = DEVICE_CAPABILITIES.ENUMRESOLUTIONS;
pub const DC_EXTRA = DEVICE_CAPABILITIES.EXTRA;
pub const DC_FIELDS = DEVICE_CAPABILITIES.FIELDS;
pub const DC_FILEDEPENDENCIES = DEVICE_CAPABILITIES.FILEDEPENDENCIES;
pub const DC_MAXEXTENT = DEVICE_CAPABILITIES.MAXEXTENT;
pub const DC_MEDIAREADY = DEVICE_CAPABILITIES.MEDIAREADY;
pub const DC_MEDIATYPENAMES = DEVICE_CAPABILITIES.MEDIATYPENAMES;
pub const DC_MEDIATYPES = DEVICE_CAPABILITIES.MEDIATYPES;
pub const DC_MINEXTENT = DEVICE_CAPABILITIES.MINEXTENT;
pub const DC_ORIENTATION = DEVICE_CAPABILITIES.ORIENTATION;
pub const DC_NUP = DEVICE_CAPABILITIES.NUP;
pub const DC_PAPERNAMES = DEVICE_CAPABILITIES.PAPERNAMES;
pub const DC_PAPERS = DEVICE_CAPABILITIES.PAPERS;
pub const DC_PAPERSIZE = DEVICE_CAPABILITIES.PAPERSIZE;
pub const DC_PERSONALITY = DEVICE_CAPABILITIES.PERSONALITY;
pub const DC_PRINTERMEM = DEVICE_CAPABILITIES.PRINTERMEM;
pub const DC_PRINTRATE = DEVICE_CAPABILITIES.PRINTRATE;
pub const DC_PRINTRATEPPM = DEVICE_CAPABILITIES.PRINTRATEPPM;
pub const DC_PRINTRATEUNIT = DEVICE_CAPABILITIES.PRINTRATEUNIT;
pub const DC_SIZE = DEVICE_CAPABILITIES.SIZE;
pub const DC_STAPLE = DEVICE_CAPABILITIES.STAPLE;
pub const DC_TRUETYPE = DEVICE_CAPABILITIES.TRUETYPE;
pub const DC_VERSION = DEVICE_CAPABILITIES.VERSION;

pub const PSINJECT_POINT = enum(u16) {
    BEGINSTREAM = 1,
    PSADOBE = 2,
    PAGESATEND = 3,
    PAGES = 4,
    DOCNEEDEDRES = 5,
    DOCSUPPLIEDRES = 6,
    PAGEORDER = 7,
    ORIENTATION = 8,
    BOUNDINGBOX = 9,
    DOCUMENTPROCESSCOLORS = 10,
    COMMENTS = 11,
    BEGINDEFAULTS = 12,
    ENDDEFAULTS = 13,
    BEGINPROLOG = 14,
    ENDPROLOG = 15,
    BEGINSETUP = 16,
    ENDSETUP = 17,
    TRAILER = 18,
    EOF = 19,
    ENDSTREAM = 20,
    DOCUMENTPROCESSCOLORSATEND = 21,
    PAGENUMBER = 100,
    BEGINPAGESETUP = 101,
    ENDPAGESETUP = 102,
    PAGETRAILER = 103,
    PLATECOLOR = 104,
    SHOWPAGE = 105,
    PAGEBBOX = 106,
    ENDPAGECOMMENTS = 107,
    VMSAVE = 200,
    VMRESTORE = 201,
    _,
    pub fn initFlags(o: struct {
        BEGINSTREAM: u1 = 0,
        PSADOBE: u1 = 0,
        PAGESATEND: u1 = 0,
        PAGES: u1 = 0,
        DOCNEEDEDRES: u1 = 0,
        DOCSUPPLIEDRES: u1 = 0,
        PAGEORDER: u1 = 0,
        ORIENTATION: u1 = 0,
        BOUNDINGBOX: u1 = 0,
        DOCUMENTPROCESSCOLORS: u1 = 0,
        COMMENTS: u1 = 0,
        BEGINDEFAULTS: u1 = 0,
        ENDDEFAULTS: u1 = 0,
        BEGINPROLOG: u1 = 0,
        ENDPROLOG: u1 = 0,
        BEGINSETUP: u1 = 0,
        ENDSETUP: u1 = 0,
        TRAILER: u1 = 0,
        EOF: u1 = 0,
        ENDSTREAM: u1 = 0,
        DOCUMENTPROCESSCOLORSATEND: u1 = 0,
        PAGENUMBER: u1 = 0,
        BEGINPAGESETUP: u1 = 0,
        ENDPAGESETUP: u1 = 0,
        PAGETRAILER: u1 = 0,
        PLATECOLOR: u1 = 0,
        SHOWPAGE: u1 = 0,
        PAGEBBOX: u1 = 0,
        ENDPAGECOMMENTS: u1 = 0,
        VMSAVE: u1 = 0,
        VMRESTORE: u1 = 0,
    }) PSINJECT_POINT {
        return @intToEnum(PSINJECT_POINT,
              (if (o.BEGINSTREAM == 1) @enumToInt(PSINJECT_POINT.BEGINSTREAM) else 0)
            | (if (o.PSADOBE == 1) @enumToInt(PSINJECT_POINT.PSADOBE) else 0)
            | (if (o.PAGESATEND == 1) @enumToInt(PSINJECT_POINT.PAGESATEND) else 0)
            | (if (o.PAGES == 1) @enumToInt(PSINJECT_POINT.PAGES) else 0)
            | (if (o.DOCNEEDEDRES == 1) @enumToInt(PSINJECT_POINT.DOCNEEDEDRES) else 0)
            | (if (o.DOCSUPPLIEDRES == 1) @enumToInt(PSINJECT_POINT.DOCSUPPLIEDRES) else 0)
            | (if (o.PAGEORDER == 1) @enumToInt(PSINJECT_POINT.PAGEORDER) else 0)
            | (if (o.ORIENTATION == 1) @enumToInt(PSINJECT_POINT.ORIENTATION) else 0)
            | (if (o.BOUNDINGBOX == 1) @enumToInt(PSINJECT_POINT.BOUNDINGBOX) else 0)
            | (if (o.DOCUMENTPROCESSCOLORS == 1) @enumToInt(PSINJECT_POINT.DOCUMENTPROCESSCOLORS) else 0)
            | (if (o.COMMENTS == 1) @enumToInt(PSINJECT_POINT.COMMENTS) else 0)
            | (if (o.BEGINDEFAULTS == 1) @enumToInt(PSINJECT_POINT.BEGINDEFAULTS) else 0)
            | (if (o.ENDDEFAULTS == 1) @enumToInt(PSINJECT_POINT.ENDDEFAULTS) else 0)
            | (if (o.BEGINPROLOG == 1) @enumToInt(PSINJECT_POINT.BEGINPROLOG) else 0)
            | (if (o.ENDPROLOG == 1) @enumToInt(PSINJECT_POINT.ENDPROLOG) else 0)
            | (if (o.BEGINSETUP == 1) @enumToInt(PSINJECT_POINT.BEGINSETUP) else 0)
            | (if (o.ENDSETUP == 1) @enumToInt(PSINJECT_POINT.ENDSETUP) else 0)
            | (if (o.TRAILER == 1) @enumToInt(PSINJECT_POINT.TRAILER) else 0)
            | (if (o.EOF == 1) @enumToInt(PSINJECT_POINT.EOF) else 0)
            | (if (o.ENDSTREAM == 1) @enumToInt(PSINJECT_POINT.ENDSTREAM) else 0)
            | (if (o.DOCUMENTPROCESSCOLORSATEND == 1) @enumToInt(PSINJECT_POINT.DOCUMENTPROCESSCOLORSATEND) else 0)
            | (if (o.PAGENUMBER == 1) @enumToInt(PSINJECT_POINT.PAGENUMBER) else 0)
            | (if (o.BEGINPAGESETUP == 1) @enumToInt(PSINJECT_POINT.BEGINPAGESETUP) else 0)
            | (if (o.ENDPAGESETUP == 1) @enumToInt(PSINJECT_POINT.ENDPAGESETUP) else 0)
            | (if (o.PAGETRAILER == 1) @enumToInt(PSINJECT_POINT.PAGETRAILER) else 0)
            | (if (o.PLATECOLOR == 1) @enumToInt(PSINJECT_POINT.PLATECOLOR) else 0)
            | (if (o.SHOWPAGE == 1) @enumToInt(PSINJECT_POINT.SHOWPAGE) else 0)
            | (if (o.PAGEBBOX == 1) @enumToInt(PSINJECT_POINT.PAGEBBOX) else 0)
            | (if (o.ENDPAGECOMMENTS == 1) @enumToInt(PSINJECT_POINT.ENDPAGECOMMENTS) else 0)
            | (if (o.VMSAVE == 1) @enumToInt(PSINJECT_POINT.VMSAVE) else 0)
            | (if (o.VMRESTORE == 1) @enumToInt(PSINJECT_POINT.VMRESTORE) else 0)
        );
    }
};
pub const PSINJECT_BEGINSTREAM = PSINJECT_POINT.BEGINSTREAM;
pub const PSINJECT_PSADOBE = PSINJECT_POINT.PSADOBE;
pub const PSINJECT_PAGESATEND = PSINJECT_POINT.PAGESATEND;
pub const PSINJECT_PAGES = PSINJECT_POINT.PAGES;
pub const PSINJECT_DOCNEEDEDRES = PSINJECT_POINT.DOCNEEDEDRES;
pub const PSINJECT_DOCSUPPLIEDRES = PSINJECT_POINT.DOCSUPPLIEDRES;
pub const PSINJECT_PAGEORDER = PSINJECT_POINT.PAGEORDER;
pub const PSINJECT_ORIENTATION = PSINJECT_POINT.ORIENTATION;
pub const PSINJECT_BOUNDINGBOX = PSINJECT_POINT.BOUNDINGBOX;
pub const PSINJECT_DOCUMENTPROCESSCOLORS = PSINJECT_POINT.DOCUMENTPROCESSCOLORS;
pub const PSINJECT_COMMENTS = PSINJECT_POINT.COMMENTS;
pub const PSINJECT_BEGINDEFAULTS = PSINJECT_POINT.BEGINDEFAULTS;
pub const PSINJECT_ENDDEFAULTS = PSINJECT_POINT.ENDDEFAULTS;
pub const PSINJECT_BEGINPROLOG = PSINJECT_POINT.BEGINPROLOG;
pub const PSINJECT_ENDPROLOG = PSINJECT_POINT.ENDPROLOG;
pub const PSINJECT_BEGINSETUP = PSINJECT_POINT.BEGINSETUP;
pub const PSINJECT_ENDSETUP = PSINJECT_POINT.ENDSETUP;
pub const PSINJECT_TRAILER = PSINJECT_POINT.TRAILER;
pub const PSINJECT_EOF = PSINJECT_POINT.EOF;
pub const PSINJECT_ENDSTREAM = PSINJECT_POINT.ENDSTREAM;
pub const PSINJECT_DOCUMENTPROCESSCOLORSATEND = PSINJECT_POINT.DOCUMENTPROCESSCOLORSATEND;
pub const PSINJECT_PAGENUMBER = PSINJECT_POINT.PAGENUMBER;
pub const PSINJECT_BEGINPAGESETUP = PSINJECT_POINT.BEGINPAGESETUP;
pub const PSINJECT_ENDPAGESETUP = PSINJECT_POINT.ENDPAGESETUP;
pub const PSINJECT_PAGETRAILER = PSINJECT_POINT.PAGETRAILER;
pub const PSINJECT_PLATECOLOR = PSINJECT_POINT.PLATECOLOR;
pub const PSINJECT_SHOWPAGE = PSINJECT_POINT.SHOWPAGE;
pub const PSINJECT_PAGEBBOX = PSINJECT_POINT.PAGEBBOX;
pub const PSINJECT_ENDPAGECOMMENTS = PSINJECT_POINT.ENDPAGECOMMENTS;
pub const PSINJECT_VMSAVE = PSINJECT_POINT.VMSAVE;
pub const PSINJECT_VMRESTORE = PSINJECT_POINT.VMRESTORE;

pub const HPTPROVIDER = *opaque{};

pub const DRAWPATRECT = extern struct {
    ptPosition: POINT,
    ptSize: POINT,
    wStyle: u16,
    wPattern: u16,
};

pub const PSINJECTDATA = extern struct {
    DataBytes: u32,
    InjectionPoint: PSINJECT_POINT,
    PageNumber: u16,
};

pub const PSFEATURE_OUTPUT = extern struct {
    bPageIndependent: BOOL,
    bSetPageDevice: BOOL,
};

pub const PSFEATURE_CUSTPAPER = extern struct {
    lOrientation: i32,
    lWidth: i32,
    lHeight: i32,
    lWidthOffset: i32,
    lHeightOffset: i32,
};

pub const ABORTPROC = fn(
    param0: ?HDC,
    param1: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DOCINFOA = extern struct {
    cbSize: i32,
    lpszDocName: ?[*:0]const u8,
    lpszOutput: ?[*:0]const u8,
    lpszDatatype: ?[*:0]const u8,
    fwType: u32,
};

pub const DOCINFOW = extern struct {
    cbSize: i32,
    lpszDocName: ?[*:0]const u16,
    lpszOutput: ?[*:0]const u16,
    lpszDatatype: ?[*:0]const u16,
    fwType: u32,
};

const CLSID_XpsOMObjectFactory_Value = @import("../zig.zig").Guid.initString("e974d26d-3d9b-4d47-88cc-3872f2dc3585");
pub const CLSID_XpsOMObjectFactory = &CLSID_XpsOMObjectFactory_Value;

const CLSID_XpsOMThumbnailGenerator_Value = @import("../zig.zig").Guid.initString("7e4a23e2-b969-4761-be35-1a8ced58e323");
pub const CLSID_XpsOMThumbnailGenerator = &CLSID_XpsOMThumbnailGenerator_Value;

pub const XPS_TILE_MODE = enum(i32) {
    NONE = 1,
    TILE = 2,
    FLIPX = 3,
    FLIPY = 4,
    FLIPXY = 5,
};
pub const XPS_TILE_MODE_NONE = XPS_TILE_MODE.NONE;
pub const XPS_TILE_MODE_TILE = XPS_TILE_MODE.TILE;
pub const XPS_TILE_MODE_FLIPX = XPS_TILE_MODE.FLIPX;
pub const XPS_TILE_MODE_FLIPY = XPS_TILE_MODE.FLIPY;
pub const XPS_TILE_MODE_FLIPXY = XPS_TILE_MODE.FLIPXY;

pub const XPS_COLOR_INTERPOLATION = enum(i32) {
    CRGBLINEAR = 1,
    RGBLINEAR = 2,
};
pub const XPS_COLOR_INTERPOLATION_SCRGBLINEAR = XPS_COLOR_INTERPOLATION.CRGBLINEAR;
pub const XPS_COLOR_INTERPOLATION_SRGBLINEAR = XPS_COLOR_INTERPOLATION.RGBLINEAR;

pub const XPS_SPREAD_METHOD = enum(i32) {
    PAD = 1,
    REFLECT = 2,
    REPEAT = 3,
};
pub const XPS_SPREAD_METHOD_PAD = XPS_SPREAD_METHOD.PAD;
pub const XPS_SPREAD_METHOD_REFLECT = XPS_SPREAD_METHOD.REFLECT;
pub const XPS_SPREAD_METHOD_REPEAT = XPS_SPREAD_METHOD.REPEAT;

pub const XPS_STYLE_SIMULATION = enum(i32) {
    NONE = 1,
    ITALIC = 2,
    BOLD = 3,
    BOLDITALIC = 4,
};
pub const XPS_STYLE_SIMULATION_NONE = XPS_STYLE_SIMULATION.NONE;
pub const XPS_STYLE_SIMULATION_ITALIC = XPS_STYLE_SIMULATION.ITALIC;
pub const XPS_STYLE_SIMULATION_BOLD = XPS_STYLE_SIMULATION.BOLD;
pub const XPS_STYLE_SIMULATION_BOLDITALIC = XPS_STYLE_SIMULATION.BOLDITALIC;

pub const XPS_LINE_CAP = enum(i32) {
    FLAT = 1,
    ROUND = 2,
    SQUARE = 3,
    TRIANGLE = 4,
};
pub const XPS_LINE_CAP_FLAT = XPS_LINE_CAP.FLAT;
pub const XPS_LINE_CAP_ROUND = XPS_LINE_CAP.ROUND;
pub const XPS_LINE_CAP_SQUARE = XPS_LINE_CAP.SQUARE;
pub const XPS_LINE_CAP_TRIANGLE = XPS_LINE_CAP.TRIANGLE;

pub const XPS_DASH_CAP = enum(i32) {
    FLAT = 1,
    ROUND = 2,
    SQUARE = 3,
    TRIANGLE = 4,
};
pub const XPS_DASH_CAP_FLAT = XPS_DASH_CAP.FLAT;
pub const XPS_DASH_CAP_ROUND = XPS_DASH_CAP.ROUND;
pub const XPS_DASH_CAP_SQUARE = XPS_DASH_CAP.SQUARE;
pub const XPS_DASH_CAP_TRIANGLE = XPS_DASH_CAP.TRIANGLE;

pub const XPS_LINE_JOIN = enum(i32) {
    MITER = 1,
    BEVEL = 2,
    ROUND = 3,
};
pub const XPS_LINE_JOIN_MITER = XPS_LINE_JOIN.MITER;
pub const XPS_LINE_JOIN_BEVEL = XPS_LINE_JOIN.BEVEL;
pub const XPS_LINE_JOIN_ROUND = XPS_LINE_JOIN.ROUND;

pub const XPS_IMAGE_TYPE = enum(i32) {
    JPEG = 1,
    PNG = 2,
    TIFF = 3,
    WDP = 4,
    JXR = 5,
};
pub const XPS_IMAGE_TYPE_JPEG = XPS_IMAGE_TYPE.JPEG;
pub const XPS_IMAGE_TYPE_PNG = XPS_IMAGE_TYPE.PNG;
pub const XPS_IMAGE_TYPE_TIFF = XPS_IMAGE_TYPE.TIFF;
pub const XPS_IMAGE_TYPE_WDP = XPS_IMAGE_TYPE.WDP;
pub const XPS_IMAGE_TYPE_JXR = XPS_IMAGE_TYPE.JXR;

pub const XPS_COLOR_TYPE = enum(i32) {
    SRGB = 1,
    SCRGB = 2,
    CONTEXT = 3,
};
pub const XPS_COLOR_TYPE_SRGB = XPS_COLOR_TYPE.SRGB;
pub const XPS_COLOR_TYPE_SCRGB = XPS_COLOR_TYPE.SCRGB;
pub const XPS_COLOR_TYPE_CONTEXT = XPS_COLOR_TYPE.CONTEXT;

pub const XPS_FILL_RULE = enum(i32) {
    EVENODD = 1,
    NONZERO = 2,
};
pub const XPS_FILL_RULE_EVENODD = XPS_FILL_RULE.EVENODD;
pub const XPS_FILL_RULE_NONZERO = XPS_FILL_RULE.NONZERO;

pub const XPS_SEGMENT_TYPE = enum(i32) {
    ARC_LARGE_CLOCKWISE = 1,
    ARC_LARGE_COUNTERCLOCKWISE = 2,
    ARC_SMALL_CLOCKWISE = 3,
    ARC_SMALL_COUNTERCLOCKWISE = 4,
    BEZIER = 5,
    LINE = 6,
    QUADRATIC_BEZIER = 7,
};
pub const XPS_SEGMENT_TYPE_ARC_LARGE_CLOCKWISE = XPS_SEGMENT_TYPE.ARC_LARGE_CLOCKWISE;
pub const XPS_SEGMENT_TYPE_ARC_LARGE_COUNTERCLOCKWISE = XPS_SEGMENT_TYPE.ARC_LARGE_COUNTERCLOCKWISE;
pub const XPS_SEGMENT_TYPE_ARC_SMALL_CLOCKWISE = XPS_SEGMENT_TYPE.ARC_SMALL_CLOCKWISE;
pub const XPS_SEGMENT_TYPE_ARC_SMALL_COUNTERCLOCKWISE = XPS_SEGMENT_TYPE.ARC_SMALL_COUNTERCLOCKWISE;
pub const XPS_SEGMENT_TYPE_BEZIER = XPS_SEGMENT_TYPE.BEZIER;
pub const XPS_SEGMENT_TYPE_LINE = XPS_SEGMENT_TYPE.LINE;
pub const XPS_SEGMENT_TYPE_QUADRATIC_BEZIER = XPS_SEGMENT_TYPE.QUADRATIC_BEZIER;

pub const XPS_SEGMENT_STROKE_PATTERN = enum(i32) {
    ALL = 1,
    NONE = 2,
    MIXED = 3,
};
pub const XPS_SEGMENT_STROKE_PATTERN_ALL = XPS_SEGMENT_STROKE_PATTERN.ALL;
pub const XPS_SEGMENT_STROKE_PATTERN_NONE = XPS_SEGMENT_STROKE_PATTERN.NONE;
pub const XPS_SEGMENT_STROKE_PATTERN_MIXED = XPS_SEGMENT_STROKE_PATTERN.MIXED;

pub const XPS_FONT_EMBEDDING = enum(i32) {
    NORMAL = 1,
    OBFUSCATED = 2,
    RESTRICTED = 3,
    RESTRICTED_UNOBFUSCATED = 4,
};
pub const XPS_FONT_EMBEDDING_NORMAL = XPS_FONT_EMBEDDING.NORMAL;
pub const XPS_FONT_EMBEDDING_OBFUSCATED = XPS_FONT_EMBEDDING.OBFUSCATED;
pub const XPS_FONT_EMBEDDING_RESTRICTED = XPS_FONT_EMBEDDING.RESTRICTED;
pub const XPS_FONT_EMBEDDING_RESTRICTED_UNOBFUSCATED = XPS_FONT_EMBEDDING.RESTRICTED_UNOBFUSCATED;

pub const XPS_OBJECT_TYPE = enum(i32) {
    CANVAS = 1,
    GLYPHS = 2,
    PATH = 3,
    MATRIX_TRANSFORM = 4,
    GEOMETRY = 5,
    SOLID_COLOR_BRUSH = 6,
    IMAGE_BRUSH = 7,
    LINEAR_GRADIENT_BRUSH = 8,
    RADIAL_GRADIENT_BRUSH = 9,
    VISUAL_BRUSH = 10,
};
pub const XPS_OBJECT_TYPE_CANVAS = XPS_OBJECT_TYPE.CANVAS;
pub const XPS_OBJECT_TYPE_GLYPHS = XPS_OBJECT_TYPE.GLYPHS;
pub const XPS_OBJECT_TYPE_PATH = XPS_OBJECT_TYPE.PATH;
pub const XPS_OBJECT_TYPE_MATRIX_TRANSFORM = XPS_OBJECT_TYPE.MATRIX_TRANSFORM;
pub const XPS_OBJECT_TYPE_GEOMETRY = XPS_OBJECT_TYPE.GEOMETRY;
pub const XPS_OBJECT_TYPE_SOLID_COLOR_BRUSH = XPS_OBJECT_TYPE.SOLID_COLOR_BRUSH;
pub const XPS_OBJECT_TYPE_IMAGE_BRUSH = XPS_OBJECT_TYPE.IMAGE_BRUSH;
pub const XPS_OBJECT_TYPE_LINEAR_GRADIENT_BRUSH = XPS_OBJECT_TYPE.LINEAR_GRADIENT_BRUSH;
pub const XPS_OBJECT_TYPE_RADIAL_GRADIENT_BRUSH = XPS_OBJECT_TYPE.RADIAL_GRADIENT_BRUSH;
pub const XPS_OBJECT_TYPE_VISUAL_BRUSH = XPS_OBJECT_TYPE.VISUAL_BRUSH;

pub const XPS_THUMBNAIL_SIZE = enum(i32) {
    VERYSMALL = 1,
    SMALL = 2,
    MEDIUM = 3,
    LARGE = 4,
};
pub const XPS_THUMBNAIL_SIZE_VERYSMALL = XPS_THUMBNAIL_SIZE.VERYSMALL;
pub const XPS_THUMBNAIL_SIZE_SMALL = XPS_THUMBNAIL_SIZE.SMALL;
pub const XPS_THUMBNAIL_SIZE_MEDIUM = XPS_THUMBNAIL_SIZE.MEDIUM;
pub const XPS_THUMBNAIL_SIZE_LARGE = XPS_THUMBNAIL_SIZE.LARGE;

pub const XPS_INTERLEAVING = enum(i32) {
    FF = 1,
    N = 2,
};
pub const XPS_INTERLEAVING_OFF = XPS_INTERLEAVING.FF;
pub const XPS_INTERLEAVING_ON = XPS_INTERLEAVING.N;

pub const XPS_POINT = extern struct {
    x: f32,
    y: f32,
};

pub const XPS_SIZE = extern struct {
    width: f32,
    height: f32,
};

pub const XPS_RECT = extern struct {
    x: f32,
    y: f32,
    width: f32,
    height: f32,
};

pub const XPS_DASH = extern struct {
    length: f32,
    gap: f32,
};

pub const XPS_GLYPH_INDEX = extern struct {
    index: i32,
    advanceWidth: f32,
    horizontalOffset: f32,
    verticalOffset: f32,
};

pub const XPS_GLYPH_MAPPING = extern struct {
    unicodeStringStart: u32,
    unicodeStringLength: u16,
    glyphIndicesStart: u32,
    glyphIndicesLength: u16,
};

pub const XPS_MATRIX = extern struct {
    m11: f32,
    m12: f32,
    m21: f32,
    m22: f32,
    m31: f32,
    m32: f32,
};

pub const XPS_COLOR = extern struct {
    pub const XPS_COLOR_VALUE = extern union {
        sRGB: extern struct {
            alpha: u8,
            red: u8,
            green: u8,
            blue: u8,
        },
        scRGB: extern struct {
            alpha: f32,
            red: f32,
            green: f32,
            blue: f32,
        },
        context: extern struct {
            channelCount: u8,
            channels: [9]f32,
        },
    };
    colorType: XPS_COLOR_TYPE,
    value: XPS_COLOR_VALUE,
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMShareable_Value = @import("../zig.zig").Guid.initString("7137398f-2fc1-454d-8c6a-2c3115a16ece");
pub const IID_IXpsOMShareable = &IID_IXpsOMShareable_Value;
pub const IXpsOMShareable = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOwner: fn(
            self: *const IXpsOMShareable,
            owner: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: fn(
            self: *const IXpsOMShareable,
            type: ?*XPS_OBJECT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMShareable_GetOwner(self: *const T, owner: ?*?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMShareable.VTable, self.vtable).GetOwner(@ptrCast(*const IXpsOMShareable, self), owner);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMShareable_GetType(self: *const T, type_: ?*XPS_OBJECT_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMShareable.VTable, self.vtable).GetType(@ptrCast(*const IXpsOMShareable, self), type_);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMVisual_Value = @import("../zig.zig").Guid.initString("bc3e7333-fb0b-4af3-a819-0b4eaad0d2fd");
pub const IID_IXpsOMVisual = &IID_IXpsOMVisual_Value;
pub const IXpsOMVisual = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMShareable.VTable,
        GetTransform: fn(
            self: *const IXpsOMVisual,
            matrixTransform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransformLocal: fn(
            self: *const IXpsOMVisual,
            matrixTransform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformLocal: fn(
            self: *const IXpsOMVisual,
            matrixTransform: ?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransformLookup: fn(
            self: *const IXpsOMVisual,
            key: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformLookup: fn(
            self: *const IXpsOMVisual,
            key: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClipGeometry: fn(
            self: *const IXpsOMVisual,
            clipGeometry: ?*?*IXpsOMGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClipGeometryLocal: fn(
            self: *const IXpsOMVisual,
            clipGeometry: ?*?*IXpsOMGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClipGeometryLocal: fn(
            self: *const IXpsOMVisual,
            clipGeometry: ?*IXpsOMGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClipGeometryLookup: fn(
            self: *const IXpsOMVisual,
            key: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClipGeometryLookup: fn(
            self: *const IXpsOMVisual,
            key: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOpacity: fn(
            self: *const IXpsOMVisual,
            opacity: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpacity: fn(
            self: *const IXpsOMVisual,
            opacity: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOpacityMaskBrush: fn(
            self: *const IXpsOMVisual,
            opacityMaskBrush: ?*?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOpacityMaskBrushLocal: fn(
            self: *const IXpsOMVisual,
            opacityMaskBrush: ?*?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpacityMaskBrushLocal: fn(
            self: *const IXpsOMVisual,
            opacityMaskBrush: ?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOpacityMaskBrushLookup: fn(
            self: *const IXpsOMVisual,
            key: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpacityMaskBrushLookup: fn(
            self: *const IXpsOMVisual,
            key: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: fn(
            self: *const IXpsOMVisual,
            name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetName: fn(
            self: *const IXpsOMVisual,
            name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIsHyperlinkTarget: fn(
            self: *const IXpsOMVisual,
            isHyperlink: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIsHyperlinkTarget: fn(
            self: *const IXpsOMVisual,
            isHyperlink: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHyperlinkNavigateUri: fn(
            self: *const IXpsOMVisual,
            hyperlinkUri: ?*?*IUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHyperlinkNavigateUri: fn(
            self: *const IXpsOMVisual,
            hyperlinkUri: ?*IUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLanguage: fn(
            self: *const IXpsOMVisual,
            language: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLanguage: fn(
            self: *const IXpsOMVisual,
            language: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMShareable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_GetTransform(self: *const T, matrixTransform: ?*?*IXpsOMMatrixTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).GetTransform(@ptrCast(*const IXpsOMVisual, self), matrixTransform);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_GetTransformLocal(self: *const T, matrixTransform: ?*?*IXpsOMMatrixTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).GetTransformLocal(@ptrCast(*const IXpsOMVisual, self), matrixTransform);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_SetTransformLocal(self: *const T, matrixTransform: ?*IXpsOMMatrixTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).SetTransformLocal(@ptrCast(*const IXpsOMVisual, self), matrixTransform);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_GetTransformLookup(self: *const T, key: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).GetTransformLookup(@ptrCast(*const IXpsOMVisual, self), key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_SetTransformLookup(self: *const T, key: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).SetTransformLookup(@ptrCast(*const IXpsOMVisual, self), key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_GetClipGeometry(self: *const T, clipGeometry: ?*?*IXpsOMGeometry) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).GetClipGeometry(@ptrCast(*const IXpsOMVisual, self), clipGeometry);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_GetClipGeometryLocal(self: *const T, clipGeometry: ?*?*IXpsOMGeometry) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).GetClipGeometryLocal(@ptrCast(*const IXpsOMVisual, self), clipGeometry);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_SetClipGeometryLocal(self: *const T, clipGeometry: ?*IXpsOMGeometry) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).SetClipGeometryLocal(@ptrCast(*const IXpsOMVisual, self), clipGeometry);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_GetClipGeometryLookup(self: *const T, key: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).GetClipGeometryLookup(@ptrCast(*const IXpsOMVisual, self), key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_SetClipGeometryLookup(self: *const T, key: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).SetClipGeometryLookup(@ptrCast(*const IXpsOMVisual, self), key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_GetOpacity(self: *const T, opacity: ?*f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).GetOpacity(@ptrCast(*const IXpsOMVisual, self), opacity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_SetOpacity(self: *const T, opacity: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).SetOpacity(@ptrCast(*const IXpsOMVisual, self), opacity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_GetOpacityMaskBrush(self: *const T, opacityMaskBrush: ?*?*IXpsOMBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).GetOpacityMaskBrush(@ptrCast(*const IXpsOMVisual, self), opacityMaskBrush);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_GetOpacityMaskBrushLocal(self: *const T, opacityMaskBrush: ?*?*IXpsOMBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).GetOpacityMaskBrushLocal(@ptrCast(*const IXpsOMVisual, self), opacityMaskBrush);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_SetOpacityMaskBrushLocal(self: *const T, opacityMaskBrush: ?*IXpsOMBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).SetOpacityMaskBrushLocal(@ptrCast(*const IXpsOMVisual, self), opacityMaskBrush);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_GetOpacityMaskBrushLookup(self: *const T, key: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).GetOpacityMaskBrushLookup(@ptrCast(*const IXpsOMVisual, self), key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_SetOpacityMaskBrushLookup(self: *const T, key: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).SetOpacityMaskBrushLookup(@ptrCast(*const IXpsOMVisual, self), key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_GetName(self: *const T, name: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).GetName(@ptrCast(*const IXpsOMVisual, self), name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_SetName(self: *const T, name: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).SetName(@ptrCast(*const IXpsOMVisual, self), name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_GetIsHyperlinkTarget(self: *const T, isHyperlink: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).GetIsHyperlinkTarget(@ptrCast(*const IXpsOMVisual, self), isHyperlink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_SetIsHyperlinkTarget(self: *const T, isHyperlink: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).SetIsHyperlinkTarget(@ptrCast(*const IXpsOMVisual, self), isHyperlink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_GetHyperlinkNavigateUri(self: *const T, hyperlinkUri: ?*?*IUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).GetHyperlinkNavigateUri(@ptrCast(*const IXpsOMVisual, self), hyperlinkUri);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_SetHyperlinkNavigateUri(self: *const T, hyperlinkUri: ?*IUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).SetHyperlinkNavigateUri(@ptrCast(*const IXpsOMVisual, self), hyperlinkUri);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_GetLanguage(self: *const T, language: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).GetLanguage(@ptrCast(*const IXpsOMVisual, self), language);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisual_SetLanguage(self: *const T, language: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisual.VTable, self.vtable).SetLanguage(@ptrCast(*const IXpsOMVisual, self), language);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPart_Value = @import("../zig.zig").Guid.initString("74eb2f0b-a91e-4486-afac-0fabeca3dfc6");
pub const IID_IXpsOMPart = &IID_IXpsOMPart_Value;
pub const IXpsOMPart = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPartName: fn(
            self: *const IXpsOMPart,
            partUri: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPartName: fn(
            self: *const IXpsOMPart,
            partUri: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPart_GetPartName(self: *const T, partUri: ?*?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPart.VTable, self.vtable).GetPartName(@ptrCast(*const IXpsOMPart, self), partUri);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPart_SetPartName(self: *const T, partUri: ?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPart.VTable, self.vtable).SetPartName(@ptrCast(*const IXpsOMPart, self), partUri);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMGlyphsEditor_Value = @import("../zig.zig").Guid.initString("a5ab8616-5b16-4b9f-9629-89b323ed7909");
pub const IID_IXpsOMGlyphsEditor = &IID_IXpsOMGlyphsEditor_Value;
pub const IXpsOMGlyphsEditor = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ApplyEdits: fn(
            self: *const IXpsOMGlyphsEditor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUnicodeString: fn(
            self: *const IXpsOMGlyphsEditor,
            unicodeString: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUnicodeString: fn(
            self: *const IXpsOMGlyphsEditor,
            unicodeString: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphIndexCount: fn(
            self: *const IXpsOMGlyphsEditor,
            indexCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphIndices: fn(
            self: *const IXpsOMGlyphsEditor,
            indexCount: ?*u32,
            glyphIndices: ?*XPS_GLYPH_INDEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGlyphIndices: fn(
            self: *const IXpsOMGlyphsEditor,
            indexCount: u32,
            glyphIndices: ?*const XPS_GLYPH_INDEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphMappingCount: fn(
            self: *const IXpsOMGlyphsEditor,
            glyphMappingCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphMappings: fn(
            self: *const IXpsOMGlyphsEditor,
            glyphMappingCount: ?*u32,
            glyphMappings: ?*XPS_GLYPH_MAPPING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGlyphMappings: fn(
            self: *const IXpsOMGlyphsEditor,
            glyphMappingCount: u32,
            glyphMappings: ?*const XPS_GLYPH_MAPPING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProhibitedCaretStopCount: fn(
            self: *const IXpsOMGlyphsEditor,
            prohibitedCaretStopCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProhibitedCaretStops: fn(
            self: *const IXpsOMGlyphsEditor,
            count: ?*u32,
            prohibitedCaretStops: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProhibitedCaretStops: fn(
            self: *const IXpsOMGlyphsEditor,
            count: u32,
            prohibitedCaretStops: ?*const u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBidiLevel: fn(
            self: *const IXpsOMGlyphsEditor,
            bidiLevel: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBidiLevel: fn(
            self: *const IXpsOMGlyphsEditor,
            bidiLevel: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIsSideways: fn(
            self: *const IXpsOMGlyphsEditor,
            isSideways: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIsSideways: fn(
            self: *const IXpsOMGlyphsEditor,
            isSideways: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceFontName: fn(
            self: *const IXpsOMGlyphsEditor,
            deviceFontName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDeviceFontName: fn(
            self: *const IXpsOMGlyphsEditor,
            deviceFontName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphsEditor_ApplyEdits(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphsEditor.VTable, self.vtable).ApplyEdits(@ptrCast(*const IXpsOMGlyphsEditor, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphsEditor_GetUnicodeString(self: *const T, unicodeString: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphsEditor.VTable, self.vtable).GetUnicodeString(@ptrCast(*const IXpsOMGlyphsEditor, self), unicodeString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphsEditor_SetUnicodeString(self: *const T, unicodeString: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphsEditor.VTable, self.vtable).SetUnicodeString(@ptrCast(*const IXpsOMGlyphsEditor, self), unicodeString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphsEditor_GetGlyphIndexCount(self: *const T, indexCount: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphsEditor.VTable, self.vtable).GetGlyphIndexCount(@ptrCast(*const IXpsOMGlyphsEditor, self), indexCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphsEditor_GetGlyphIndices(self: *const T, indexCount: ?*u32, glyphIndices: ?*XPS_GLYPH_INDEX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphsEditor.VTable, self.vtable).GetGlyphIndices(@ptrCast(*const IXpsOMGlyphsEditor, self), indexCount, glyphIndices);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphsEditor_SetGlyphIndices(self: *const T, indexCount: u32, glyphIndices: ?*const XPS_GLYPH_INDEX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphsEditor.VTable, self.vtable).SetGlyphIndices(@ptrCast(*const IXpsOMGlyphsEditor, self), indexCount, glyphIndices);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphsEditor_GetGlyphMappingCount(self: *const T, glyphMappingCount: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphsEditor.VTable, self.vtable).GetGlyphMappingCount(@ptrCast(*const IXpsOMGlyphsEditor, self), glyphMappingCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphsEditor_GetGlyphMappings(self: *const T, glyphMappingCount: ?*u32, glyphMappings: ?*XPS_GLYPH_MAPPING) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphsEditor.VTable, self.vtable).GetGlyphMappings(@ptrCast(*const IXpsOMGlyphsEditor, self), glyphMappingCount, glyphMappings);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphsEditor_SetGlyphMappings(self: *const T, glyphMappingCount: u32, glyphMappings: ?*const XPS_GLYPH_MAPPING) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphsEditor.VTable, self.vtable).SetGlyphMappings(@ptrCast(*const IXpsOMGlyphsEditor, self), glyphMappingCount, glyphMappings);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphsEditor_GetProhibitedCaretStopCount(self: *const T, prohibitedCaretStopCount: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphsEditor.VTable, self.vtable).GetProhibitedCaretStopCount(@ptrCast(*const IXpsOMGlyphsEditor, self), prohibitedCaretStopCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphsEditor_GetProhibitedCaretStops(self: *const T, count: ?*u32, prohibitedCaretStops: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphsEditor.VTable, self.vtable).GetProhibitedCaretStops(@ptrCast(*const IXpsOMGlyphsEditor, self), count, prohibitedCaretStops);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphsEditor_SetProhibitedCaretStops(self: *const T, count: u32, prohibitedCaretStops: ?*const u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphsEditor.VTable, self.vtable).SetProhibitedCaretStops(@ptrCast(*const IXpsOMGlyphsEditor, self), count, prohibitedCaretStops);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphsEditor_GetBidiLevel(self: *const T, bidiLevel: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphsEditor.VTable, self.vtable).GetBidiLevel(@ptrCast(*const IXpsOMGlyphsEditor, self), bidiLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphsEditor_SetBidiLevel(self: *const T, bidiLevel: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphsEditor.VTable, self.vtable).SetBidiLevel(@ptrCast(*const IXpsOMGlyphsEditor, self), bidiLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphsEditor_GetIsSideways(self: *const T, isSideways: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphsEditor.VTable, self.vtable).GetIsSideways(@ptrCast(*const IXpsOMGlyphsEditor, self), isSideways);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphsEditor_SetIsSideways(self: *const T, isSideways: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphsEditor.VTable, self.vtable).SetIsSideways(@ptrCast(*const IXpsOMGlyphsEditor, self), isSideways);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphsEditor_GetDeviceFontName(self: *const T, deviceFontName: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphsEditor.VTable, self.vtable).GetDeviceFontName(@ptrCast(*const IXpsOMGlyphsEditor, self), deviceFontName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphsEditor_SetDeviceFontName(self: *const T, deviceFontName: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphsEditor.VTable, self.vtable).SetDeviceFontName(@ptrCast(*const IXpsOMGlyphsEditor, self), deviceFontName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMGlyphs_Value = @import("../zig.zig").Guid.initString("819b3199-0a5a-4b64-bec7-a9e17e780de2");
pub const IID_IXpsOMGlyphs = &IID_IXpsOMGlyphs_Value;
pub const IXpsOMGlyphs = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMVisual.VTable,
        GetUnicodeString: fn(
            self: *const IXpsOMGlyphs,
            unicodeString: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphIndexCount: fn(
            self: *const IXpsOMGlyphs,
            indexCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphIndices: fn(
            self: *const IXpsOMGlyphs,
            indexCount: ?*u32,
            glyphIndices: ?*XPS_GLYPH_INDEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphMappingCount: fn(
            self: *const IXpsOMGlyphs,
            glyphMappingCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphMappings: fn(
            self: *const IXpsOMGlyphs,
            glyphMappingCount: ?*u32,
            glyphMappings: ?*XPS_GLYPH_MAPPING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProhibitedCaretStopCount: fn(
            self: *const IXpsOMGlyphs,
            prohibitedCaretStopCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProhibitedCaretStops: fn(
            self: *const IXpsOMGlyphs,
            prohibitedCaretStopCount: ?*u32,
            prohibitedCaretStops: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBidiLevel: fn(
            self: *const IXpsOMGlyphs,
            bidiLevel: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIsSideways: fn(
            self: *const IXpsOMGlyphs,
            isSideways: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceFontName: fn(
            self: *const IXpsOMGlyphs,
            deviceFontName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStyleSimulations: fn(
            self: *const IXpsOMGlyphs,
            styleSimulations: ?*XPS_STYLE_SIMULATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStyleSimulations: fn(
            self: *const IXpsOMGlyphs,
            styleSimulations: XPS_STYLE_SIMULATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOrigin: fn(
            self: *const IXpsOMGlyphs,
            origin: ?*XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOrigin: fn(
            self: *const IXpsOMGlyphs,
            origin: ?*const XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontRenderingEmSize: fn(
            self: *const IXpsOMGlyphs,
            fontRenderingEmSize: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontRenderingEmSize: fn(
            self: *const IXpsOMGlyphs,
            fontRenderingEmSize: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontResource: fn(
            self: *const IXpsOMGlyphs,
            fontResource: ?*?*IXpsOMFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontResource: fn(
            self: *const IXpsOMGlyphs,
            fontResource: ?*IXpsOMFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFaceIndex: fn(
            self: *const IXpsOMGlyphs,
            fontFaceIndex: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontFaceIndex: fn(
            self: *const IXpsOMGlyphs,
            fontFaceIndex: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFillBrush: fn(
            self: *const IXpsOMGlyphs,
            fillBrush: ?*?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFillBrushLocal: fn(
            self: *const IXpsOMGlyphs,
            fillBrush: ?*?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFillBrushLocal: fn(
            self: *const IXpsOMGlyphs,
            fillBrush: ?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFillBrushLookup: fn(
            self: *const IXpsOMGlyphs,
            key: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFillBrushLookup: fn(
            self: *const IXpsOMGlyphs,
            key: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphsEditor: fn(
            self: *const IXpsOMGlyphs,
            editor: ?*?*IXpsOMGlyphsEditor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IXpsOMGlyphs,
            glyphs: ?*?*IXpsOMGlyphs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMVisual.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_GetUnicodeString(self: *const T, unicodeString: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).GetUnicodeString(@ptrCast(*const IXpsOMGlyphs, self), unicodeString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_GetGlyphIndexCount(self: *const T, indexCount: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).GetGlyphIndexCount(@ptrCast(*const IXpsOMGlyphs, self), indexCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_GetGlyphIndices(self: *const T, indexCount: ?*u32, glyphIndices: ?*XPS_GLYPH_INDEX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).GetGlyphIndices(@ptrCast(*const IXpsOMGlyphs, self), indexCount, glyphIndices);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_GetGlyphMappingCount(self: *const T, glyphMappingCount: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).GetGlyphMappingCount(@ptrCast(*const IXpsOMGlyphs, self), glyphMappingCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_GetGlyphMappings(self: *const T, glyphMappingCount: ?*u32, glyphMappings: ?*XPS_GLYPH_MAPPING) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).GetGlyphMappings(@ptrCast(*const IXpsOMGlyphs, self), glyphMappingCount, glyphMappings);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_GetProhibitedCaretStopCount(self: *const T, prohibitedCaretStopCount: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).GetProhibitedCaretStopCount(@ptrCast(*const IXpsOMGlyphs, self), prohibitedCaretStopCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_GetProhibitedCaretStops(self: *const T, prohibitedCaretStopCount: ?*u32, prohibitedCaretStops: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).GetProhibitedCaretStops(@ptrCast(*const IXpsOMGlyphs, self), prohibitedCaretStopCount, prohibitedCaretStops);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_GetBidiLevel(self: *const T, bidiLevel: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).GetBidiLevel(@ptrCast(*const IXpsOMGlyphs, self), bidiLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_GetIsSideways(self: *const T, isSideways: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).GetIsSideways(@ptrCast(*const IXpsOMGlyphs, self), isSideways);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_GetDeviceFontName(self: *const T, deviceFontName: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).GetDeviceFontName(@ptrCast(*const IXpsOMGlyphs, self), deviceFontName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_GetStyleSimulations(self: *const T, styleSimulations: ?*XPS_STYLE_SIMULATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).GetStyleSimulations(@ptrCast(*const IXpsOMGlyphs, self), styleSimulations);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_SetStyleSimulations(self: *const T, styleSimulations: XPS_STYLE_SIMULATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).SetStyleSimulations(@ptrCast(*const IXpsOMGlyphs, self), styleSimulations);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_GetOrigin(self: *const T, origin: ?*XPS_POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).GetOrigin(@ptrCast(*const IXpsOMGlyphs, self), origin);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_SetOrigin(self: *const T, origin: ?*const XPS_POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).SetOrigin(@ptrCast(*const IXpsOMGlyphs, self), origin);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_GetFontRenderingEmSize(self: *const T, fontRenderingEmSize: ?*f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).GetFontRenderingEmSize(@ptrCast(*const IXpsOMGlyphs, self), fontRenderingEmSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_SetFontRenderingEmSize(self: *const T, fontRenderingEmSize: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).SetFontRenderingEmSize(@ptrCast(*const IXpsOMGlyphs, self), fontRenderingEmSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_GetFontResource(self: *const T, fontResource: ?*?*IXpsOMFontResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).GetFontResource(@ptrCast(*const IXpsOMGlyphs, self), fontResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_SetFontResource(self: *const T, fontResource: ?*IXpsOMFontResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).SetFontResource(@ptrCast(*const IXpsOMGlyphs, self), fontResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_GetFontFaceIndex(self: *const T, fontFaceIndex: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).GetFontFaceIndex(@ptrCast(*const IXpsOMGlyphs, self), fontFaceIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_SetFontFaceIndex(self: *const T, fontFaceIndex: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).SetFontFaceIndex(@ptrCast(*const IXpsOMGlyphs, self), fontFaceIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_GetFillBrush(self: *const T, fillBrush: ?*?*IXpsOMBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).GetFillBrush(@ptrCast(*const IXpsOMGlyphs, self), fillBrush);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_GetFillBrushLocal(self: *const T, fillBrush: ?*?*IXpsOMBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).GetFillBrushLocal(@ptrCast(*const IXpsOMGlyphs, self), fillBrush);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_SetFillBrushLocal(self: *const T, fillBrush: ?*IXpsOMBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).SetFillBrushLocal(@ptrCast(*const IXpsOMGlyphs, self), fillBrush);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_GetFillBrushLookup(self: *const T, key: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).GetFillBrushLookup(@ptrCast(*const IXpsOMGlyphs, self), key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_SetFillBrushLookup(self: *const T, key: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).SetFillBrushLookup(@ptrCast(*const IXpsOMGlyphs, self), key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_GetGlyphsEditor(self: *const T, editor: ?*?*IXpsOMGlyphsEditor) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).GetGlyphsEditor(@ptrCast(*const IXpsOMGlyphs, self), editor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGlyphs_Clone(self: *const T, glyphs: ?*?*IXpsOMGlyphs) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGlyphs.VTable, self.vtable).Clone(@ptrCast(*const IXpsOMGlyphs, self), glyphs);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMDashCollection_Value = @import("../zig.zig").Guid.initString("081613f4-74eb-48f2-83b3-37a9ce2d7dc6");
pub const IID_IXpsOMDashCollection = &IID_IXpsOMDashCollection_Value;
pub const IXpsOMDashCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IXpsOMDashCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IXpsOMDashCollection,
            index: u32,
            dash: ?*XPS_DASH,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: fn(
            self: *const IXpsOMDashCollection,
            index: u32,
            dash: ?*const XPS_DASH,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IXpsOMDashCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: fn(
            self: *const IXpsOMDashCollection,
            index: u32,
            dash: ?*const XPS_DASH,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: fn(
            self: *const IXpsOMDashCollection,
            dash: ?*const XPS_DASH,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDashCollection_GetCount(self: *const T, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDashCollection.VTable, self.vtable).GetCount(@ptrCast(*const IXpsOMDashCollection, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDashCollection_GetAt(self: *const T, index: u32, dash: ?*XPS_DASH) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDashCollection.VTable, self.vtable).GetAt(@ptrCast(*const IXpsOMDashCollection, self), index, dash);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDashCollection_InsertAt(self: *const T, index: u32, dash: ?*const XPS_DASH) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDashCollection.VTable, self.vtable).InsertAt(@ptrCast(*const IXpsOMDashCollection, self), index, dash);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDashCollection_RemoveAt(self: *const T, index: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDashCollection.VTable, self.vtable).RemoveAt(@ptrCast(*const IXpsOMDashCollection, self), index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDashCollection_SetAt(self: *const T, index: u32, dash: ?*const XPS_DASH) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDashCollection.VTable, self.vtable).SetAt(@ptrCast(*const IXpsOMDashCollection, self), index, dash);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDashCollection_Append(self: *const T, dash: ?*const XPS_DASH) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDashCollection.VTable, self.vtable).Append(@ptrCast(*const IXpsOMDashCollection, self), dash);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMMatrixTransform_Value = @import("../zig.zig").Guid.initString("b77330ff-bb37-4501-a93e-f1b1e50bfc46");
pub const IID_IXpsOMMatrixTransform = &IID_IXpsOMMatrixTransform_Value;
pub const IXpsOMMatrixTransform = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMShareable.VTable,
        GetMatrix: fn(
            self: *const IXpsOMMatrixTransform,
            matrix: ?*XPS_MATRIX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMatrix: fn(
            self: *const IXpsOMMatrixTransform,
            matrix: ?*const XPS_MATRIX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IXpsOMMatrixTransform,
            matrixTransform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMShareable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMMatrixTransform_GetMatrix(self: *const T, matrix: ?*XPS_MATRIX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMMatrixTransform.VTable, self.vtable).GetMatrix(@ptrCast(*const IXpsOMMatrixTransform, self), matrix);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMMatrixTransform_SetMatrix(self: *const T, matrix: ?*const XPS_MATRIX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMMatrixTransform.VTable, self.vtable).SetMatrix(@ptrCast(*const IXpsOMMatrixTransform, self), matrix);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMMatrixTransform_Clone(self: *const T, matrixTransform: ?*?*IXpsOMMatrixTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMMatrixTransform.VTable, self.vtable).Clone(@ptrCast(*const IXpsOMMatrixTransform, self), matrixTransform);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMGeometry_Value = @import("../zig.zig").Guid.initString("64fcf3d7-4d58-44ba-ad73-a13af6492072");
pub const IID_IXpsOMGeometry = &IID_IXpsOMGeometry_Value;
pub const IXpsOMGeometry = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMShareable.VTable,
        GetFigures: fn(
            self: *const IXpsOMGeometry,
            figures: ?*?*IXpsOMGeometryFigureCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFillRule: fn(
            self: *const IXpsOMGeometry,
            fillRule: ?*XPS_FILL_RULE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFillRule: fn(
            self: *const IXpsOMGeometry,
            fillRule: XPS_FILL_RULE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransform: fn(
            self: *const IXpsOMGeometry,
            transform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransformLocal: fn(
            self: *const IXpsOMGeometry,
            transform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformLocal: fn(
            self: *const IXpsOMGeometry,
            transform: ?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransformLookup: fn(
            self: *const IXpsOMGeometry,
            lookup: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformLookup: fn(
            self: *const IXpsOMGeometry,
            lookup: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IXpsOMGeometry,
            geometry: ?*?*IXpsOMGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMShareable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometry_GetFigures(self: *const T, figures: ?*?*IXpsOMGeometryFigureCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometry.VTable, self.vtable).GetFigures(@ptrCast(*const IXpsOMGeometry, self), figures);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometry_GetFillRule(self: *const T, fillRule: ?*XPS_FILL_RULE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometry.VTable, self.vtable).GetFillRule(@ptrCast(*const IXpsOMGeometry, self), fillRule);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometry_SetFillRule(self: *const T, fillRule: XPS_FILL_RULE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometry.VTable, self.vtable).SetFillRule(@ptrCast(*const IXpsOMGeometry, self), fillRule);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometry_GetTransform(self: *const T, transform: ?*?*IXpsOMMatrixTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometry.VTable, self.vtable).GetTransform(@ptrCast(*const IXpsOMGeometry, self), transform);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometry_GetTransformLocal(self: *const T, transform: ?*?*IXpsOMMatrixTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometry.VTable, self.vtable).GetTransformLocal(@ptrCast(*const IXpsOMGeometry, self), transform);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometry_SetTransformLocal(self: *const T, transform: ?*IXpsOMMatrixTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometry.VTable, self.vtable).SetTransformLocal(@ptrCast(*const IXpsOMGeometry, self), transform);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometry_GetTransformLookup(self: *const T, lookup: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometry.VTable, self.vtable).GetTransformLookup(@ptrCast(*const IXpsOMGeometry, self), lookup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometry_SetTransformLookup(self: *const T, lookup: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometry.VTable, self.vtable).SetTransformLookup(@ptrCast(*const IXpsOMGeometry, self), lookup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometry_Clone(self: *const T, geometry: ?*?*IXpsOMGeometry) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometry.VTable, self.vtable).Clone(@ptrCast(*const IXpsOMGeometry, self), geometry);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMGeometryFigure_Value = @import("../zig.zig").Guid.initString("d410dc83-908c-443e-8947-b1795d3c165a");
pub const IID_IXpsOMGeometryFigure = &IID_IXpsOMGeometryFigure_Value;
pub const IXpsOMGeometryFigure = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOwner: fn(
            self: *const IXpsOMGeometryFigure,
            owner: ?*?*IXpsOMGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSegmentData: fn(
            self: *const IXpsOMGeometryFigure,
            dataCount: ?*u32,
            segmentData: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSegmentTypes: fn(
            self: *const IXpsOMGeometryFigure,
            segmentCount: ?*u32,
            segmentTypes: ?*XPS_SEGMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSegmentStrokes: fn(
            self: *const IXpsOMGeometryFigure,
            segmentCount: ?*u32,
            segmentStrokes: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSegments: fn(
            self: *const IXpsOMGeometryFigure,
            segmentCount: u32,
            segmentDataCount: u32,
            segmentTypes: ?*const XPS_SEGMENT_TYPE,
            segmentData: ?*const f32,
            segmentStrokes: ?*const BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStartPoint: fn(
            self: *const IXpsOMGeometryFigure,
            startPoint: ?*XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStartPoint: fn(
            self: *const IXpsOMGeometryFigure,
            startPoint: ?*const XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIsClosed: fn(
            self: *const IXpsOMGeometryFigure,
            isClosed: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIsClosed: fn(
            self: *const IXpsOMGeometryFigure,
            isClosed: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIsFilled: fn(
            self: *const IXpsOMGeometryFigure,
            isFilled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIsFilled: fn(
            self: *const IXpsOMGeometryFigure,
            isFilled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSegmentCount: fn(
            self: *const IXpsOMGeometryFigure,
            segmentCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSegmentDataCount: fn(
            self: *const IXpsOMGeometryFigure,
            segmentDataCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSegmentStrokePattern: fn(
            self: *const IXpsOMGeometryFigure,
            segmentStrokePattern: ?*XPS_SEGMENT_STROKE_PATTERN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IXpsOMGeometryFigure,
            geometryFigure: ?*?*IXpsOMGeometryFigure,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigure_GetOwner(self: *const T, owner: ?*?*IXpsOMGeometry) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigure.VTable, self.vtable).GetOwner(@ptrCast(*const IXpsOMGeometryFigure, self), owner);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigure_GetSegmentData(self: *const T, dataCount: ?*u32, segmentData: ?*f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigure.VTable, self.vtable).GetSegmentData(@ptrCast(*const IXpsOMGeometryFigure, self), dataCount, segmentData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigure_GetSegmentTypes(self: *const T, segmentCount: ?*u32, segmentTypes: ?*XPS_SEGMENT_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigure.VTable, self.vtable).GetSegmentTypes(@ptrCast(*const IXpsOMGeometryFigure, self), segmentCount, segmentTypes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigure_GetSegmentStrokes(self: *const T, segmentCount: ?*u32, segmentStrokes: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigure.VTable, self.vtable).GetSegmentStrokes(@ptrCast(*const IXpsOMGeometryFigure, self), segmentCount, segmentStrokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigure_SetSegments(self: *const T, segmentCount: u32, segmentDataCount: u32, segmentTypes: ?*const XPS_SEGMENT_TYPE, segmentData: ?*const f32, segmentStrokes: ?*const BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigure.VTable, self.vtable).SetSegments(@ptrCast(*const IXpsOMGeometryFigure, self), segmentCount, segmentDataCount, segmentTypes, segmentData, segmentStrokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigure_GetStartPoint(self: *const T, startPoint: ?*XPS_POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigure.VTable, self.vtable).GetStartPoint(@ptrCast(*const IXpsOMGeometryFigure, self), startPoint);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigure_SetStartPoint(self: *const T, startPoint: ?*const XPS_POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigure.VTable, self.vtable).SetStartPoint(@ptrCast(*const IXpsOMGeometryFigure, self), startPoint);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigure_GetIsClosed(self: *const T, isClosed: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigure.VTable, self.vtable).GetIsClosed(@ptrCast(*const IXpsOMGeometryFigure, self), isClosed);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigure_SetIsClosed(self: *const T, isClosed: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigure.VTable, self.vtable).SetIsClosed(@ptrCast(*const IXpsOMGeometryFigure, self), isClosed);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigure_GetIsFilled(self: *const T, isFilled: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigure.VTable, self.vtable).GetIsFilled(@ptrCast(*const IXpsOMGeometryFigure, self), isFilled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigure_SetIsFilled(self: *const T, isFilled: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigure.VTable, self.vtable).SetIsFilled(@ptrCast(*const IXpsOMGeometryFigure, self), isFilled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigure_GetSegmentCount(self: *const T, segmentCount: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigure.VTable, self.vtable).GetSegmentCount(@ptrCast(*const IXpsOMGeometryFigure, self), segmentCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigure_GetSegmentDataCount(self: *const T, segmentDataCount: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigure.VTable, self.vtable).GetSegmentDataCount(@ptrCast(*const IXpsOMGeometryFigure, self), segmentDataCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigure_GetSegmentStrokePattern(self: *const T, segmentStrokePattern: ?*XPS_SEGMENT_STROKE_PATTERN) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigure.VTable, self.vtable).GetSegmentStrokePattern(@ptrCast(*const IXpsOMGeometryFigure, self), segmentStrokePattern);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigure_Clone(self: *const T, geometryFigure: ?*?*IXpsOMGeometryFigure) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigure.VTable, self.vtable).Clone(@ptrCast(*const IXpsOMGeometryFigure, self), geometryFigure);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMGeometryFigureCollection_Value = @import("../zig.zig").Guid.initString("fd48c3f3-a58e-4b5a-8826-1de54abe72b2");
pub const IID_IXpsOMGeometryFigureCollection = &IID_IXpsOMGeometryFigureCollection_Value;
pub const IXpsOMGeometryFigureCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IXpsOMGeometryFigureCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IXpsOMGeometryFigureCollection,
            index: u32,
            geometryFigure: ?*?*IXpsOMGeometryFigure,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: fn(
            self: *const IXpsOMGeometryFigureCollection,
            index: u32,
            geometryFigure: ?*IXpsOMGeometryFigure,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IXpsOMGeometryFigureCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: fn(
            self: *const IXpsOMGeometryFigureCollection,
            index: u32,
            geometryFigure: ?*IXpsOMGeometryFigure,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: fn(
            self: *const IXpsOMGeometryFigureCollection,
            geometryFigure: ?*IXpsOMGeometryFigure,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigureCollection_GetCount(self: *const T, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigureCollection.VTable, self.vtable).GetCount(@ptrCast(*const IXpsOMGeometryFigureCollection, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigureCollection_GetAt(self: *const T, index: u32, geometryFigure: ?*?*IXpsOMGeometryFigure) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigureCollection.VTable, self.vtable).GetAt(@ptrCast(*const IXpsOMGeometryFigureCollection, self), index, geometryFigure);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigureCollection_InsertAt(self: *const T, index: u32, geometryFigure: ?*IXpsOMGeometryFigure) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigureCollection.VTable, self.vtable).InsertAt(@ptrCast(*const IXpsOMGeometryFigureCollection, self), index, geometryFigure);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigureCollection_RemoveAt(self: *const T, index: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigureCollection.VTable, self.vtable).RemoveAt(@ptrCast(*const IXpsOMGeometryFigureCollection, self), index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigureCollection_SetAt(self: *const T, index: u32, geometryFigure: ?*IXpsOMGeometryFigure) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigureCollection.VTable, self.vtable).SetAt(@ptrCast(*const IXpsOMGeometryFigureCollection, self), index, geometryFigure);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGeometryFigureCollection_Append(self: *const T, geometryFigure: ?*IXpsOMGeometryFigure) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGeometryFigureCollection.VTable, self.vtable).Append(@ptrCast(*const IXpsOMGeometryFigureCollection, self), geometryFigure);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPath_Value = @import("../zig.zig").Guid.initString("37d38bb6-3ee9-4110-9312-14b194163337");
pub const IID_IXpsOMPath = &IID_IXpsOMPath_Value;
pub const IXpsOMPath = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMVisual.VTable,
        GetGeometry: fn(
            self: *const IXpsOMPath,
            geometry: ?*?*IXpsOMGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGeometryLocal: fn(
            self: *const IXpsOMPath,
            geometry: ?*?*IXpsOMGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGeometryLocal: fn(
            self: *const IXpsOMPath,
            geometry: ?*IXpsOMGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGeometryLookup: fn(
            self: *const IXpsOMPath,
            lookup: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGeometryLookup: fn(
            self: *const IXpsOMPath,
            lookup: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccessibilityShortDescription: fn(
            self: *const IXpsOMPath,
            shortDescription: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAccessibilityShortDescription: fn(
            self: *const IXpsOMPath,
            shortDescription: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccessibilityLongDescription: fn(
            self: *const IXpsOMPath,
            longDescription: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAccessibilityLongDescription: fn(
            self: *const IXpsOMPath,
            longDescription: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSnapsToPixels: fn(
            self: *const IXpsOMPath,
            snapsToPixels: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSnapsToPixels: fn(
            self: *const IXpsOMPath,
            snapsToPixels: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeBrush: fn(
            self: *const IXpsOMPath,
            brush: ?*?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeBrushLocal: fn(
            self: *const IXpsOMPath,
            brush: ?*?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrokeBrushLocal: fn(
            self: *const IXpsOMPath,
            brush: ?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeBrushLookup: fn(
            self: *const IXpsOMPath,
            lookup: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrokeBrushLookup: fn(
            self: *const IXpsOMPath,
            lookup: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeDashes: fn(
            self: *const IXpsOMPath,
            strokeDashes: ?*?*IXpsOMDashCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeDashCap: fn(
            self: *const IXpsOMPath,
            strokeDashCap: ?*XPS_DASH_CAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrokeDashCap: fn(
            self: *const IXpsOMPath,
            strokeDashCap: XPS_DASH_CAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeDashOffset: fn(
            self: *const IXpsOMPath,
            strokeDashOffset: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrokeDashOffset: fn(
            self: *const IXpsOMPath,
            strokeDashOffset: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeStartLineCap: fn(
            self: *const IXpsOMPath,
            strokeStartLineCap: ?*XPS_LINE_CAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrokeStartLineCap: fn(
            self: *const IXpsOMPath,
            strokeStartLineCap: XPS_LINE_CAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeEndLineCap: fn(
            self: *const IXpsOMPath,
            strokeEndLineCap: ?*XPS_LINE_CAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrokeEndLineCap: fn(
            self: *const IXpsOMPath,
            strokeEndLineCap: XPS_LINE_CAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeLineJoin: fn(
            self: *const IXpsOMPath,
            strokeLineJoin: ?*XPS_LINE_JOIN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrokeLineJoin: fn(
            self: *const IXpsOMPath,
            strokeLineJoin: XPS_LINE_JOIN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeMiterLimit: fn(
            self: *const IXpsOMPath,
            strokeMiterLimit: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrokeMiterLimit: fn(
            self: *const IXpsOMPath,
            strokeMiterLimit: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeThickness: fn(
            self: *const IXpsOMPath,
            strokeThickness: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrokeThickness: fn(
            self: *const IXpsOMPath,
            strokeThickness: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFillBrush: fn(
            self: *const IXpsOMPath,
            brush: ?*?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFillBrushLocal: fn(
            self: *const IXpsOMPath,
            brush: ?*?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFillBrushLocal: fn(
            self: *const IXpsOMPath,
            brush: ?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFillBrushLookup: fn(
            self: *const IXpsOMPath,
            lookup: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFillBrushLookup: fn(
            self: *const IXpsOMPath,
            lookup: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IXpsOMPath,
            path: ?*?*IXpsOMPath,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMVisual.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetGeometry(self: *const T, geometry: ?*?*IXpsOMGeometry) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetGeometry(@ptrCast(*const IXpsOMPath, self), geometry);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetGeometryLocal(self: *const T, geometry: ?*?*IXpsOMGeometry) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetGeometryLocal(@ptrCast(*const IXpsOMPath, self), geometry);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_SetGeometryLocal(self: *const T, geometry: ?*IXpsOMGeometry) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).SetGeometryLocal(@ptrCast(*const IXpsOMPath, self), geometry);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetGeometryLookup(self: *const T, lookup: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetGeometryLookup(@ptrCast(*const IXpsOMPath, self), lookup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_SetGeometryLookup(self: *const T, lookup: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).SetGeometryLookup(@ptrCast(*const IXpsOMPath, self), lookup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetAccessibilityShortDescription(self: *const T, shortDescription: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetAccessibilityShortDescription(@ptrCast(*const IXpsOMPath, self), shortDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_SetAccessibilityShortDescription(self: *const T, shortDescription: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).SetAccessibilityShortDescription(@ptrCast(*const IXpsOMPath, self), shortDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetAccessibilityLongDescription(self: *const T, longDescription: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetAccessibilityLongDescription(@ptrCast(*const IXpsOMPath, self), longDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_SetAccessibilityLongDescription(self: *const T, longDescription: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).SetAccessibilityLongDescription(@ptrCast(*const IXpsOMPath, self), longDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetSnapsToPixels(self: *const T, snapsToPixels: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetSnapsToPixels(@ptrCast(*const IXpsOMPath, self), snapsToPixels);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_SetSnapsToPixels(self: *const T, snapsToPixels: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).SetSnapsToPixels(@ptrCast(*const IXpsOMPath, self), snapsToPixels);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetStrokeBrush(self: *const T, brush: ?*?*IXpsOMBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetStrokeBrush(@ptrCast(*const IXpsOMPath, self), brush);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetStrokeBrushLocal(self: *const T, brush: ?*?*IXpsOMBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetStrokeBrushLocal(@ptrCast(*const IXpsOMPath, self), brush);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_SetStrokeBrushLocal(self: *const T, brush: ?*IXpsOMBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).SetStrokeBrushLocal(@ptrCast(*const IXpsOMPath, self), brush);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetStrokeBrushLookup(self: *const T, lookup: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetStrokeBrushLookup(@ptrCast(*const IXpsOMPath, self), lookup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_SetStrokeBrushLookup(self: *const T, lookup: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).SetStrokeBrushLookup(@ptrCast(*const IXpsOMPath, self), lookup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetStrokeDashes(self: *const T, strokeDashes: ?*?*IXpsOMDashCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetStrokeDashes(@ptrCast(*const IXpsOMPath, self), strokeDashes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetStrokeDashCap(self: *const T, strokeDashCap: ?*XPS_DASH_CAP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetStrokeDashCap(@ptrCast(*const IXpsOMPath, self), strokeDashCap);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_SetStrokeDashCap(self: *const T, strokeDashCap: XPS_DASH_CAP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).SetStrokeDashCap(@ptrCast(*const IXpsOMPath, self), strokeDashCap);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetStrokeDashOffset(self: *const T, strokeDashOffset: ?*f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetStrokeDashOffset(@ptrCast(*const IXpsOMPath, self), strokeDashOffset);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_SetStrokeDashOffset(self: *const T, strokeDashOffset: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).SetStrokeDashOffset(@ptrCast(*const IXpsOMPath, self), strokeDashOffset);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetStrokeStartLineCap(self: *const T, strokeStartLineCap: ?*XPS_LINE_CAP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetStrokeStartLineCap(@ptrCast(*const IXpsOMPath, self), strokeStartLineCap);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_SetStrokeStartLineCap(self: *const T, strokeStartLineCap: XPS_LINE_CAP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).SetStrokeStartLineCap(@ptrCast(*const IXpsOMPath, self), strokeStartLineCap);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetStrokeEndLineCap(self: *const T, strokeEndLineCap: ?*XPS_LINE_CAP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetStrokeEndLineCap(@ptrCast(*const IXpsOMPath, self), strokeEndLineCap);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_SetStrokeEndLineCap(self: *const T, strokeEndLineCap: XPS_LINE_CAP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).SetStrokeEndLineCap(@ptrCast(*const IXpsOMPath, self), strokeEndLineCap);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetStrokeLineJoin(self: *const T, strokeLineJoin: ?*XPS_LINE_JOIN) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetStrokeLineJoin(@ptrCast(*const IXpsOMPath, self), strokeLineJoin);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_SetStrokeLineJoin(self: *const T, strokeLineJoin: XPS_LINE_JOIN) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).SetStrokeLineJoin(@ptrCast(*const IXpsOMPath, self), strokeLineJoin);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetStrokeMiterLimit(self: *const T, strokeMiterLimit: ?*f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetStrokeMiterLimit(@ptrCast(*const IXpsOMPath, self), strokeMiterLimit);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_SetStrokeMiterLimit(self: *const T, strokeMiterLimit: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).SetStrokeMiterLimit(@ptrCast(*const IXpsOMPath, self), strokeMiterLimit);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetStrokeThickness(self: *const T, strokeThickness: ?*f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetStrokeThickness(@ptrCast(*const IXpsOMPath, self), strokeThickness);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_SetStrokeThickness(self: *const T, strokeThickness: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).SetStrokeThickness(@ptrCast(*const IXpsOMPath, self), strokeThickness);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetFillBrush(self: *const T, brush: ?*?*IXpsOMBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetFillBrush(@ptrCast(*const IXpsOMPath, self), brush);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetFillBrushLocal(self: *const T, brush: ?*?*IXpsOMBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetFillBrushLocal(@ptrCast(*const IXpsOMPath, self), brush);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_SetFillBrushLocal(self: *const T, brush: ?*IXpsOMBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).SetFillBrushLocal(@ptrCast(*const IXpsOMPath, self), brush);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_GetFillBrushLookup(self: *const T, lookup: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).GetFillBrushLookup(@ptrCast(*const IXpsOMPath, self), lookup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_SetFillBrushLookup(self: *const T, lookup: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).SetFillBrushLookup(@ptrCast(*const IXpsOMPath, self), lookup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPath_Clone(self: *const T, path: ?*?*IXpsOMPath) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPath.VTable, self.vtable).Clone(@ptrCast(*const IXpsOMPath, self), path);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMBrush_Value = @import("../zig.zig").Guid.initString("56a3f80c-ea4c-4187-a57b-a2a473b2b42b");
pub const IID_IXpsOMBrush = &IID_IXpsOMBrush_Value;
pub const IXpsOMBrush = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMShareable.VTable,
        GetOpacity: fn(
            self: *const IXpsOMBrush,
            opacity: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpacity: fn(
            self: *const IXpsOMBrush,
            opacity: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMShareable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMBrush_GetOpacity(self: *const T, opacity: ?*f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMBrush.VTable, self.vtable).GetOpacity(@ptrCast(*const IXpsOMBrush, self), opacity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMBrush_SetOpacity(self: *const T, opacity: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMBrush.VTable, self.vtable).SetOpacity(@ptrCast(*const IXpsOMBrush, self), opacity);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMGradientStopCollection_Value = @import("../zig.zig").Guid.initString("c9174c3a-3cd3-4319-bda4-11a39392ceef");
pub const IID_IXpsOMGradientStopCollection = &IID_IXpsOMGradientStopCollection_Value;
pub const IXpsOMGradientStopCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IXpsOMGradientStopCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IXpsOMGradientStopCollection,
            index: u32,
            stop: ?*?*IXpsOMGradientStop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: fn(
            self: *const IXpsOMGradientStopCollection,
            index: u32,
            stop: ?*IXpsOMGradientStop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IXpsOMGradientStopCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: fn(
            self: *const IXpsOMGradientStopCollection,
            index: u32,
            stop: ?*IXpsOMGradientStop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: fn(
            self: *const IXpsOMGradientStopCollection,
            stop: ?*IXpsOMGradientStop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientStopCollection_GetCount(self: *const T, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientStopCollection.VTable, self.vtable).GetCount(@ptrCast(*const IXpsOMGradientStopCollection, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientStopCollection_GetAt(self: *const T, index: u32, stop: ?*?*IXpsOMGradientStop) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientStopCollection.VTable, self.vtable).GetAt(@ptrCast(*const IXpsOMGradientStopCollection, self), index, stop);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientStopCollection_InsertAt(self: *const T, index: u32, stop: ?*IXpsOMGradientStop) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientStopCollection.VTable, self.vtable).InsertAt(@ptrCast(*const IXpsOMGradientStopCollection, self), index, stop);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientStopCollection_RemoveAt(self: *const T, index: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientStopCollection.VTable, self.vtable).RemoveAt(@ptrCast(*const IXpsOMGradientStopCollection, self), index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientStopCollection_SetAt(self: *const T, index: u32, stop: ?*IXpsOMGradientStop) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientStopCollection.VTable, self.vtable).SetAt(@ptrCast(*const IXpsOMGradientStopCollection, self), index, stop);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientStopCollection_Append(self: *const T, stop: ?*IXpsOMGradientStop) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientStopCollection.VTable, self.vtable).Append(@ptrCast(*const IXpsOMGradientStopCollection, self), stop);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMSolidColorBrush_Value = @import("../zig.zig").Guid.initString("a06f9f05-3be9-4763-98a8-094fc672e488");
pub const IID_IXpsOMSolidColorBrush = &IID_IXpsOMSolidColorBrush_Value;
pub const IXpsOMSolidColorBrush = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMBrush.VTable,
        GetColor: fn(
            self: *const IXpsOMSolidColorBrush,
            color: ?*XPS_COLOR,
            colorProfile: ?*?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColor: fn(
            self: *const IXpsOMSolidColorBrush,
            color: ?*const XPS_COLOR,
            colorProfile: ?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IXpsOMSolidColorBrush,
            solidColorBrush: ?*?*IXpsOMSolidColorBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMBrush.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMSolidColorBrush_GetColor(self: *const T, color: ?*XPS_COLOR, colorProfile: ?*?*IXpsOMColorProfileResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMSolidColorBrush.VTable, self.vtable).GetColor(@ptrCast(*const IXpsOMSolidColorBrush, self), color, colorProfile);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMSolidColorBrush_SetColor(self: *const T, color: ?*const XPS_COLOR, colorProfile: ?*IXpsOMColorProfileResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMSolidColorBrush.VTable, self.vtable).SetColor(@ptrCast(*const IXpsOMSolidColorBrush, self), color, colorProfile);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMSolidColorBrush_Clone(self: *const T, solidColorBrush: ?*?*IXpsOMSolidColorBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMSolidColorBrush.VTable, self.vtable).Clone(@ptrCast(*const IXpsOMSolidColorBrush, self), solidColorBrush);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMTileBrush_Value = @import("../zig.zig").Guid.initString("0fc2328d-d722-4a54-b2ec-be90218a789e");
pub const IID_IXpsOMTileBrush = &IID_IXpsOMTileBrush_Value;
pub const IXpsOMTileBrush = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMBrush.VTable,
        GetTransform: fn(
            self: *const IXpsOMTileBrush,
            transform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransformLocal: fn(
            self: *const IXpsOMTileBrush,
            transform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformLocal: fn(
            self: *const IXpsOMTileBrush,
            transform: ?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransformLookup: fn(
            self: *const IXpsOMTileBrush,
            key: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformLookup: fn(
            self: *const IXpsOMTileBrush,
            key: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewbox: fn(
            self: *const IXpsOMTileBrush,
            viewbox: ?*XPS_RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewbox: fn(
            self: *const IXpsOMTileBrush,
            viewbox: ?*const XPS_RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewport: fn(
            self: *const IXpsOMTileBrush,
            viewport: ?*XPS_RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewport: fn(
            self: *const IXpsOMTileBrush,
            viewport: ?*const XPS_RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTileMode: fn(
            self: *const IXpsOMTileBrush,
            tileMode: ?*XPS_TILE_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTileMode: fn(
            self: *const IXpsOMTileBrush,
            tileMode: XPS_TILE_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMBrush.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMTileBrush_GetTransform(self: *const T, transform: ?*?*IXpsOMMatrixTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMTileBrush.VTable, self.vtable).GetTransform(@ptrCast(*const IXpsOMTileBrush, self), transform);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMTileBrush_GetTransformLocal(self: *const T, transform: ?*?*IXpsOMMatrixTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMTileBrush.VTable, self.vtable).GetTransformLocal(@ptrCast(*const IXpsOMTileBrush, self), transform);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMTileBrush_SetTransformLocal(self: *const T, transform: ?*IXpsOMMatrixTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMTileBrush.VTable, self.vtable).SetTransformLocal(@ptrCast(*const IXpsOMTileBrush, self), transform);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMTileBrush_GetTransformLookup(self: *const T, key: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMTileBrush.VTable, self.vtable).GetTransformLookup(@ptrCast(*const IXpsOMTileBrush, self), key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMTileBrush_SetTransformLookup(self: *const T, key: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMTileBrush.VTable, self.vtable).SetTransformLookup(@ptrCast(*const IXpsOMTileBrush, self), key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMTileBrush_GetViewbox(self: *const T, viewbox: ?*XPS_RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMTileBrush.VTable, self.vtable).GetViewbox(@ptrCast(*const IXpsOMTileBrush, self), viewbox);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMTileBrush_SetViewbox(self: *const T, viewbox: ?*const XPS_RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMTileBrush.VTable, self.vtable).SetViewbox(@ptrCast(*const IXpsOMTileBrush, self), viewbox);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMTileBrush_GetViewport(self: *const T, viewport: ?*XPS_RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMTileBrush.VTable, self.vtable).GetViewport(@ptrCast(*const IXpsOMTileBrush, self), viewport);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMTileBrush_SetViewport(self: *const T, viewport: ?*const XPS_RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMTileBrush.VTable, self.vtable).SetViewport(@ptrCast(*const IXpsOMTileBrush, self), viewport);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMTileBrush_GetTileMode(self: *const T, tileMode: ?*XPS_TILE_MODE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMTileBrush.VTable, self.vtable).GetTileMode(@ptrCast(*const IXpsOMTileBrush, self), tileMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMTileBrush_SetTileMode(self: *const T, tileMode: XPS_TILE_MODE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMTileBrush.VTable, self.vtable).SetTileMode(@ptrCast(*const IXpsOMTileBrush, self), tileMode);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMVisualBrush_Value = @import("../zig.zig").Guid.initString("97e294af-5b37-46b4-8057-874d2f64119b");
pub const IID_IXpsOMVisualBrush = &IID_IXpsOMVisualBrush_Value;
pub const IXpsOMVisualBrush = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMTileBrush.VTable,
        GetVisual: fn(
            self: *const IXpsOMVisualBrush,
            visual: ?*?*IXpsOMVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVisualLocal: fn(
            self: *const IXpsOMVisualBrush,
            visual: ?*?*IXpsOMVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVisualLocal: fn(
            self: *const IXpsOMVisualBrush,
            visual: ?*IXpsOMVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVisualLookup: fn(
            self: *const IXpsOMVisualBrush,
            lookup: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVisualLookup: fn(
            self: *const IXpsOMVisualBrush,
            lookup: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IXpsOMVisualBrush,
            visualBrush: ?*?*IXpsOMVisualBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMTileBrush.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisualBrush_GetVisual(self: *const T, visual: ?*?*IXpsOMVisual) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisualBrush.VTable, self.vtable).GetVisual(@ptrCast(*const IXpsOMVisualBrush, self), visual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisualBrush_GetVisualLocal(self: *const T, visual: ?*?*IXpsOMVisual) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisualBrush.VTable, self.vtable).GetVisualLocal(@ptrCast(*const IXpsOMVisualBrush, self), visual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisualBrush_SetVisualLocal(self: *const T, visual: ?*IXpsOMVisual) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisualBrush.VTable, self.vtable).SetVisualLocal(@ptrCast(*const IXpsOMVisualBrush, self), visual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisualBrush_GetVisualLookup(self: *const T, lookup: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisualBrush.VTable, self.vtable).GetVisualLookup(@ptrCast(*const IXpsOMVisualBrush, self), lookup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisualBrush_SetVisualLookup(self: *const T, lookup: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisualBrush.VTable, self.vtable).SetVisualLookup(@ptrCast(*const IXpsOMVisualBrush, self), lookup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisualBrush_Clone(self: *const T, visualBrush: ?*?*IXpsOMVisualBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisualBrush.VTable, self.vtable).Clone(@ptrCast(*const IXpsOMVisualBrush, self), visualBrush);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMImageBrush_Value = @import("../zig.zig").Guid.initString("3df0b466-d382-49ef-8550-dd94c80242e4");
pub const IID_IXpsOMImageBrush = &IID_IXpsOMImageBrush_Value;
pub const IXpsOMImageBrush = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMTileBrush.VTable,
        GetImageResource: fn(
            self: *const IXpsOMImageBrush,
            imageResource: ?*?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetImageResource: fn(
            self: *const IXpsOMImageBrush,
            imageResource: ?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorProfileResource: fn(
            self: *const IXpsOMImageBrush,
            colorProfileResource: ?*?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColorProfileResource: fn(
            self: *const IXpsOMImageBrush,
            colorProfileResource: ?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IXpsOMImageBrush,
            imageBrush: ?*?*IXpsOMImageBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMTileBrush.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMImageBrush_GetImageResource(self: *const T, imageResource: ?*?*IXpsOMImageResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMImageBrush.VTable, self.vtable).GetImageResource(@ptrCast(*const IXpsOMImageBrush, self), imageResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMImageBrush_SetImageResource(self: *const T, imageResource: ?*IXpsOMImageResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMImageBrush.VTable, self.vtable).SetImageResource(@ptrCast(*const IXpsOMImageBrush, self), imageResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMImageBrush_GetColorProfileResource(self: *const T, colorProfileResource: ?*?*IXpsOMColorProfileResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMImageBrush.VTable, self.vtable).GetColorProfileResource(@ptrCast(*const IXpsOMImageBrush, self), colorProfileResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMImageBrush_SetColorProfileResource(self: *const T, colorProfileResource: ?*IXpsOMColorProfileResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMImageBrush.VTable, self.vtable).SetColorProfileResource(@ptrCast(*const IXpsOMImageBrush, self), colorProfileResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMImageBrush_Clone(self: *const T, imageBrush: ?*?*IXpsOMImageBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMImageBrush.VTable, self.vtable).Clone(@ptrCast(*const IXpsOMImageBrush, self), imageBrush);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMGradientStop_Value = @import("../zig.zig").Guid.initString("5cf4f5cc-3969-49b5-a70a-5550b618fe49");
pub const IID_IXpsOMGradientStop = &IID_IXpsOMGradientStop_Value;
pub const IXpsOMGradientStop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOwner: fn(
            self: *const IXpsOMGradientStop,
            owner: ?*?*IXpsOMGradientBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOffset: fn(
            self: *const IXpsOMGradientStop,
            offset: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffset: fn(
            self: *const IXpsOMGradientStop,
            offset: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColor: fn(
            self: *const IXpsOMGradientStop,
            color: ?*XPS_COLOR,
            colorProfile: ?*?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColor: fn(
            self: *const IXpsOMGradientStop,
            color: ?*const XPS_COLOR,
            colorProfile: ?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IXpsOMGradientStop,
            gradientStop: ?*?*IXpsOMGradientStop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientStop_GetOwner(self: *const T, owner: ?*?*IXpsOMGradientBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientStop.VTable, self.vtable).GetOwner(@ptrCast(*const IXpsOMGradientStop, self), owner);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientStop_GetOffset(self: *const T, offset: ?*f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientStop.VTable, self.vtable).GetOffset(@ptrCast(*const IXpsOMGradientStop, self), offset);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientStop_SetOffset(self: *const T, offset: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientStop.VTable, self.vtable).SetOffset(@ptrCast(*const IXpsOMGradientStop, self), offset);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientStop_GetColor(self: *const T, color: ?*XPS_COLOR, colorProfile: ?*?*IXpsOMColorProfileResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientStop.VTable, self.vtable).GetColor(@ptrCast(*const IXpsOMGradientStop, self), color, colorProfile);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientStop_SetColor(self: *const T, color: ?*const XPS_COLOR, colorProfile: ?*IXpsOMColorProfileResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientStop.VTable, self.vtable).SetColor(@ptrCast(*const IXpsOMGradientStop, self), color, colorProfile);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientStop_Clone(self: *const T, gradientStop: ?*?*IXpsOMGradientStop) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientStop.VTable, self.vtable).Clone(@ptrCast(*const IXpsOMGradientStop, self), gradientStop);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMGradientBrush_Value = @import("../zig.zig").Guid.initString("edb59622-61a2-42c3-bace-acf2286c06bf");
pub const IID_IXpsOMGradientBrush = &IID_IXpsOMGradientBrush_Value;
pub const IXpsOMGradientBrush = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMBrush.VTable,
        GetGradientStops: fn(
            self: *const IXpsOMGradientBrush,
            gradientStops: ?*?*IXpsOMGradientStopCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransform: fn(
            self: *const IXpsOMGradientBrush,
            transform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransformLocal: fn(
            self: *const IXpsOMGradientBrush,
            transform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformLocal: fn(
            self: *const IXpsOMGradientBrush,
            transform: ?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransformLookup: fn(
            self: *const IXpsOMGradientBrush,
            key: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformLookup: fn(
            self: *const IXpsOMGradientBrush,
            key: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpreadMethod: fn(
            self: *const IXpsOMGradientBrush,
            spreadMethod: ?*XPS_SPREAD_METHOD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSpreadMethod: fn(
            self: *const IXpsOMGradientBrush,
            spreadMethod: XPS_SPREAD_METHOD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorInterpolationMode: fn(
            self: *const IXpsOMGradientBrush,
            colorInterpolationMode: ?*XPS_COLOR_INTERPOLATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColorInterpolationMode: fn(
            self: *const IXpsOMGradientBrush,
            colorInterpolationMode: XPS_COLOR_INTERPOLATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMBrush.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientBrush_GetGradientStops(self: *const T, gradientStops: ?*?*IXpsOMGradientStopCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientBrush.VTable, self.vtable).GetGradientStops(@ptrCast(*const IXpsOMGradientBrush, self), gradientStops);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientBrush_GetTransform(self: *const T, transform: ?*?*IXpsOMMatrixTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientBrush.VTable, self.vtable).GetTransform(@ptrCast(*const IXpsOMGradientBrush, self), transform);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientBrush_GetTransformLocal(self: *const T, transform: ?*?*IXpsOMMatrixTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientBrush.VTable, self.vtable).GetTransformLocal(@ptrCast(*const IXpsOMGradientBrush, self), transform);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientBrush_SetTransformLocal(self: *const T, transform: ?*IXpsOMMatrixTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientBrush.VTable, self.vtable).SetTransformLocal(@ptrCast(*const IXpsOMGradientBrush, self), transform);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientBrush_GetTransformLookup(self: *const T, key: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientBrush.VTable, self.vtable).GetTransformLookup(@ptrCast(*const IXpsOMGradientBrush, self), key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientBrush_SetTransformLookup(self: *const T, key: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientBrush.VTable, self.vtable).SetTransformLookup(@ptrCast(*const IXpsOMGradientBrush, self), key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientBrush_GetSpreadMethod(self: *const T, spreadMethod: ?*XPS_SPREAD_METHOD) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientBrush.VTable, self.vtable).GetSpreadMethod(@ptrCast(*const IXpsOMGradientBrush, self), spreadMethod);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientBrush_SetSpreadMethod(self: *const T, spreadMethod: XPS_SPREAD_METHOD) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientBrush.VTable, self.vtable).SetSpreadMethod(@ptrCast(*const IXpsOMGradientBrush, self), spreadMethod);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientBrush_GetColorInterpolationMode(self: *const T, colorInterpolationMode: ?*XPS_COLOR_INTERPOLATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientBrush.VTable, self.vtable).GetColorInterpolationMode(@ptrCast(*const IXpsOMGradientBrush, self), colorInterpolationMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMGradientBrush_SetColorInterpolationMode(self: *const T, colorInterpolationMode: XPS_COLOR_INTERPOLATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMGradientBrush.VTable, self.vtable).SetColorInterpolationMode(@ptrCast(*const IXpsOMGradientBrush, self), colorInterpolationMode);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMLinearGradientBrush_Value = @import("../zig.zig").Guid.initString("005e279f-c30d-40ff-93ec-1950d3c528db");
pub const IID_IXpsOMLinearGradientBrush = &IID_IXpsOMLinearGradientBrush_Value;
pub const IXpsOMLinearGradientBrush = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMGradientBrush.VTable,
        GetStartPoint: fn(
            self: *const IXpsOMLinearGradientBrush,
            startPoint: ?*XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStartPoint: fn(
            self: *const IXpsOMLinearGradientBrush,
            startPoint: ?*const XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEndPoint: fn(
            self: *const IXpsOMLinearGradientBrush,
            endPoint: ?*XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEndPoint: fn(
            self: *const IXpsOMLinearGradientBrush,
            endPoint: ?*const XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IXpsOMLinearGradientBrush,
            linearGradientBrush: ?*?*IXpsOMLinearGradientBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMGradientBrush.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMLinearGradientBrush_GetStartPoint(self: *const T, startPoint: ?*XPS_POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMLinearGradientBrush.VTable, self.vtable).GetStartPoint(@ptrCast(*const IXpsOMLinearGradientBrush, self), startPoint);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMLinearGradientBrush_SetStartPoint(self: *const T, startPoint: ?*const XPS_POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMLinearGradientBrush.VTable, self.vtable).SetStartPoint(@ptrCast(*const IXpsOMLinearGradientBrush, self), startPoint);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMLinearGradientBrush_GetEndPoint(self: *const T, endPoint: ?*XPS_POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMLinearGradientBrush.VTable, self.vtable).GetEndPoint(@ptrCast(*const IXpsOMLinearGradientBrush, self), endPoint);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMLinearGradientBrush_SetEndPoint(self: *const T, endPoint: ?*const XPS_POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMLinearGradientBrush.VTable, self.vtable).SetEndPoint(@ptrCast(*const IXpsOMLinearGradientBrush, self), endPoint);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMLinearGradientBrush_Clone(self: *const T, linearGradientBrush: ?*?*IXpsOMLinearGradientBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMLinearGradientBrush.VTable, self.vtable).Clone(@ptrCast(*const IXpsOMLinearGradientBrush, self), linearGradientBrush);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMRadialGradientBrush_Value = @import("../zig.zig").Guid.initString("75f207e5-08bf-413c-96b1-b82b4064176b");
pub const IID_IXpsOMRadialGradientBrush = &IID_IXpsOMRadialGradientBrush_Value;
pub const IXpsOMRadialGradientBrush = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMGradientBrush.VTable,
        GetCenter: fn(
            self: *const IXpsOMRadialGradientBrush,
            center: ?*XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenter: fn(
            self: *const IXpsOMRadialGradientBrush,
            center: ?*const XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRadiiSizes: fn(
            self: *const IXpsOMRadialGradientBrush,
            radiiSizes: ?*XPS_SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRadiiSizes: fn(
            self: *const IXpsOMRadialGradientBrush,
            radiiSizes: ?*const XPS_SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGradientOrigin: fn(
            self: *const IXpsOMRadialGradientBrush,
            origin: ?*XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGradientOrigin: fn(
            self: *const IXpsOMRadialGradientBrush,
            origin: ?*const XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IXpsOMRadialGradientBrush,
            radialGradientBrush: ?*?*IXpsOMRadialGradientBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMGradientBrush.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMRadialGradientBrush_GetCenter(self: *const T, center: ?*XPS_POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMRadialGradientBrush.VTable, self.vtable).GetCenter(@ptrCast(*const IXpsOMRadialGradientBrush, self), center);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMRadialGradientBrush_SetCenter(self: *const T, center: ?*const XPS_POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMRadialGradientBrush.VTable, self.vtable).SetCenter(@ptrCast(*const IXpsOMRadialGradientBrush, self), center);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMRadialGradientBrush_GetRadiiSizes(self: *const T, radiiSizes: ?*XPS_SIZE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMRadialGradientBrush.VTable, self.vtable).GetRadiiSizes(@ptrCast(*const IXpsOMRadialGradientBrush, self), radiiSizes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMRadialGradientBrush_SetRadiiSizes(self: *const T, radiiSizes: ?*const XPS_SIZE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMRadialGradientBrush.VTable, self.vtable).SetRadiiSizes(@ptrCast(*const IXpsOMRadialGradientBrush, self), radiiSizes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMRadialGradientBrush_GetGradientOrigin(self: *const T, origin: ?*XPS_POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMRadialGradientBrush.VTable, self.vtable).GetGradientOrigin(@ptrCast(*const IXpsOMRadialGradientBrush, self), origin);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMRadialGradientBrush_SetGradientOrigin(self: *const T, origin: ?*const XPS_POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMRadialGradientBrush.VTable, self.vtable).SetGradientOrigin(@ptrCast(*const IXpsOMRadialGradientBrush, self), origin);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMRadialGradientBrush_Clone(self: *const T, radialGradientBrush: ?*?*IXpsOMRadialGradientBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMRadialGradientBrush.VTable, self.vtable).Clone(@ptrCast(*const IXpsOMRadialGradientBrush, self), radialGradientBrush);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMResource_Value = @import("../zig.zig").Guid.initString("da2ac0a2-73a2-4975-ad14-74097c3ff3a5");
pub const IID_IXpsOMResource = &IID_IXpsOMResource_Value;
pub const IXpsOMResource = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMPart.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMPart.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPartResources_Value = @import("../zig.zig").Guid.initString("f4cf7729-4864-4275-99b3-a8717163ecaf");
pub const IID_IXpsOMPartResources = &IID_IXpsOMPartResources_Value;
pub const IXpsOMPartResources = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFontResources: fn(
            self: *const IXpsOMPartResources,
            fontResources: ?*?*IXpsOMFontResourceCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImageResources: fn(
            self: *const IXpsOMPartResources,
            imageResources: ?*?*IXpsOMImageResourceCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorProfileResources: fn(
            self: *const IXpsOMPartResources,
            colorProfileResources: ?*?*IXpsOMColorProfileResourceCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRemoteDictionaryResources: fn(
            self: *const IXpsOMPartResources,
            dictionaryResources: ?*?*IXpsOMRemoteDictionaryResourceCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPartResources_GetFontResources(self: *const T, fontResources: ?*?*IXpsOMFontResourceCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPartResources.VTable, self.vtable).GetFontResources(@ptrCast(*const IXpsOMPartResources, self), fontResources);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPartResources_GetImageResources(self: *const T, imageResources: ?*?*IXpsOMImageResourceCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPartResources.VTable, self.vtable).GetImageResources(@ptrCast(*const IXpsOMPartResources, self), imageResources);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPartResources_GetColorProfileResources(self: *const T, colorProfileResources: ?*?*IXpsOMColorProfileResourceCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPartResources.VTable, self.vtable).GetColorProfileResources(@ptrCast(*const IXpsOMPartResources, self), colorProfileResources);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPartResources_GetRemoteDictionaryResources(self: *const T, dictionaryResources: ?*?*IXpsOMRemoteDictionaryResourceCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPartResources.VTable, self.vtable).GetRemoteDictionaryResources(@ptrCast(*const IXpsOMPartResources, self), dictionaryResources);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMDictionary_Value = @import("../zig.zig").Guid.initString("897c86b8-8eaf-4ae3-bdde-56419fcf4236");
pub const IID_IXpsOMDictionary = &IID_IXpsOMDictionary_Value;
pub const IXpsOMDictionary = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOwner: fn(
            self: *const IXpsOMDictionary,
            owner: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: fn(
            self: *const IXpsOMDictionary,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IXpsOMDictionary,
            index: u32,
            key: ?*?PWSTR,
            entry: ?*?*IXpsOMShareable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetByKey: fn(
            self: *const IXpsOMDictionary,
            key: ?[*:0]const u16,
            beforeEntry: ?*IXpsOMShareable,
            entry: ?*?*IXpsOMShareable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIndex: fn(
            self: *const IXpsOMDictionary,
            entry: ?*IXpsOMShareable,
            index: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: fn(
            self: *const IXpsOMDictionary,
            key: ?[*:0]const u16,
            entry: ?*IXpsOMShareable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: fn(
            self: *const IXpsOMDictionary,
            index: u32,
            key: ?[*:0]const u16,
            entry: ?*IXpsOMShareable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IXpsOMDictionary,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: fn(
            self: *const IXpsOMDictionary,
            index: u32,
            key: ?[*:0]const u16,
            entry: ?*IXpsOMShareable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IXpsOMDictionary,
            dictionary: ?*?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDictionary_GetOwner(self: *const T, owner: ?*?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDictionary.VTable, self.vtable).GetOwner(@ptrCast(*const IXpsOMDictionary, self), owner);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDictionary_GetCount(self: *const T, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDictionary.VTable, self.vtable).GetCount(@ptrCast(*const IXpsOMDictionary, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDictionary_GetAt(self: *const T, index: u32, key: ?*?PWSTR, entry: ?*?*IXpsOMShareable) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDictionary.VTable, self.vtable).GetAt(@ptrCast(*const IXpsOMDictionary, self), index, key, entry);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDictionary_GetByKey(self: *const T, key: ?[*:0]const u16, beforeEntry: ?*IXpsOMShareable, entry: ?*?*IXpsOMShareable) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDictionary.VTable, self.vtable).GetByKey(@ptrCast(*const IXpsOMDictionary, self), key, beforeEntry, entry);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDictionary_GetIndex(self: *const T, entry: ?*IXpsOMShareable, index: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDictionary.VTable, self.vtable).GetIndex(@ptrCast(*const IXpsOMDictionary, self), entry, index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDictionary_Append(self: *const T, key: ?[*:0]const u16, entry: ?*IXpsOMShareable) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDictionary.VTable, self.vtable).Append(@ptrCast(*const IXpsOMDictionary, self), key, entry);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDictionary_InsertAt(self: *const T, index: u32, key: ?[*:0]const u16, entry: ?*IXpsOMShareable) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDictionary.VTable, self.vtable).InsertAt(@ptrCast(*const IXpsOMDictionary, self), index, key, entry);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDictionary_RemoveAt(self: *const T, index: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDictionary.VTable, self.vtable).RemoveAt(@ptrCast(*const IXpsOMDictionary, self), index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDictionary_SetAt(self: *const T, index: u32, key: ?[*:0]const u16, entry: ?*IXpsOMShareable) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDictionary.VTable, self.vtable).SetAt(@ptrCast(*const IXpsOMDictionary, self), index, key, entry);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDictionary_Clone(self: *const T, dictionary: ?*?*IXpsOMDictionary) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDictionary.VTable, self.vtable).Clone(@ptrCast(*const IXpsOMDictionary, self), dictionary);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMFontResource_Value = @import("../zig.zig").Guid.initString("a8c45708-47d9-4af4-8d20-33b48c9b8485");
pub const IID_IXpsOMFontResource = &IID_IXpsOMFontResource_Value;
pub const IXpsOMFontResource = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMResource.VTable,
        GetStream: fn(
            self: *const IXpsOMFontResource,
            readerStream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContent: fn(
            self: *const IXpsOMFontResource,
            sourceStream: ?*IStream,
            embeddingOption: XPS_FONT_EMBEDDING,
            partName: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEmbeddingOption: fn(
            self: *const IXpsOMFontResource,
            embeddingOption: ?*XPS_FONT_EMBEDDING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMResource.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMFontResource_GetStream(self: *const T, readerStream: ?*?*IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMFontResource.VTable, self.vtable).GetStream(@ptrCast(*const IXpsOMFontResource, self), readerStream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMFontResource_SetContent(self: *const T, sourceStream: ?*IStream, embeddingOption: XPS_FONT_EMBEDDING, partName: ?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMFontResource.VTable, self.vtable).SetContent(@ptrCast(*const IXpsOMFontResource, self), sourceStream, embeddingOption, partName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMFontResource_GetEmbeddingOption(self: *const T, embeddingOption: ?*XPS_FONT_EMBEDDING) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMFontResource.VTable, self.vtable).GetEmbeddingOption(@ptrCast(*const IXpsOMFontResource, self), embeddingOption);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMFontResourceCollection_Value = @import("../zig.zig").Guid.initString("70b4a6bb-88d4-4fa8-aaf9-6d9c596fdbad");
pub const IID_IXpsOMFontResourceCollection = &IID_IXpsOMFontResourceCollection_Value;
pub const IXpsOMFontResourceCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IXpsOMFontResourceCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IXpsOMFontResourceCollection,
            index: u32,
            value: ?*?*IXpsOMFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: fn(
            self: *const IXpsOMFontResourceCollection,
            index: u32,
            value: ?*IXpsOMFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: fn(
            self: *const IXpsOMFontResourceCollection,
            index: u32,
            value: ?*IXpsOMFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: fn(
            self: *const IXpsOMFontResourceCollection,
            value: ?*IXpsOMFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IXpsOMFontResourceCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetByPartName: fn(
            self: *const IXpsOMFontResourceCollection,
            partName: ?*IOpcPartUri,
            part: ?*?*IXpsOMFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMFontResourceCollection_GetCount(self: *const T, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMFontResourceCollection.VTable, self.vtable).GetCount(@ptrCast(*const IXpsOMFontResourceCollection, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMFontResourceCollection_GetAt(self: *const T, index: u32, value: ?*?*IXpsOMFontResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMFontResourceCollection.VTable, self.vtable).GetAt(@ptrCast(*const IXpsOMFontResourceCollection, self), index, value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMFontResourceCollection_SetAt(self: *const T, index: u32, value: ?*IXpsOMFontResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMFontResourceCollection.VTable, self.vtable).SetAt(@ptrCast(*const IXpsOMFontResourceCollection, self), index, value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMFontResourceCollection_InsertAt(self: *const T, index: u32, value: ?*IXpsOMFontResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMFontResourceCollection.VTable, self.vtable).InsertAt(@ptrCast(*const IXpsOMFontResourceCollection, self), index, value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMFontResourceCollection_Append(self: *const T, value: ?*IXpsOMFontResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMFontResourceCollection.VTable, self.vtable).Append(@ptrCast(*const IXpsOMFontResourceCollection, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMFontResourceCollection_RemoveAt(self: *const T, index: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMFontResourceCollection.VTable, self.vtable).RemoveAt(@ptrCast(*const IXpsOMFontResourceCollection, self), index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMFontResourceCollection_GetByPartName(self: *const T, partName: ?*IOpcPartUri, part: ?*?*IXpsOMFontResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMFontResourceCollection.VTable, self.vtable).GetByPartName(@ptrCast(*const IXpsOMFontResourceCollection, self), partName, part);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMImageResource_Value = @import("../zig.zig").Guid.initString("3db8417d-ae50-485e-9a44-d7758f78a23f");
pub const IID_IXpsOMImageResource = &IID_IXpsOMImageResource_Value;
pub const IXpsOMImageResource = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMResource.VTable,
        GetStream: fn(
            self: *const IXpsOMImageResource,
            readerStream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContent: fn(
            self: *const IXpsOMImageResource,
            sourceStream: ?*IStream,
            imageType: XPS_IMAGE_TYPE,
            partName: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImageType: fn(
            self: *const IXpsOMImageResource,
            imageType: ?*XPS_IMAGE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMResource.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMImageResource_GetStream(self: *const T, readerStream: ?*?*IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMImageResource.VTable, self.vtable).GetStream(@ptrCast(*const IXpsOMImageResource, self), readerStream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMImageResource_SetContent(self: *const T, sourceStream: ?*IStream, imageType: XPS_IMAGE_TYPE, partName: ?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMImageResource.VTable, self.vtable).SetContent(@ptrCast(*const IXpsOMImageResource, self), sourceStream, imageType, partName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMImageResource_GetImageType(self: *const T, imageType: ?*XPS_IMAGE_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMImageResource.VTable, self.vtable).GetImageType(@ptrCast(*const IXpsOMImageResource, self), imageType);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMImageResourceCollection_Value = @import("../zig.zig").Guid.initString("7a4a1a71-9cde-4b71-b33f-62de843eabfe");
pub const IID_IXpsOMImageResourceCollection = &IID_IXpsOMImageResourceCollection_Value;
pub const IXpsOMImageResourceCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IXpsOMImageResourceCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IXpsOMImageResourceCollection,
            index: u32,
            object: ?*?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: fn(
            self: *const IXpsOMImageResourceCollection,
            index: u32,
            object: ?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IXpsOMImageResourceCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: fn(
            self: *const IXpsOMImageResourceCollection,
            index: u32,
            object: ?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: fn(
            self: *const IXpsOMImageResourceCollection,
            object: ?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetByPartName: fn(
            self: *const IXpsOMImageResourceCollection,
            partName: ?*IOpcPartUri,
            part: ?*?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMImageResourceCollection_GetCount(self: *const T, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMImageResourceCollection.VTable, self.vtable).GetCount(@ptrCast(*const IXpsOMImageResourceCollection, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMImageResourceCollection_GetAt(self: *const T, index: u32, object: ?*?*IXpsOMImageResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMImageResourceCollection.VTable, self.vtable).GetAt(@ptrCast(*const IXpsOMImageResourceCollection, self), index, object);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMImageResourceCollection_InsertAt(self: *const T, index: u32, object: ?*IXpsOMImageResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMImageResourceCollection.VTable, self.vtable).InsertAt(@ptrCast(*const IXpsOMImageResourceCollection, self), index, object);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMImageResourceCollection_RemoveAt(self: *const T, index: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMImageResourceCollection.VTable, self.vtable).RemoveAt(@ptrCast(*const IXpsOMImageResourceCollection, self), index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMImageResourceCollection_SetAt(self: *const T, index: u32, object: ?*IXpsOMImageResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMImageResourceCollection.VTable, self.vtable).SetAt(@ptrCast(*const IXpsOMImageResourceCollection, self), index, object);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMImageResourceCollection_Append(self: *const T, object: ?*IXpsOMImageResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMImageResourceCollection.VTable, self.vtable).Append(@ptrCast(*const IXpsOMImageResourceCollection, self), object);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMImageResourceCollection_GetByPartName(self: *const T, partName: ?*IOpcPartUri, part: ?*?*IXpsOMImageResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMImageResourceCollection.VTable, self.vtable).GetByPartName(@ptrCast(*const IXpsOMImageResourceCollection, self), partName, part);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMColorProfileResource_Value = @import("../zig.zig").Guid.initString("67bd7d69-1eef-4bb1-b5e7-6f4f87be8abe");
pub const IID_IXpsOMColorProfileResource = &IID_IXpsOMColorProfileResource_Value;
pub const IXpsOMColorProfileResource = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMResource.VTable,
        GetStream: fn(
            self: *const IXpsOMColorProfileResource,
            stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContent: fn(
            self: *const IXpsOMColorProfileResource,
            sourceStream: ?*IStream,
            partName: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMResource.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMColorProfileResource_GetStream(self: *const T, stream: ?*?*IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMColorProfileResource.VTable, self.vtable).GetStream(@ptrCast(*const IXpsOMColorProfileResource, self), stream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMColorProfileResource_SetContent(self: *const T, sourceStream: ?*IStream, partName: ?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMColorProfileResource.VTable, self.vtable).SetContent(@ptrCast(*const IXpsOMColorProfileResource, self), sourceStream, partName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMColorProfileResourceCollection_Value = @import("../zig.zig").Guid.initString("12759630-5fba-4283-8f7d-cca849809edb");
pub const IID_IXpsOMColorProfileResourceCollection = &IID_IXpsOMColorProfileResourceCollection_Value;
pub const IXpsOMColorProfileResourceCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IXpsOMColorProfileResourceCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IXpsOMColorProfileResourceCollection,
            index: u32,
            object: ?*?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: fn(
            self: *const IXpsOMColorProfileResourceCollection,
            index: u32,
            object: ?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IXpsOMColorProfileResourceCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: fn(
            self: *const IXpsOMColorProfileResourceCollection,
            index: u32,
            object: ?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: fn(
            self: *const IXpsOMColorProfileResourceCollection,
            object: ?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetByPartName: fn(
            self: *const IXpsOMColorProfileResourceCollection,
            partName: ?*IOpcPartUri,
            part: ?*?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMColorProfileResourceCollection_GetCount(self: *const T, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMColorProfileResourceCollection.VTable, self.vtable).GetCount(@ptrCast(*const IXpsOMColorProfileResourceCollection, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMColorProfileResourceCollection_GetAt(self: *const T, index: u32, object: ?*?*IXpsOMColorProfileResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMColorProfileResourceCollection.VTable, self.vtable).GetAt(@ptrCast(*const IXpsOMColorProfileResourceCollection, self), index, object);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMColorProfileResourceCollection_InsertAt(self: *const T, index: u32, object: ?*IXpsOMColorProfileResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMColorProfileResourceCollection.VTable, self.vtable).InsertAt(@ptrCast(*const IXpsOMColorProfileResourceCollection, self), index, object);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMColorProfileResourceCollection_RemoveAt(self: *const T, index: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMColorProfileResourceCollection.VTable, self.vtable).RemoveAt(@ptrCast(*const IXpsOMColorProfileResourceCollection, self), index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMColorProfileResourceCollection_SetAt(self: *const T, index: u32, object: ?*IXpsOMColorProfileResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMColorProfileResourceCollection.VTable, self.vtable).SetAt(@ptrCast(*const IXpsOMColorProfileResourceCollection, self), index, object);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMColorProfileResourceCollection_Append(self: *const T, object: ?*IXpsOMColorProfileResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMColorProfileResourceCollection.VTable, self.vtable).Append(@ptrCast(*const IXpsOMColorProfileResourceCollection, self), object);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMColorProfileResourceCollection_GetByPartName(self: *const T, partName: ?*IOpcPartUri, part: ?*?*IXpsOMColorProfileResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMColorProfileResourceCollection.VTable, self.vtable).GetByPartName(@ptrCast(*const IXpsOMColorProfileResourceCollection, self), partName, part);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPrintTicketResource_Value = @import("../zig.zig").Guid.initString("e7ff32d2-34aa-499b-bbe9-9cd4ee6c59f7");
pub const IID_IXpsOMPrintTicketResource = &IID_IXpsOMPrintTicketResource_Value;
pub const IXpsOMPrintTicketResource = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMResource.VTable,
        GetStream: fn(
            self: *const IXpsOMPrintTicketResource,
            stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContent: fn(
            self: *const IXpsOMPrintTicketResource,
            sourceStream: ?*IStream,
            partName: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMResource.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPrintTicketResource_GetStream(self: *const T, stream: ?*?*IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPrintTicketResource.VTable, self.vtable).GetStream(@ptrCast(*const IXpsOMPrintTicketResource, self), stream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPrintTicketResource_SetContent(self: *const T, sourceStream: ?*IStream, partName: ?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPrintTicketResource.VTable, self.vtable).SetContent(@ptrCast(*const IXpsOMPrintTicketResource, self), sourceStream, partName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMRemoteDictionaryResource_Value = @import("../zig.zig").Guid.initString("c9bd7cd4-e16a-4bf8-8c84-c950af7a3061");
pub const IID_IXpsOMRemoteDictionaryResource = &IID_IXpsOMRemoteDictionaryResource_Value;
pub const IXpsOMRemoteDictionaryResource = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMResource.VTable,
        GetDictionary: fn(
            self: *const IXpsOMRemoteDictionaryResource,
            dictionary: ?*?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDictionary: fn(
            self: *const IXpsOMRemoteDictionaryResource,
            dictionary: ?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMResource.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMRemoteDictionaryResource_GetDictionary(self: *const T, dictionary: ?*?*IXpsOMDictionary) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMRemoteDictionaryResource.VTable, self.vtable).GetDictionary(@ptrCast(*const IXpsOMRemoteDictionaryResource, self), dictionary);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMRemoteDictionaryResource_SetDictionary(self: *const T, dictionary: ?*IXpsOMDictionary) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMRemoteDictionaryResource.VTable, self.vtable).SetDictionary(@ptrCast(*const IXpsOMRemoteDictionaryResource, self), dictionary);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMRemoteDictionaryResourceCollection_Value = @import("../zig.zig").Guid.initString("5c38db61-7fec-464a-87bd-41e3bef018be");
pub const IID_IXpsOMRemoteDictionaryResourceCollection = &IID_IXpsOMRemoteDictionaryResourceCollection_Value;
pub const IXpsOMRemoteDictionaryResourceCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IXpsOMRemoteDictionaryResourceCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IXpsOMRemoteDictionaryResourceCollection,
            index: u32,
            object: ?*?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: fn(
            self: *const IXpsOMRemoteDictionaryResourceCollection,
            index: u32,
            object: ?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IXpsOMRemoteDictionaryResourceCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: fn(
            self: *const IXpsOMRemoteDictionaryResourceCollection,
            index: u32,
            object: ?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: fn(
            self: *const IXpsOMRemoteDictionaryResourceCollection,
            object: ?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetByPartName: fn(
            self: *const IXpsOMRemoteDictionaryResourceCollection,
            partName: ?*IOpcPartUri,
            remoteDictionaryResource: ?*?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMRemoteDictionaryResourceCollection_GetCount(self: *const T, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMRemoteDictionaryResourceCollection.VTable, self.vtable).GetCount(@ptrCast(*const IXpsOMRemoteDictionaryResourceCollection, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMRemoteDictionaryResourceCollection_GetAt(self: *const T, index: u32, object: ?*?*IXpsOMRemoteDictionaryResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMRemoteDictionaryResourceCollection.VTable, self.vtable).GetAt(@ptrCast(*const IXpsOMRemoteDictionaryResourceCollection, self), index, object);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMRemoteDictionaryResourceCollection_InsertAt(self: *const T, index: u32, object: ?*IXpsOMRemoteDictionaryResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMRemoteDictionaryResourceCollection.VTable, self.vtable).InsertAt(@ptrCast(*const IXpsOMRemoteDictionaryResourceCollection, self), index, object);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMRemoteDictionaryResourceCollection_RemoveAt(self: *const T, index: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMRemoteDictionaryResourceCollection.VTable, self.vtable).RemoveAt(@ptrCast(*const IXpsOMRemoteDictionaryResourceCollection, self), index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMRemoteDictionaryResourceCollection_SetAt(self: *const T, index: u32, object: ?*IXpsOMRemoteDictionaryResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMRemoteDictionaryResourceCollection.VTable, self.vtable).SetAt(@ptrCast(*const IXpsOMRemoteDictionaryResourceCollection, self), index, object);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMRemoteDictionaryResourceCollection_Append(self: *const T, object: ?*IXpsOMRemoteDictionaryResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMRemoteDictionaryResourceCollection.VTable, self.vtable).Append(@ptrCast(*const IXpsOMRemoteDictionaryResourceCollection, self), object);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMRemoteDictionaryResourceCollection_GetByPartName(self: *const T, partName: ?*IOpcPartUri, remoteDictionaryResource: ?*?*IXpsOMRemoteDictionaryResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMRemoteDictionaryResourceCollection.VTable, self.vtable).GetByPartName(@ptrCast(*const IXpsOMRemoteDictionaryResourceCollection, self), partName, remoteDictionaryResource);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMSignatureBlockResourceCollection_Value = @import("../zig.zig").Guid.initString("ab8f5d8e-351b-4d33-aaed-fa56f0022931");
pub const IID_IXpsOMSignatureBlockResourceCollection = &IID_IXpsOMSignatureBlockResourceCollection_Value;
pub const IXpsOMSignatureBlockResourceCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IXpsOMSignatureBlockResourceCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IXpsOMSignatureBlockResourceCollection,
            index: u32,
            signatureBlockResource: ?*?*IXpsOMSignatureBlockResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: fn(
            self: *const IXpsOMSignatureBlockResourceCollection,
            index: u32,
            signatureBlockResource: ?*IXpsOMSignatureBlockResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IXpsOMSignatureBlockResourceCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: fn(
            self: *const IXpsOMSignatureBlockResourceCollection,
            index: u32,
            signatureBlockResource: ?*IXpsOMSignatureBlockResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: fn(
            self: *const IXpsOMSignatureBlockResourceCollection,
            signatureBlockResource: ?*IXpsOMSignatureBlockResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetByPartName: fn(
            self: *const IXpsOMSignatureBlockResourceCollection,
            partName: ?*IOpcPartUri,
            signatureBlockResource: ?*?*IXpsOMSignatureBlockResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMSignatureBlockResourceCollection_GetCount(self: *const T, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMSignatureBlockResourceCollection.VTable, self.vtable).GetCount(@ptrCast(*const IXpsOMSignatureBlockResourceCollection, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMSignatureBlockResourceCollection_GetAt(self: *const T, index: u32, signatureBlockResource: ?*?*IXpsOMSignatureBlockResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMSignatureBlockResourceCollection.VTable, self.vtable).GetAt(@ptrCast(*const IXpsOMSignatureBlockResourceCollection, self), index, signatureBlockResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMSignatureBlockResourceCollection_InsertAt(self: *const T, index: u32, signatureBlockResource: ?*IXpsOMSignatureBlockResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMSignatureBlockResourceCollection.VTable, self.vtable).InsertAt(@ptrCast(*const IXpsOMSignatureBlockResourceCollection, self), index, signatureBlockResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMSignatureBlockResourceCollection_RemoveAt(self: *const T, index: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMSignatureBlockResourceCollection.VTable, self.vtable).RemoveAt(@ptrCast(*const IXpsOMSignatureBlockResourceCollection, self), index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMSignatureBlockResourceCollection_SetAt(self: *const T, index: u32, signatureBlockResource: ?*IXpsOMSignatureBlockResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMSignatureBlockResourceCollection.VTable, self.vtable).SetAt(@ptrCast(*const IXpsOMSignatureBlockResourceCollection, self), index, signatureBlockResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMSignatureBlockResourceCollection_Append(self: *const T, signatureBlockResource: ?*IXpsOMSignatureBlockResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMSignatureBlockResourceCollection.VTable, self.vtable).Append(@ptrCast(*const IXpsOMSignatureBlockResourceCollection, self), signatureBlockResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMSignatureBlockResourceCollection_GetByPartName(self: *const T, partName: ?*IOpcPartUri, signatureBlockResource: ?*?*IXpsOMSignatureBlockResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMSignatureBlockResourceCollection.VTable, self.vtable).GetByPartName(@ptrCast(*const IXpsOMSignatureBlockResourceCollection, self), partName, signatureBlockResource);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMDocumentStructureResource_Value = @import("../zig.zig").Guid.initString("85febc8a-6b63-48a9-af07-7064e4ecff30");
pub const IID_IXpsOMDocumentStructureResource = &IID_IXpsOMDocumentStructureResource_Value;
pub const IXpsOMDocumentStructureResource = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMResource.VTable,
        GetOwner: fn(
            self: *const IXpsOMDocumentStructureResource,
            owner: ?*?*IXpsOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStream: fn(
            self: *const IXpsOMDocumentStructureResource,
            stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContent: fn(
            self: *const IXpsOMDocumentStructureResource,
            sourceStream: ?*IStream,
            partName: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMResource.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocumentStructureResource_GetOwner(self: *const T, owner: ?*?*IXpsOMDocument) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocumentStructureResource.VTable, self.vtable).GetOwner(@ptrCast(*const IXpsOMDocumentStructureResource, self), owner);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocumentStructureResource_GetStream(self: *const T, stream: ?*?*IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocumentStructureResource.VTable, self.vtable).GetStream(@ptrCast(*const IXpsOMDocumentStructureResource, self), stream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocumentStructureResource_SetContent(self: *const T, sourceStream: ?*IStream, partName: ?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocumentStructureResource.VTable, self.vtable).SetContent(@ptrCast(*const IXpsOMDocumentStructureResource, self), sourceStream, partName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMStoryFragmentsResource_Value = @import("../zig.zig").Guid.initString("c2b3ca09-0473-4282-87ae-1780863223f0");
pub const IID_IXpsOMStoryFragmentsResource = &IID_IXpsOMStoryFragmentsResource_Value;
pub const IXpsOMStoryFragmentsResource = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMResource.VTable,
        GetOwner: fn(
            self: *const IXpsOMStoryFragmentsResource,
            owner: ?*?*IXpsOMPageReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStream: fn(
            self: *const IXpsOMStoryFragmentsResource,
            stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContent: fn(
            self: *const IXpsOMStoryFragmentsResource,
            sourceStream: ?*IStream,
            partName: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMResource.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMStoryFragmentsResource_GetOwner(self: *const T, owner: ?*?*IXpsOMPageReference) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMStoryFragmentsResource.VTable, self.vtable).GetOwner(@ptrCast(*const IXpsOMStoryFragmentsResource, self), owner);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMStoryFragmentsResource_GetStream(self: *const T, stream: ?*?*IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMStoryFragmentsResource.VTable, self.vtable).GetStream(@ptrCast(*const IXpsOMStoryFragmentsResource, self), stream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMStoryFragmentsResource_SetContent(self: *const T, sourceStream: ?*IStream, partName: ?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMStoryFragmentsResource.VTable, self.vtable).SetContent(@ptrCast(*const IXpsOMStoryFragmentsResource, self), sourceStream, partName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMSignatureBlockResource_Value = @import("../zig.zig").Guid.initString("4776ad35-2e04-4357-8743-ebf6c171a905");
pub const IID_IXpsOMSignatureBlockResource = &IID_IXpsOMSignatureBlockResource_Value;
pub const IXpsOMSignatureBlockResource = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMResource.VTable,
        GetOwner: fn(
            self: *const IXpsOMSignatureBlockResource,
            owner: ?*?*IXpsOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStream: fn(
            self: *const IXpsOMSignatureBlockResource,
            stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContent: fn(
            self: *const IXpsOMSignatureBlockResource,
            sourceStream: ?*IStream,
            partName: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMResource.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMSignatureBlockResource_GetOwner(self: *const T, owner: ?*?*IXpsOMDocument) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMSignatureBlockResource.VTable, self.vtable).GetOwner(@ptrCast(*const IXpsOMSignatureBlockResource, self), owner);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMSignatureBlockResource_GetStream(self: *const T, stream: ?*?*IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMSignatureBlockResource.VTable, self.vtable).GetStream(@ptrCast(*const IXpsOMSignatureBlockResource, self), stream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMSignatureBlockResource_SetContent(self: *const T, sourceStream: ?*IStream, partName: ?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMSignatureBlockResource.VTable, self.vtable).SetContent(@ptrCast(*const IXpsOMSignatureBlockResource, self), sourceStream, partName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMVisualCollection_Value = @import("../zig.zig").Guid.initString("94d8abde-ab91-46a8-82b7-f5b05ef01a96");
pub const IID_IXpsOMVisualCollection = &IID_IXpsOMVisualCollection_Value;
pub const IXpsOMVisualCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IXpsOMVisualCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IXpsOMVisualCollection,
            index: u32,
            object: ?*?*IXpsOMVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: fn(
            self: *const IXpsOMVisualCollection,
            index: u32,
            object: ?*IXpsOMVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IXpsOMVisualCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: fn(
            self: *const IXpsOMVisualCollection,
            index: u32,
            object: ?*IXpsOMVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: fn(
            self: *const IXpsOMVisualCollection,
            object: ?*IXpsOMVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisualCollection_GetCount(self: *const T, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisualCollection.VTable, self.vtable).GetCount(@ptrCast(*const IXpsOMVisualCollection, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisualCollection_GetAt(self: *const T, index: u32, object: ?*?*IXpsOMVisual) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisualCollection.VTable, self.vtable).GetAt(@ptrCast(*const IXpsOMVisualCollection, self), index, object);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisualCollection_InsertAt(self: *const T, index: u32, object: ?*IXpsOMVisual) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisualCollection.VTable, self.vtable).InsertAt(@ptrCast(*const IXpsOMVisualCollection, self), index, object);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisualCollection_RemoveAt(self: *const T, index: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisualCollection.VTable, self.vtable).RemoveAt(@ptrCast(*const IXpsOMVisualCollection, self), index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisualCollection_SetAt(self: *const T, index: u32, object: ?*IXpsOMVisual) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisualCollection.VTable, self.vtable).SetAt(@ptrCast(*const IXpsOMVisualCollection, self), index, object);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMVisualCollection_Append(self: *const T, object: ?*IXpsOMVisual) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMVisualCollection.VTable, self.vtable).Append(@ptrCast(*const IXpsOMVisualCollection, self), object);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMCanvas_Value = @import("../zig.zig").Guid.initString("221d1452-331e-47c6-87e9-6ccefb9b5ba3");
pub const IID_IXpsOMCanvas = &IID_IXpsOMCanvas_Value;
pub const IXpsOMCanvas = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMVisual.VTable,
        GetVisuals: fn(
            self: *const IXpsOMCanvas,
            visuals: ?*?*IXpsOMVisualCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUseAliasedEdgeMode: fn(
            self: *const IXpsOMCanvas,
            useAliasedEdgeMode: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUseAliasedEdgeMode: fn(
            self: *const IXpsOMCanvas,
            useAliasedEdgeMode: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccessibilityShortDescription: fn(
            self: *const IXpsOMCanvas,
            shortDescription: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAccessibilityShortDescription: fn(
            self: *const IXpsOMCanvas,
            shortDescription: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccessibilityLongDescription: fn(
            self: *const IXpsOMCanvas,
            longDescription: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAccessibilityLongDescription: fn(
            self: *const IXpsOMCanvas,
            longDescription: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDictionary: fn(
            self: *const IXpsOMCanvas,
            resourceDictionary: ?*?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDictionaryLocal: fn(
            self: *const IXpsOMCanvas,
            resourceDictionary: ?*?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDictionaryLocal: fn(
            self: *const IXpsOMCanvas,
            resourceDictionary: ?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDictionaryResource: fn(
            self: *const IXpsOMCanvas,
            remoteDictionaryResource: ?*?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDictionaryResource: fn(
            self: *const IXpsOMCanvas,
            remoteDictionaryResource: ?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IXpsOMCanvas,
            canvas: ?*?*IXpsOMCanvas,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMVisual.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCanvas_GetVisuals(self: *const T, visuals: ?*?*IXpsOMVisualCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCanvas.VTable, self.vtable).GetVisuals(@ptrCast(*const IXpsOMCanvas, self), visuals);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCanvas_GetUseAliasedEdgeMode(self: *const T, useAliasedEdgeMode: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCanvas.VTable, self.vtable).GetUseAliasedEdgeMode(@ptrCast(*const IXpsOMCanvas, self), useAliasedEdgeMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCanvas_SetUseAliasedEdgeMode(self: *const T, useAliasedEdgeMode: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCanvas.VTable, self.vtable).SetUseAliasedEdgeMode(@ptrCast(*const IXpsOMCanvas, self), useAliasedEdgeMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCanvas_GetAccessibilityShortDescription(self: *const T, shortDescription: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCanvas.VTable, self.vtable).GetAccessibilityShortDescription(@ptrCast(*const IXpsOMCanvas, self), shortDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCanvas_SetAccessibilityShortDescription(self: *const T, shortDescription: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCanvas.VTable, self.vtable).SetAccessibilityShortDescription(@ptrCast(*const IXpsOMCanvas, self), shortDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCanvas_GetAccessibilityLongDescription(self: *const T, longDescription: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCanvas.VTable, self.vtable).GetAccessibilityLongDescription(@ptrCast(*const IXpsOMCanvas, self), longDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCanvas_SetAccessibilityLongDescription(self: *const T, longDescription: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCanvas.VTable, self.vtable).SetAccessibilityLongDescription(@ptrCast(*const IXpsOMCanvas, self), longDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCanvas_GetDictionary(self: *const T, resourceDictionary: ?*?*IXpsOMDictionary) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCanvas.VTable, self.vtable).GetDictionary(@ptrCast(*const IXpsOMCanvas, self), resourceDictionary);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCanvas_GetDictionaryLocal(self: *const T, resourceDictionary: ?*?*IXpsOMDictionary) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCanvas.VTable, self.vtable).GetDictionaryLocal(@ptrCast(*const IXpsOMCanvas, self), resourceDictionary);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCanvas_SetDictionaryLocal(self: *const T, resourceDictionary: ?*IXpsOMDictionary) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCanvas.VTable, self.vtable).SetDictionaryLocal(@ptrCast(*const IXpsOMCanvas, self), resourceDictionary);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCanvas_GetDictionaryResource(self: *const T, remoteDictionaryResource: ?*?*IXpsOMRemoteDictionaryResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCanvas.VTable, self.vtable).GetDictionaryResource(@ptrCast(*const IXpsOMCanvas, self), remoteDictionaryResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCanvas_SetDictionaryResource(self: *const T, remoteDictionaryResource: ?*IXpsOMRemoteDictionaryResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCanvas.VTable, self.vtable).SetDictionaryResource(@ptrCast(*const IXpsOMCanvas, self), remoteDictionaryResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCanvas_Clone(self: *const T, canvas: ?*?*IXpsOMCanvas) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCanvas.VTable, self.vtable).Clone(@ptrCast(*const IXpsOMCanvas, self), canvas);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPage_Value = @import("../zig.zig").Guid.initString("d3e18888-f120-4fee-8c68-35296eae91d4");
pub const IID_IXpsOMPage = &IID_IXpsOMPage_Value;
pub const IXpsOMPage = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMPart.VTable,
        GetOwner: fn(
            self: *const IXpsOMPage,
            pageReference: ?*?*IXpsOMPageReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVisuals: fn(
            self: *const IXpsOMPage,
            visuals: ?*?*IXpsOMVisualCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPageDimensions: fn(
            self: *const IXpsOMPage,
            pageDimensions: ?*XPS_SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPageDimensions: fn(
            self: *const IXpsOMPage,
            pageDimensions: ?*const XPS_SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContentBox: fn(
            self: *const IXpsOMPage,
            contentBox: ?*XPS_RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContentBox: fn(
            self: *const IXpsOMPage,
            contentBox: ?*const XPS_RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBleedBox: fn(
            self: *const IXpsOMPage,
            bleedBox: ?*XPS_RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBleedBox: fn(
            self: *const IXpsOMPage,
            bleedBox: ?*const XPS_RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLanguage: fn(
            self: *const IXpsOMPage,
            language: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLanguage: fn(
            self: *const IXpsOMPage,
            language: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: fn(
            self: *const IXpsOMPage,
            name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetName: fn(
            self: *const IXpsOMPage,
            name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIsHyperlinkTarget: fn(
            self: *const IXpsOMPage,
            isHyperlinkTarget: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIsHyperlinkTarget: fn(
            self: *const IXpsOMPage,
            isHyperlinkTarget: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDictionary: fn(
            self: *const IXpsOMPage,
            resourceDictionary: ?*?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDictionaryLocal: fn(
            self: *const IXpsOMPage,
            resourceDictionary: ?*?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDictionaryLocal: fn(
            self: *const IXpsOMPage,
            resourceDictionary: ?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDictionaryResource: fn(
            self: *const IXpsOMPage,
            remoteDictionaryResource: ?*?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDictionaryResource: fn(
            self: *const IXpsOMPage,
            remoteDictionaryResource: ?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Write: fn(
            self: *const IXpsOMPage,
            stream: ?*ISequentialStream,
            optimizeMarkupSize: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateUnusedLookupKey: fn(
            self: *const IXpsOMPage,
            type: XPS_OBJECT_TYPE,
            key: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IXpsOMPage,
            page: ?*?*IXpsOMPage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMPart.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_GetOwner(self: *const T, pageReference: ?*?*IXpsOMPageReference) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).GetOwner(@ptrCast(*const IXpsOMPage, self), pageReference);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_GetVisuals(self: *const T, visuals: ?*?*IXpsOMVisualCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).GetVisuals(@ptrCast(*const IXpsOMPage, self), visuals);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_GetPageDimensions(self: *const T, pageDimensions: ?*XPS_SIZE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).GetPageDimensions(@ptrCast(*const IXpsOMPage, self), pageDimensions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_SetPageDimensions(self: *const T, pageDimensions: ?*const XPS_SIZE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).SetPageDimensions(@ptrCast(*const IXpsOMPage, self), pageDimensions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_GetContentBox(self: *const T, contentBox: ?*XPS_RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).GetContentBox(@ptrCast(*const IXpsOMPage, self), contentBox);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_SetContentBox(self: *const T, contentBox: ?*const XPS_RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).SetContentBox(@ptrCast(*const IXpsOMPage, self), contentBox);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_GetBleedBox(self: *const T, bleedBox: ?*XPS_RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).GetBleedBox(@ptrCast(*const IXpsOMPage, self), bleedBox);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_SetBleedBox(self: *const T, bleedBox: ?*const XPS_RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).SetBleedBox(@ptrCast(*const IXpsOMPage, self), bleedBox);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_GetLanguage(self: *const T, language: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).GetLanguage(@ptrCast(*const IXpsOMPage, self), language);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_SetLanguage(self: *const T, language: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).SetLanguage(@ptrCast(*const IXpsOMPage, self), language);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_GetName(self: *const T, name: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).GetName(@ptrCast(*const IXpsOMPage, self), name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_SetName(self: *const T, name: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).SetName(@ptrCast(*const IXpsOMPage, self), name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_GetIsHyperlinkTarget(self: *const T, isHyperlinkTarget: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).GetIsHyperlinkTarget(@ptrCast(*const IXpsOMPage, self), isHyperlinkTarget);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_SetIsHyperlinkTarget(self: *const T, isHyperlinkTarget: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).SetIsHyperlinkTarget(@ptrCast(*const IXpsOMPage, self), isHyperlinkTarget);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_GetDictionary(self: *const T, resourceDictionary: ?*?*IXpsOMDictionary) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).GetDictionary(@ptrCast(*const IXpsOMPage, self), resourceDictionary);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_GetDictionaryLocal(self: *const T, resourceDictionary: ?*?*IXpsOMDictionary) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).GetDictionaryLocal(@ptrCast(*const IXpsOMPage, self), resourceDictionary);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_SetDictionaryLocal(self: *const T, resourceDictionary: ?*IXpsOMDictionary) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).SetDictionaryLocal(@ptrCast(*const IXpsOMPage, self), resourceDictionary);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_GetDictionaryResource(self: *const T, remoteDictionaryResource: ?*?*IXpsOMRemoteDictionaryResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).GetDictionaryResource(@ptrCast(*const IXpsOMPage, self), remoteDictionaryResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_SetDictionaryResource(self: *const T, remoteDictionaryResource: ?*IXpsOMRemoteDictionaryResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).SetDictionaryResource(@ptrCast(*const IXpsOMPage, self), remoteDictionaryResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_Write(self: *const T, stream: ?*ISequentialStream, optimizeMarkupSize: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).Write(@ptrCast(*const IXpsOMPage, self), stream, optimizeMarkupSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_GenerateUnusedLookupKey(self: *const T, type_: XPS_OBJECT_TYPE, key: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).GenerateUnusedLookupKey(@ptrCast(*const IXpsOMPage, self), type_, key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage_Clone(self: *const T, page: ?*?*IXpsOMPage) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage.VTable, self.vtable).Clone(@ptrCast(*const IXpsOMPage, self), page);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPageReference_Value = @import("../zig.zig").Guid.initString("ed360180-6f92-4998-890d-2f208531a0a0");
pub const IID_IXpsOMPageReference = &IID_IXpsOMPageReference_Value;
pub const IXpsOMPageReference = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOwner: fn(
            self: *const IXpsOMPageReference,
            document: ?*?*IXpsOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPage: fn(
            self: *const IXpsOMPageReference,
            page: ?*?*IXpsOMPage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPage: fn(
            self: *const IXpsOMPageReference,
            page: ?*IXpsOMPage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DiscardPage: fn(
            self: *const IXpsOMPageReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPageLoaded: fn(
            self: *const IXpsOMPageReference,
            isPageLoaded: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAdvisoryPageDimensions: fn(
            self: *const IXpsOMPageReference,
            pageDimensions: ?*XPS_SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAdvisoryPageDimensions: fn(
            self: *const IXpsOMPageReference,
            pageDimensions: ?*const XPS_SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStoryFragmentsResource: fn(
            self: *const IXpsOMPageReference,
            storyFragmentsResource: ?*?*IXpsOMStoryFragmentsResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStoryFragmentsResource: fn(
            self: *const IXpsOMPageReference,
            storyFragmentsResource: ?*IXpsOMStoryFragmentsResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrintTicketResource: fn(
            self: *const IXpsOMPageReference,
            printTicketResource: ?*?*IXpsOMPrintTicketResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrintTicketResource: fn(
            self: *const IXpsOMPageReference,
            printTicketResource: ?*IXpsOMPrintTicketResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetThumbnailResource: fn(
            self: *const IXpsOMPageReference,
            imageResource: ?*?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThumbnailResource: fn(
            self: *const IXpsOMPageReference,
            imageResource: ?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CollectLinkTargets: fn(
            self: *const IXpsOMPageReference,
            linkTargets: ?*?*IXpsOMNameCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CollectPartResources: fn(
            self: *const IXpsOMPageReference,
            partResources: ?*?*IXpsOMPartResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasRestrictedFonts: fn(
            self: *const IXpsOMPageReference,
            restrictedFonts: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IXpsOMPageReference,
            pageReference: ?*?*IXpsOMPageReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReference_GetOwner(self: *const T, document: ?*?*IXpsOMDocument) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReference.VTable, self.vtable).GetOwner(@ptrCast(*const IXpsOMPageReference, self), document);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReference_GetPage(self: *const T, page: ?*?*IXpsOMPage) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReference.VTable, self.vtable).GetPage(@ptrCast(*const IXpsOMPageReference, self), page);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReference_SetPage(self: *const T, page: ?*IXpsOMPage) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReference.VTable, self.vtable).SetPage(@ptrCast(*const IXpsOMPageReference, self), page);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReference_DiscardPage(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReference.VTable, self.vtable).DiscardPage(@ptrCast(*const IXpsOMPageReference, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReference_IsPageLoaded(self: *const T, isPageLoaded: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReference.VTable, self.vtable).IsPageLoaded(@ptrCast(*const IXpsOMPageReference, self), isPageLoaded);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReference_GetAdvisoryPageDimensions(self: *const T, pageDimensions: ?*XPS_SIZE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReference.VTable, self.vtable).GetAdvisoryPageDimensions(@ptrCast(*const IXpsOMPageReference, self), pageDimensions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReference_SetAdvisoryPageDimensions(self: *const T, pageDimensions: ?*const XPS_SIZE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReference.VTable, self.vtable).SetAdvisoryPageDimensions(@ptrCast(*const IXpsOMPageReference, self), pageDimensions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReference_GetStoryFragmentsResource(self: *const T, storyFragmentsResource: ?*?*IXpsOMStoryFragmentsResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReference.VTable, self.vtable).GetStoryFragmentsResource(@ptrCast(*const IXpsOMPageReference, self), storyFragmentsResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReference_SetStoryFragmentsResource(self: *const T, storyFragmentsResource: ?*IXpsOMStoryFragmentsResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReference.VTable, self.vtable).SetStoryFragmentsResource(@ptrCast(*const IXpsOMPageReference, self), storyFragmentsResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReference_GetPrintTicketResource(self: *const T, printTicketResource: ?*?*IXpsOMPrintTicketResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReference.VTable, self.vtable).GetPrintTicketResource(@ptrCast(*const IXpsOMPageReference, self), printTicketResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReference_SetPrintTicketResource(self: *const T, printTicketResource: ?*IXpsOMPrintTicketResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReference.VTable, self.vtable).SetPrintTicketResource(@ptrCast(*const IXpsOMPageReference, self), printTicketResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReference_GetThumbnailResource(self: *const T, imageResource: ?*?*IXpsOMImageResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReference.VTable, self.vtable).GetThumbnailResource(@ptrCast(*const IXpsOMPageReference, self), imageResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReference_SetThumbnailResource(self: *const T, imageResource: ?*IXpsOMImageResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReference.VTable, self.vtable).SetThumbnailResource(@ptrCast(*const IXpsOMPageReference, self), imageResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReference_CollectLinkTargets(self: *const T, linkTargets: ?*?*IXpsOMNameCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReference.VTable, self.vtable).CollectLinkTargets(@ptrCast(*const IXpsOMPageReference, self), linkTargets);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReference_CollectPartResources(self: *const T, partResources: ?*?*IXpsOMPartResources) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReference.VTable, self.vtable).CollectPartResources(@ptrCast(*const IXpsOMPageReference, self), partResources);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReference_HasRestrictedFonts(self: *const T, restrictedFonts: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReference.VTable, self.vtable).HasRestrictedFonts(@ptrCast(*const IXpsOMPageReference, self), restrictedFonts);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReference_Clone(self: *const T, pageReference: ?*?*IXpsOMPageReference) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReference.VTable, self.vtable).Clone(@ptrCast(*const IXpsOMPageReference, self), pageReference);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPageReferenceCollection_Value = @import("../zig.zig").Guid.initString("ca16ba4d-e7b9-45c5-958b-f98022473745");
pub const IID_IXpsOMPageReferenceCollection = &IID_IXpsOMPageReferenceCollection_Value;
pub const IXpsOMPageReferenceCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IXpsOMPageReferenceCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IXpsOMPageReferenceCollection,
            index: u32,
            pageReference: ?*?*IXpsOMPageReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: fn(
            self: *const IXpsOMPageReferenceCollection,
            index: u32,
            pageReference: ?*IXpsOMPageReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IXpsOMPageReferenceCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: fn(
            self: *const IXpsOMPageReferenceCollection,
            index: u32,
            pageReference: ?*IXpsOMPageReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: fn(
            self: *const IXpsOMPageReferenceCollection,
            pageReference: ?*IXpsOMPageReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReferenceCollection_GetCount(self: *const T, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReferenceCollection.VTable, self.vtable).GetCount(@ptrCast(*const IXpsOMPageReferenceCollection, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReferenceCollection_GetAt(self: *const T, index: u32, pageReference: ?*?*IXpsOMPageReference) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReferenceCollection.VTable, self.vtable).GetAt(@ptrCast(*const IXpsOMPageReferenceCollection, self), index, pageReference);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReferenceCollection_InsertAt(self: *const T, index: u32, pageReference: ?*IXpsOMPageReference) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReferenceCollection.VTable, self.vtable).InsertAt(@ptrCast(*const IXpsOMPageReferenceCollection, self), index, pageReference);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReferenceCollection_RemoveAt(self: *const T, index: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReferenceCollection.VTable, self.vtable).RemoveAt(@ptrCast(*const IXpsOMPageReferenceCollection, self), index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReferenceCollection_SetAt(self: *const T, index: u32, pageReference: ?*IXpsOMPageReference) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReferenceCollection.VTable, self.vtable).SetAt(@ptrCast(*const IXpsOMPageReferenceCollection, self), index, pageReference);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPageReferenceCollection_Append(self: *const T, pageReference: ?*IXpsOMPageReference) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPageReferenceCollection.VTable, self.vtable).Append(@ptrCast(*const IXpsOMPageReferenceCollection, self), pageReference);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMDocument_Value = @import("../zig.zig").Guid.initString("2c2c94cb-ac5f-4254-8ee9-23948309d9f0");
pub const IID_IXpsOMDocument = &IID_IXpsOMDocument_Value;
pub const IXpsOMDocument = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMPart.VTable,
        GetOwner: fn(
            self: *const IXpsOMDocument,
            documentSequence: ?*?*IXpsOMDocumentSequence,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPageReferences: fn(
            self: *const IXpsOMDocument,
            pageReferences: ?*?*IXpsOMPageReferenceCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrintTicketResource: fn(
            self: *const IXpsOMDocument,
            printTicketResource: ?*?*IXpsOMPrintTicketResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrintTicketResource: fn(
            self: *const IXpsOMDocument,
            printTicketResource: ?*IXpsOMPrintTicketResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDocumentStructureResource: fn(
            self: *const IXpsOMDocument,
            documentStructureResource: ?*?*IXpsOMDocumentStructureResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDocumentStructureResource: fn(
            self: *const IXpsOMDocument,
            documentStructureResource: ?*IXpsOMDocumentStructureResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureBlockResources: fn(
            self: *const IXpsOMDocument,
            signatureBlockResources: ?*?*IXpsOMSignatureBlockResourceCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IXpsOMDocument,
            document: ?*?*IXpsOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMPart.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocument_GetOwner(self: *const T, documentSequence: ?*?*IXpsOMDocumentSequence) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocument.VTable, self.vtable).GetOwner(@ptrCast(*const IXpsOMDocument, self), documentSequence);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocument_GetPageReferences(self: *const T, pageReferences: ?*?*IXpsOMPageReferenceCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocument.VTable, self.vtable).GetPageReferences(@ptrCast(*const IXpsOMDocument, self), pageReferences);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocument_GetPrintTicketResource(self: *const T, printTicketResource: ?*?*IXpsOMPrintTicketResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocument.VTable, self.vtable).GetPrintTicketResource(@ptrCast(*const IXpsOMDocument, self), printTicketResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocument_SetPrintTicketResource(self: *const T, printTicketResource: ?*IXpsOMPrintTicketResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocument.VTable, self.vtable).SetPrintTicketResource(@ptrCast(*const IXpsOMDocument, self), printTicketResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocument_GetDocumentStructureResource(self: *const T, documentStructureResource: ?*?*IXpsOMDocumentStructureResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocument.VTable, self.vtable).GetDocumentStructureResource(@ptrCast(*const IXpsOMDocument, self), documentStructureResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocument_SetDocumentStructureResource(self: *const T, documentStructureResource: ?*IXpsOMDocumentStructureResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocument.VTable, self.vtable).SetDocumentStructureResource(@ptrCast(*const IXpsOMDocument, self), documentStructureResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocument_GetSignatureBlockResources(self: *const T, signatureBlockResources: ?*?*IXpsOMSignatureBlockResourceCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocument.VTable, self.vtable).GetSignatureBlockResources(@ptrCast(*const IXpsOMDocument, self), signatureBlockResources);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocument_Clone(self: *const T, document: ?*?*IXpsOMDocument) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocument.VTable, self.vtable).Clone(@ptrCast(*const IXpsOMDocument, self), document);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMDocumentCollection_Value = @import("../zig.zig").Guid.initString("d1c87f0d-e947-4754-8a25-971478f7e83e");
pub const IID_IXpsOMDocumentCollection = &IID_IXpsOMDocumentCollection_Value;
pub const IXpsOMDocumentCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IXpsOMDocumentCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IXpsOMDocumentCollection,
            index: u32,
            document: ?*?*IXpsOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: fn(
            self: *const IXpsOMDocumentCollection,
            index: u32,
            document: ?*IXpsOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IXpsOMDocumentCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: fn(
            self: *const IXpsOMDocumentCollection,
            index: u32,
            document: ?*IXpsOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: fn(
            self: *const IXpsOMDocumentCollection,
            document: ?*IXpsOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocumentCollection_GetCount(self: *const T, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocumentCollection.VTable, self.vtable).GetCount(@ptrCast(*const IXpsOMDocumentCollection, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocumentCollection_GetAt(self: *const T, index: u32, document: ?*?*IXpsOMDocument) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocumentCollection.VTable, self.vtable).GetAt(@ptrCast(*const IXpsOMDocumentCollection, self), index, document);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocumentCollection_InsertAt(self: *const T, index: u32, document: ?*IXpsOMDocument) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocumentCollection.VTable, self.vtable).InsertAt(@ptrCast(*const IXpsOMDocumentCollection, self), index, document);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocumentCollection_RemoveAt(self: *const T, index: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocumentCollection.VTable, self.vtable).RemoveAt(@ptrCast(*const IXpsOMDocumentCollection, self), index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocumentCollection_SetAt(self: *const T, index: u32, document: ?*IXpsOMDocument) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocumentCollection.VTable, self.vtable).SetAt(@ptrCast(*const IXpsOMDocumentCollection, self), index, document);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocumentCollection_Append(self: *const T, document: ?*IXpsOMDocument) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocumentCollection.VTable, self.vtable).Append(@ptrCast(*const IXpsOMDocumentCollection, self), document);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMDocumentSequence_Value = @import("../zig.zig").Guid.initString("56492eb4-d8d5-425e-8256-4c2b64ad0264");
pub const IID_IXpsOMDocumentSequence = &IID_IXpsOMDocumentSequence_Value;
pub const IXpsOMDocumentSequence = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMPart.VTable,
        GetOwner: fn(
            self: *const IXpsOMDocumentSequence,
            package: ?*?*IXpsOMPackage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDocuments: fn(
            self: *const IXpsOMDocumentSequence,
            documents: ?*?*IXpsOMDocumentCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrintTicketResource: fn(
            self: *const IXpsOMDocumentSequence,
            printTicketResource: ?*?*IXpsOMPrintTicketResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrintTicketResource: fn(
            self: *const IXpsOMDocumentSequence,
            printTicketResource: ?*IXpsOMPrintTicketResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMPart.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocumentSequence_GetOwner(self: *const T, package: ?*?*IXpsOMPackage) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocumentSequence.VTable, self.vtable).GetOwner(@ptrCast(*const IXpsOMDocumentSequence, self), package);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocumentSequence_GetDocuments(self: *const T, documents: ?*?*IXpsOMDocumentCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocumentSequence.VTable, self.vtable).GetDocuments(@ptrCast(*const IXpsOMDocumentSequence, self), documents);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocumentSequence_GetPrintTicketResource(self: *const T, printTicketResource: ?*?*IXpsOMPrintTicketResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocumentSequence.VTable, self.vtable).GetPrintTicketResource(@ptrCast(*const IXpsOMDocumentSequence, self), printTicketResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMDocumentSequence_SetPrintTicketResource(self: *const T, printTicketResource: ?*IXpsOMPrintTicketResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMDocumentSequence.VTable, self.vtable).SetPrintTicketResource(@ptrCast(*const IXpsOMDocumentSequence, self), printTicketResource);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMCoreProperties_Value = @import("../zig.zig").Guid.initString("3340fe8f-4027-4aa1-8f5f-d35ae45fe597");
pub const IID_IXpsOMCoreProperties = &IID_IXpsOMCoreProperties_Value;
pub const IXpsOMCoreProperties = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMPart.VTable,
        GetOwner: fn(
            self: *const IXpsOMCoreProperties,
            package: ?*?*IXpsOMPackage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategory: fn(
            self: *const IXpsOMCoreProperties,
            category: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCategory: fn(
            self: *const IXpsOMCoreProperties,
            category: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContentStatus: fn(
            self: *const IXpsOMCoreProperties,
            contentStatus: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContentStatus: fn(
            self: *const IXpsOMCoreProperties,
            contentStatus: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContentType: fn(
            self: *const IXpsOMCoreProperties,
            contentType: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContentType: fn(
            self: *const IXpsOMCoreProperties,
            contentType: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCreated: fn(
            self: *const IXpsOMCoreProperties,
            created: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCreated: fn(
            self: *const IXpsOMCoreProperties,
            created: ?*const SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCreator: fn(
            self: *const IXpsOMCoreProperties,
            creator: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCreator: fn(
            self: *const IXpsOMCoreProperties,
            creator: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: fn(
            self: *const IXpsOMCoreProperties,
            description: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDescription: fn(
            self: *const IXpsOMCoreProperties,
            description: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIdentifier: fn(
            self: *const IXpsOMCoreProperties,
            identifier: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIdentifier: fn(
            self: *const IXpsOMCoreProperties,
            identifier: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeywords: fn(
            self: *const IXpsOMCoreProperties,
            keywords: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetKeywords: fn(
            self: *const IXpsOMCoreProperties,
            keywords: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLanguage: fn(
            self: *const IXpsOMCoreProperties,
            language: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLanguage: fn(
            self: *const IXpsOMCoreProperties,
            language: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastModifiedBy: fn(
            self: *const IXpsOMCoreProperties,
            lastModifiedBy: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLastModifiedBy: fn(
            self: *const IXpsOMCoreProperties,
            lastModifiedBy: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastPrinted: fn(
            self: *const IXpsOMCoreProperties,
            lastPrinted: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLastPrinted: fn(
            self: *const IXpsOMCoreProperties,
            lastPrinted: ?*const SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetModified: fn(
            self: *const IXpsOMCoreProperties,
            modified: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetModified: fn(
            self: *const IXpsOMCoreProperties,
            modified: ?*const SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRevision: fn(
            self: *const IXpsOMCoreProperties,
            revision: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRevision: fn(
            self: *const IXpsOMCoreProperties,
            revision: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubject: fn(
            self: *const IXpsOMCoreProperties,
            subject: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSubject: fn(
            self: *const IXpsOMCoreProperties,
            subject: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTitle: fn(
            self: *const IXpsOMCoreProperties,
            title: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTitle: fn(
            self: *const IXpsOMCoreProperties,
            title: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVersion: fn(
            self: *const IXpsOMCoreProperties,
            version: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVersion: fn(
            self: *const IXpsOMCoreProperties,
            version: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IXpsOMCoreProperties,
            coreProperties: ?*?*IXpsOMCoreProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMPart.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_GetOwner(self: *const T, package: ?*?*IXpsOMPackage) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).GetOwner(@ptrCast(*const IXpsOMCoreProperties, self), package);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_GetCategory(self: *const T, category: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).GetCategory(@ptrCast(*const IXpsOMCoreProperties, self), category);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_SetCategory(self: *const T, category: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).SetCategory(@ptrCast(*const IXpsOMCoreProperties, self), category);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_GetContentStatus(self: *const T, contentStatus: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).GetContentStatus(@ptrCast(*const IXpsOMCoreProperties, self), contentStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_SetContentStatus(self: *const T, contentStatus: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).SetContentStatus(@ptrCast(*const IXpsOMCoreProperties, self), contentStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_GetContentType(self: *const T, contentType: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).GetContentType(@ptrCast(*const IXpsOMCoreProperties, self), contentType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_SetContentType(self: *const T, contentType: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).SetContentType(@ptrCast(*const IXpsOMCoreProperties, self), contentType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_GetCreated(self: *const T, created: ?*SYSTEMTIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).GetCreated(@ptrCast(*const IXpsOMCoreProperties, self), created);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_SetCreated(self: *const T, created: ?*const SYSTEMTIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).SetCreated(@ptrCast(*const IXpsOMCoreProperties, self), created);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_GetCreator(self: *const T, creator: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).GetCreator(@ptrCast(*const IXpsOMCoreProperties, self), creator);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_SetCreator(self: *const T, creator: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).SetCreator(@ptrCast(*const IXpsOMCoreProperties, self), creator);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_GetDescription(self: *const T, description: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).GetDescription(@ptrCast(*const IXpsOMCoreProperties, self), description);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_SetDescription(self: *const T, description: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).SetDescription(@ptrCast(*const IXpsOMCoreProperties, self), description);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_GetIdentifier(self: *const T, identifier: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).GetIdentifier(@ptrCast(*const IXpsOMCoreProperties, self), identifier);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_SetIdentifier(self: *const T, identifier: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).SetIdentifier(@ptrCast(*const IXpsOMCoreProperties, self), identifier);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_GetKeywords(self: *const T, keywords: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).GetKeywords(@ptrCast(*const IXpsOMCoreProperties, self), keywords);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_SetKeywords(self: *const T, keywords: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).SetKeywords(@ptrCast(*const IXpsOMCoreProperties, self), keywords);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_GetLanguage(self: *const T, language: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).GetLanguage(@ptrCast(*const IXpsOMCoreProperties, self), language);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_SetLanguage(self: *const T, language: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).SetLanguage(@ptrCast(*const IXpsOMCoreProperties, self), language);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_GetLastModifiedBy(self: *const T, lastModifiedBy: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).GetLastModifiedBy(@ptrCast(*const IXpsOMCoreProperties, self), lastModifiedBy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_SetLastModifiedBy(self: *const T, lastModifiedBy: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).SetLastModifiedBy(@ptrCast(*const IXpsOMCoreProperties, self), lastModifiedBy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_GetLastPrinted(self: *const T, lastPrinted: ?*SYSTEMTIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).GetLastPrinted(@ptrCast(*const IXpsOMCoreProperties, self), lastPrinted);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_SetLastPrinted(self: *const T, lastPrinted: ?*const SYSTEMTIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).SetLastPrinted(@ptrCast(*const IXpsOMCoreProperties, self), lastPrinted);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_GetModified(self: *const T, modified: ?*SYSTEMTIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).GetModified(@ptrCast(*const IXpsOMCoreProperties, self), modified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_SetModified(self: *const T, modified: ?*const SYSTEMTIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).SetModified(@ptrCast(*const IXpsOMCoreProperties, self), modified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_GetRevision(self: *const T, revision: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).GetRevision(@ptrCast(*const IXpsOMCoreProperties, self), revision);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_SetRevision(self: *const T, revision: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).SetRevision(@ptrCast(*const IXpsOMCoreProperties, self), revision);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_GetSubject(self: *const T, subject: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).GetSubject(@ptrCast(*const IXpsOMCoreProperties, self), subject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_SetSubject(self: *const T, subject: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).SetSubject(@ptrCast(*const IXpsOMCoreProperties, self), subject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_GetTitle(self: *const T, title: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).GetTitle(@ptrCast(*const IXpsOMCoreProperties, self), title);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_SetTitle(self: *const T, title: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).SetTitle(@ptrCast(*const IXpsOMCoreProperties, self), title);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_GetVersion(self: *const T, version: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).GetVersion(@ptrCast(*const IXpsOMCoreProperties, self), version);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_SetVersion(self: *const T, version: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).SetVersion(@ptrCast(*const IXpsOMCoreProperties, self), version);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMCoreProperties_Clone(self: *const T, coreProperties: ?*?*IXpsOMCoreProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMCoreProperties.VTable, self.vtable).Clone(@ptrCast(*const IXpsOMCoreProperties, self), coreProperties);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPackage_Value = @import("../zig.zig").Guid.initString("18c3df65-81e1-4674-91dc-fc452f5a416f");
pub const IID_IXpsOMPackage = &IID_IXpsOMPackage_Value;
pub const IXpsOMPackage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDocumentSequence: fn(
            self: *const IXpsOMPackage,
            documentSequence: ?*?*IXpsOMDocumentSequence,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDocumentSequence: fn(
            self: *const IXpsOMPackage,
            documentSequence: ?*IXpsOMDocumentSequence,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCoreProperties: fn(
            self: *const IXpsOMPackage,
            coreProperties: ?*?*IXpsOMCoreProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCoreProperties: fn(
            self: *const IXpsOMPackage,
            coreProperties: ?*IXpsOMCoreProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDiscardControlPartName: fn(
            self: *const IXpsOMPackage,
            discardControlPartUri: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDiscardControlPartName: fn(
            self: *const IXpsOMPackage,
            discardControlPartUri: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetThumbnailResource: fn(
            self: *const IXpsOMPackage,
            imageResource: ?*?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThumbnailResource: fn(
            self: *const IXpsOMPackage,
            imageResource: ?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteToFile: fn(
            self: *const IXpsOMPackage,
            fileName: ?[*:0]const u16,
            securityAttributes: ?*SECURITY_ATTRIBUTES,
            flagsAndAttributes: u32,
            optimizeMarkupSize: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteToStream: fn(
            self: *const IXpsOMPackage,
            stream: ?*ISequentialStream,
            optimizeMarkupSize: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackage_GetDocumentSequence(self: *const T, documentSequence: ?*?*IXpsOMDocumentSequence) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackage.VTable, self.vtable).GetDocumentSequence(@ptrCast(*const IXpsOMPackage, self), documentSequence);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackage_SetDocumentSequence(self: *const T, documentSequence: ?*IXpsOMDocumentSequence) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackage.VTable, self.vtable).SetDocumentSequence(@ptrCast(*const IXpsOMPackage, self), documentSequence);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackage_GetCoreProperties(self: *const T, coreProperties: ?*?*IXpsOMCoreProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackage.VTable, self.vtable).GetCoreProperties(@ptrCast(*const IXpsOMPackage, self), coreProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackage_SetCoreProperties(self: *const T, coreProperties: ?*IXpsOMCoreProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackage.VTable, self.vtable).SetCoreProperties(@ptrCast(*const IXpsOMPackage, self), coreProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackage_GetDiscardControlPartName(self: *const T, discardControlPartUri: ?*?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackage.VTable, self.vtable).GetDiscardControlPartName(@ptrCast(*const IXpsOMPackage, self), discardControlPartUri);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackage_SetDiscardControlPartName(self: *const T, discardControlPartUri: ?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackage.VTable, self.vtable).SetDiscardControlPartName(@ptrCast(*const IXpsOMPackage, self), discardControlPartUri);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackage_GetThumbnailResource(self: *const T, imageResource: ?*?*IXpsOMImageResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackage.VTable, self.vtable).GetThumbnailResource(@ptrCast(*const IXpsOMPackage, self), imageResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackage_SetThumbnailResource(self: *const T, imageResource: ?*IXpsOMImageResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackage.VTable, self.vtable).SetThumbnailResource(@ptrCast(*const IXpsOMPackage, self), imageResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackage_WriteToFile(self: *const T, fileName: ?[*:0]const u16, securityAttributes: ?*SECURITY_ATTRIBUTES, flagsAndAttributes: u32, optimizeMarkupSize: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackage.VTable, self.vtable).WriteToFile(@ptrCast(*const IXpsOMPackage, self), fileName, securityAttributes, flagsAndAttributes, optimizeMarkupSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackage_WriteToStream(self: *const T, stream: ?*ISequentialStream, optimizeMarkupSize: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackage.VTable, self.vtable).WriteToStream(@ptrCast(*const IXpsOMPackage, self), stream, optimizeMarkupSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMObjectFactory_Value = @import("../zig.zig").Guid.initString("f9b2a685-a50d-4fc2-b764-b56e093ea0ca");
pub const IID_IXpsOMObjectFactory = &IID_IXpsOMObjectFactory_Value;
pub const IXpsOMObjectFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreatePackage: fn(
            self: *const IXpsOMObjectFactory,
            package: ?*?*IXpsOMPackage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePackageFromFile: fn(
            self: *const IXpsOMObjectFactory,
            filename: ?[*:0]const u16,
            reuseObjects: BOOL,
            package: ?*?*IXpsOMPackage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePackageFromStream: fn(
            self: *const IXpsOMObjectFactory,
            stream: ?*IStream,
            reuseObjects: BOOL,
            package: ?*?*IXpsOMPackage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStoryFragmentsResource: fn(
            self: *const IXpsOMObjectFactory,
            acquiredStream: ?*IStream,
            partUri: ?*IOpcPartUri,
            storyFragmentsResource: ?*?*IXpsOMStoryFragmentsResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDocumentStructureResource: fn(
            self: *const IXpsOMObjectFactory,
            acquiredStream: ?*IStream,
            partUri: ?*IOpcPartUri,
            documentStructureResource: ?*?*IXpsOMDocumentStructureResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSignatureBlockResource: fn(
            self: *const IXpsOMObjectFactory,
            acquiredStream: ?*IStream,
            partUri: ?*IOpcPartUri,
            signatureBlockResource: ?*?*IXpsOMSignatureBlockResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRemoteDictionaryResource: fn(
            self: *const IXpsOMObjectFactory,
            dictionary: ?*IXpsOMDictionary,
            partUri: ?*IOpcPartUri,
            remoteDictionaryResource: ?*?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRemoteDictionaryResourceFromStream: fn(
            self: *const IXpsOMObjectFactory,
            dictionaryMarkupStream: ?*IStream,
            dictionaryPartUri: ?*IOpcPartUri,
            resources: ?*IXpsOMPartResources,
            dictionaryResource: ?*?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePartResources: fn(
            self: *const IXpsOMObjectFactory,
            partResources: ?*?*IXpsOMPartResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDocumentSequence: fn(
            self: *const IXpsOMObjectFactory,
            partUri: ?*IOpcPartUri,
            documentSequence: ?*?*IXpsOMDocumentSequence,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDocument: fn(
            self: *const IXpsOMObjectFactory,
            partUri: ?*IOpcPartUri,
            document: ?*?*IXpsOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePageReference: fn(
            self: *const IXpsOMObjectFactory,
            advisoryPageDimensions: ?*const XPS_SIZE,
            pageReference: ?*?*IXpsOMPageReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePage: fn(
            self: *const IXpsOMObjectFactory,
            pageDimensions: ?*const XPS_SIZE,
            language: ?[*:0]const u16,
            partUri: ?*IOpcPartUri,
            page: ?*?*IXpsOMPage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePageFromStream: fn(
            self: *const IXpsOMObjectFactory,
            pageMarkupStream: ?*IStream,
            partUri: ?*IOpcPartUri,
            resources: ?*IXpsOMPartResources,
            reuseObjects: BOOL,
            page: ?*?*IXpsOMPage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCanvas: fn(
            self: *const IXpsOMObjectFactory,
            canvas: ?*?*IXpsOMCanvas,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGlyphs: fn(
            self: *const IXpsOMObjectFactory,
            fontResource: ?*IXpsOMFontResource,
            glyphs: ?*?*IXpsOMGlyphs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePath: fn(
            self: *const IXpsOMObjectFactory,
            path: ?*?*IXpsOMPath,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGeometry: fn(
            self: *const IXpsOMObjectFactory,
            geometry: ?*?*IXpsOMGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGeometryFigure: fn(
            self: *const IXpsOMObjectFactory,
            startPoint: ?*const XPS_POINT,
            figure: ?*?*IXpsOMGeometryFigure,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMatrixTransform: fn(
            self: *const IXpsOMObjectFactory,
            matrix: ?*const XPS_MATRIX,
            transform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSolidColorBrush: fn(
            self: *const IXpsOMObjectFactory,
            color: ?*const XPS_COLOR,
            colorProfile: ?*IXpsOMColorProfileResource,
            solidColorBrush: ?*?*IXpsOMSolidColorBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateColorProfileResource: fn(
            self: *const IXpsOMObjectFactory,
            acquiredStream: ?*IStream,
            partUri: ?*IOpcPartUri,
            colorProfileResource: ?*?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateImageBrush: fn(
            self: *const IXpsOMObjectFactory,
            image: ?*IXpsOMImageResource,
            viewBox: ?*const XPS_RECT,
            viewPort: ?*const XPS_RECT,
            imageBrush: ?*?*IXpsOMImageBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVisualBrush: fn(
            self: *const IXpsOMObjectFactory,
            viewBox: ?*const XPS_RECT,
            viewPort: ?*const XPS_RECT,
            visualBrush: ?*?*IXpsOMVisualBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateImageResource: fn(
            self: *const IXpsOMObjectFactory,
            acquiredStream: ?*IStream,
            contentType: XPS_IMAGE_TYPE,
            partUri: ?*IOpcPartUri,
            imageResource: ?*?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePrintTicketResource: fn(
            self: *const IXpsOMObjectFactory,
            acquiredStream: ?*IStream,
            partUri: ?*IOpcPartUri,
            printTicketResource: ?*?*IXpsOMPrintTicketResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontResource: fn(
            self: *const IXpsOMObjectFactory,
            acquiredStream: ?*IStream,
            fontEmbedding: XPS_FONT_EMBEDDING,
            partUri: ?*IOpcPartUri,
            isObfSourceStream: BOOL,
            fontResource: ?*?*IXpsOMFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGradientStop: fn(
            self: *const IXpsOMObjectFactory,
            color: ?*const XPS_COLOR,
            colorProfile: ?*IXpsOMColorProfileResource,
            offset: f32,
            gradientStop: ?*?*IXpsOMGradientStop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateLinearGradientBrush: fn(
            self: *const IXpsOMObjectFactory,
            gradStop1: ?*IXpsOMGradientStop,
            gradStop2: ?*IXpsOMGradientStop,
            startPoint: ?*const XPS_POINT,
            endPoint: ?*const XPS_POINT,
            linearGradientBrush: ?*?*IXpsOMLinearGradientBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRadialGradientBrush: fn(
            self: *const IXpsOMObjectFactory,
            gradStop1: ?*IXpsOMGradientStop,
            gradStop2: ?*IXpsOMGradientStop,
            centerPoint: ?*const XPS_POINT,
            gradientOrigin: ?*const XPS_POINT,
            radiiSizes: ?*const XPS_SIZE,
            radialGradientBrush: ?*?*IXpsOMRadialGradientBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCoreProperties: fn(
            self: *const IXpsOMObjectFactory,
            partUri: ?*IOpcPartUri,
            coreProperties: ?*?*IXpsOMCoreProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDictionary: fn(
            self: *const IXpsOMObjectFactory,
            dictionary: ?*?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePartUriCollection: fn(
            self: *const IXpsOMObjectFactory,
            partUriCollection: ?*?*IXpsOMPartUriCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePackageWriterOnFile: fn(
            self: *const IXpsOMObjectFactory,
            fileName: ?[*:0]const u16,
            securityAttributes: ?*SECURITY_ATTRIBUTES,
            flagsAndAttributes: u32,
            optimizeMarkupSize: BOOL,
            interleaving: XPS_INTERLEAVING,
            documentSequencePartName: ?*IOpcPartUri,
            coreProperties: ?*IXpsOMCoreProperties,
            packageThumbnail: ?*IXpsOMImageResource,
            documentSequencePrintTicket: ?*IXpsOMPrintTicketResource,
            discardControlPartName: ?*IOpcPartUri,
            packageWriter: ?*?*IXpsOMPackageWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePackageWriterOnStream: fn(
            self: *const IXpsOMObjectFactory,
            outputStream: ?*ISequentialStream,
            optimizeMarkupSize: BOOL,
            interleaving: XPS_INTERLEAVING,
            documentSequencePartName: ?*IOpcPartUri,
            coreProperties: ?*IXpsOMCoreProperties,
            packageThumbnail: ?*IXpsOMImageResource,
            documentSequencePrintTicket: ?*IXpsOMPrintTicketResource,
            discardControlPartName: ?*IOpcPartUri,
            packageWriter: ?*?*IXpsOMPackageWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePartUri: fn(
            self: *const IXpsOMObjectFactory,
            uri: ?[*:0]const u16,
            partUri: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateReadOnlyStreamOnFile: fn(
            self: *const IXpsOMObjectFactory,
            filename: ?[*:0]const u16,
            stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreatePackage(self: *const T, package: ?*?*IXpsOMPackage) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreatePackage(@ptrCast(*const IXpsOMObjectFactory, self), package);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreatePackageFromFile(self: *const T, filename: ?[*:0]const u16, reuseObjects: BOOL, package: ?*?*IXpsOMPackage) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreatePackageFromFile(@ptrCast(*const IXpsOMObjectFactory, self), filename, reuseObjects, package);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreatePackageFromStream(self: *const T, stream: ?*IStream, reuseObjects: BOOL, package: ?*?*IXpsOMPackage) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreatePackageFromStream(@ptrCast(*const IXpsOMObjectFactory, self), stream, reuseObjects, package);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateStoryFragmentsResource(self: *const T, acquiredStream: ?*IStream, partUri: ?*IOpcPartUri, storyFragmentsResource: ?*?*IXpsOMStoryFragmentsResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateStoryFragmentsResource(@ptrCast(*const IXpsOMObjectFactory, self), acquiredStream, partUri, storyFragmentsResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateDocumentStructureResource(self: *const T, acquiredStream: ?*IStream, partUri: ?*IOpcPartUri, documentStructureResource: ?*?*IXpsOMDocumentStructureResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateDocumentStructureResource(@ptrCast(*const IXpsOMObjectFactory, self), acquiredStream, partUri, documentStructureResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateSignatureBlockResource(self: *const T, acquiredStream: ?*IStream, partUri: ?*IOpcPartUri, signatureBlockResource: ?*?*IXpsOMSignatureBlockResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateSignatureBlockResource(@ptrCast(*const IXpsOMObjectFactory, self), acquiredStream, partUri, signatureBlockResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateRemoteDictionaryResource(self: *const T, dictionary: ?*IXpsOMDictionary, partUri: ?*IOpcPartUri, remoteDictionaryResource: ?*?*IXpsOMRemoteDictionaryResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateRemoteDictionaryResource(@ptrCast(*const IXpsOMObjectFactory, self), dictionary, partUri, remoteDictionaryResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateRemoteDictionaryResourceFromStream(self: *const T, dictionaryMarkupStream: ?*IStream, dictionaryPartUri: ?*IOpcPartUri, resources: ?*IXpsOMPartResources, dictionaryResource: ?*?*IXpsOMRemoteDictionaryResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateRemoteDictionaryResourceFromStream(@ptrCast(*const IXpsOMObjectFactory, self), dictionaryMarkupStream, dictionaryPartUri, resources, dictionaryResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreatePartResources(self: *const T, partResources: ?*?*IXpsOMPartResources) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreatePartResources(@ptrCast(*const IXpsOMObjectFactory, self), partResources);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateDocumentSequence(self: *const T, partUri: ?*IOpcPartUri, documentSequence: ?*?*IXpsOMDocumentSequence) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateDocumentSequence(@ptrCast(*const IXpsOMObjectFactory, self), partUri, documentSequence);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateDocument(self: *const T, partUri: ?*IOpcPartUri, document: ?*?*IXpsOMDocument) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateDocument(@ptrCast(*const IXpsOMObjectFactory, self), partUri, document);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreatePageReference(self: *const T, advisoryPageDimensions: ?*const XPS_SIZE, pageReference: ?*?*IXpsOMPageReference) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreatePageReference(@ptrCast(*const IXpsOMObjectFactory, self), advisoryPageDimensions, pageReference);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreatePage(self: *const T, pageDimensions: ?*const XPS_SIZE, language: ?[*:0]const u16, partUri: ?*IOpcPartUri, page: ?*?*IXpsOMPage) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreatePage(@ptrCast(*const IXpsOMObjectFactory, self), pageDimensions, language, partUri, page);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreatePageFromStream(self: *const T, pageMarkupStream: ?*IStream, partUri: ?*IOpcPartUri, resources: ?*IXpsOMPartResources, reuseObjects: BOOL, page: ?*?*IXpsOMPage) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreatePageFromStream(@ptrCast(*const IXpsOMObjectFactory, self), pageMarkupStream, partUri, resources, reuseObjects, page);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateCanvas(self: *const T, canvas: ?*?*IXpsOMCanvas) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateCanvas(@ptrCast(*const IXpsOMObjectFactory, self), canvas);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateGlyphs(self: *const T, fontResource: ?*IXpsOMFontResource, glyphs: ?*?*IXpsOMGlyphs) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateGlyphs(@ptrCast(*const IXpsOMObjectFactory, self), fontResource, glyphs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreatePath(self: *const T, path: ?*?*IXpsOMPath) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreatePath(@ptrCast(*const IXpsOMObjectFactory, self), path);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateGeometry(self: *const T, geometry: ?*?*IXpsOMGeometry) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateGeometry(@ptrCast(*const IXpsOMObjectFactory, self), geometry);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateGeometryFigure(self: *const T, startPoint: ?*const XPS_POINT, figure: ?*?*IXpsOMGeometryFigure) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateGeometryFigure(@ptrCast(*const IXpsOMObjectFactory, self), startPoint, figure);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateMatrixTransform(self: *const T, matrix: ?*const XPS_MATRIX, transform: ?*?*IXpsOMMatrixTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateMatrixTransform(@ptrCast(*const IXpsOMObjectFactory, self), matrix, transform);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateSolidColorBrush(self: *const T, color: ?*const XPS_COLOR, colorProfile: ?*IXpsOMColorProfileResource, solidColorBrush: ?*?*IXpsOMSolidColorBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateSolidColorBrush(@ptrCast(*const IXpsOMObjectFactory, self), color, colorProfile, solidColorBrush);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateColorProfileResource(self: *const T, acquiredStream: ?*IStream, partUri: ?*IOpcPartUri, colorProfileResource: ?*?*IXpsOMColorProfileResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateColorProfileResource(@ptrCast(*const IXpsOMObjectFactory, self), acquiredStream, partUri, colorProfileResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateImageBrush(self: *const T, image: ?*IXpsOMImageResource, viewBox: ?*const XPS_RECT, viewPort: ?*const XPS_RECT, imageBrush: ?*?*IXpsOMImageBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateImageBrush(@ptrCast(*const IXpsOMObjectFactory, self), image, viewBox, viewPort, imageBrush);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateVisualBrush(self: *const T, viewBox: ?*const XPS_RECT, viewPort: ?*const XPS_RECT, visualBrush: ?*?*IXpsOMVisualBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateVisualBrush(@ptrCast(*const IXpsOMObjectFactory, self), viewBox, viewPort, visualBrush);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateImageResource(self: *const T, acquiredStream: ?*IStream, contentType: XPS_IMAGE_TYPE, partUri: ?*IOpcPartUri, imageResource: ?*?*IXpsOMImageResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateImageResource(@ptrCast(*const IXpsOMObjectFactory, self), acquiredStream, contentType, partUri, imageResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreatePrintTicketResource(self: *const T, acquiredStream: ?*IStream, partUri: ?*IOpcPartUri, printTicketResource: ?*?*IXpsOMPrintTicketResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreatePrintTicketResource(@ptrCast(*const IXpsOMObjectFactory, self), acquiredStream, partUri, printTicketResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateFontResource(self: *const T, acquiredStream: ?*IStream, fontEmbedding: XPS_FONT_EMBEDDING, partUri: ?*IOpcPartUri, isObfSourceStream: BOOL, fontResource: ?*?*IXpsOMFontResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateFontResource(@ptrCast(*const IXpsOMObjectFactory, self), acquiredStream, fontEmbedding, partUri, isObfSourceStream, fontResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateGradientStop(self: *const T, color: ?*const XPS_COLOR, colorProfile: ?*IXpsOMColorProfileResource, offset: f32, gradientStop: ?*?*IXpsOMGradientStop) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateGradientStop(@ptrCast(*const IXpsOMObjectFactory, self), color, colorProfile, offset, gradientStop);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateLinearGradientBrush(self: *const T, gradStop1: ?*IXpsOMGradientStop, gradStop2: ?*IXpsOMGradientStop, startPoint: ?*const XPS_POINT, endPoint: ?*const XPS_POINT, linearGradientBrush: ?*?*IXpsOMLinearGradientBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateLinearGradientBrush(@ptrCast(*const IXpsOMObjectFactory, self), gradStop1, gradStop2, startPoint, endPoint, linearGradientBrush);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateRadialGradientBrush(self: *const T, gradStop1: ?*IXpsOMGradientStop, gradStop2: ?*IXpsOMGradientStop, centerPoint: ?*const XPS_POINT, gradientOrigin: ?*const XPS_POINT, radiiSizes: ?*const XPS_SIZE, radialGradientBrush: ?*?*IXpsOMRadialGradientBrush) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateRadialGradientBrush(@ptrCast(*const IXpsOMObjectFactory, self), gradStop1, gradStop2, centerPoint, gradientOrigin, radiiSizes, radialGradientBrush);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateCoreProperties(self: *const T, partUri: ?*IOpcPartUri, coreProperties: ?*?*IXpsOMCoreProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateCoreProperties(@ptrCast(*const IXpsOMObjectFactory, self), partUri, coreProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateDictionary(self: *const T, dictionary: ?*?*IXpsOMDictionary) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateDictionary(@ptrCast(*const IXpsOMObjectFactory, self), dictionary);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreatePartUriCollection(self: *const T, partUriCollection: ?*?*IXpsOMPartUriCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreatePartUriCollection(@ptrCast(*const IXpsOMObjectFactory, self), partUriCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreatePackageWriterOnFile(self: *const T, fileName: ?[*:0]const u16, securityAttributes: ?*SECURITY_ATTRIBUTES, flagsAndAttributes: u32, optimizeMarkupSize: BOOL, interleaving: XPS_INTERLEAVING, documentSequencePartName: ?*IOpcPartUri, coreProperties: ?*IXpsOMCoreProperties, packageThumbnail: ?*IXpsOMImageResource, documentSequencePrintTicket: ?*IXpsOMPrintTicketResource, discardControlPartName: ?*IOpcPartUri, packageWriter: ?*?*IXpsOMPackageWriter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreatePackageWriterOnFile(@ptrCast(*const IXpsOMObjectFactory, self), fileName, securityAttributes, flagsAndAttributes, optimizeMarkupSize, interleaving, documentSequencePartName, coreProperties, packageThumbnail, documentSequencePrintTicket, discardControlPartName, packageWriter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreatePackageWriterOnStream(self: *const T, outputStream: ?*ISequentialStream, optimizeMarkupSize: BOOL, interleaving: XPS_INTERLEAVING, documentSequencePartName: ?*IOpcPartUri, coreProperties: ?*IXpsOMCoreProperties, packageThumbnail: ?*IXpsOMImageResource, documentSequencePrintTicket: ?*IXpsOMPrintTicketResource, discardControlPartName: ?*IOpcPartUri, packageWriter: ?*?*IXpsOMPackageWriter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreatePackageWriterOnStream(@ptrCast(*const IXpsOMObjectFactory, self), outputStream, optimizeMarkupSize, interleaving, documentSequencePartName, coreProperties, packageThumbnail, documentSequencePrintTicket, discardControlPartName, packageWriter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreatePartUri(self: *const T, uri: ?[*:0]const u16, partUri: ?*?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreatePartUri(@ptrCast(*const IXpsOMObjectFactory, self), uri, partUri);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory_CreateReadOnlyStreamOnFile(self: *const T, filename: ?[*:0]const u16, stream: ?*?*IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory.VTable, self.vtable).CreateReadOnlyStreamOnFile(@ptrCast(*const IXpsOMObjectFactory, self), filename, stream);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMNameCollection_Value = @import("../zig.zig").Guid.initString("4bddf8ec-c915-421b-a166-d173d25653d2");
pub const IID_IXpsOMNameCollection = &IID_IXpsOMNameCollection_Value;
pub const IXpsOMNameCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IXpsOMNameCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IXpsOMNameCollection,
            index: u32,
            name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMNameCollection_GetCount(self: *const T, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMNameCollection.VTable, self.vtable).GetCount(@ptrCast(*const IXpsOMNameCollection, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMNameCollection_GetAt(self: *const T, index: u32, name: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMNameCollection.VTable, self.vtable).GetAt(@ptrCast(*const IXpsOMNameCollection, self), index, name);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPartUriCollection_Value = @import("../zig.zig").Guid.initString("57c650d4-067c-4893-8c33-f62a0633730f");
pub const IID_IXpsOMPartUriCollection = &IID_IXpsOMPartUriCollection_Value;
pub const IXpsOMPartUriCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IXpsOMPartUriCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IXpsOMPartUriCollection,
            index: u32,
            partUri: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: fn(
            self: *const IXpsOMPartUriCollection,
            index: u32,
            partUri: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IXpsOMPartUriCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: fn(
            self: *const IXpsOMPartUriCollection,
            index: u32,
            partUri: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: fn(
            self: *const IXpsOMPartUriCollection,
            partUri: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPartUriCollection_GetCount(self: *const T, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPartUriCollection.VTable, self.vtable).GetCount(@ptrCast(*const IXpsOMPartUriCollection, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPartUriCollection_GetAt(self: *const T, index: u32, partUri: ?*?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPartUriCollection.VTable, self.vtable).GetAt(@ptrCast(*const IXpsOMPartUriCollection, self), index, partUri);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPartUriCollection_InsertAt(self: *const T, index: u32, partUri: ?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPartUriCollection.VTable, self.vtable).InsertAt(@ptrCast(*const IXpsOMPartUriCollection, self), index, partUri);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPartUriCollection_RemoveAt(self: *const T, index: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPartUriCollection.VTable, self.vtable).RemoveAt(@ptrCast(*const IXpsOMPartUriCollection, self), index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPartUriCollection_SetAt(self: *const T, index: u32, partUri: ?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPartUriCollection.VTable, self.vtable).SetAt(@ptrCast(*const IXpsOMPartUriCollection, self), index, partUri);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPartUriCollection_Append(self: *const T, partUri: ?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPartUriCollection.VTable, self.vtable).Append(@ptrCast(*const IXpsOMPartUriCollection, self), partUri);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPackageWriter_Value = @import("../zig.zig").Guid.initString("4e2aa182-a443-42c6-b41b-4f8e9de73ff9");
pub const IID_IXpsOMPackageWriter = &IID_IXpsOMPackageWriter_Value;
pub const IXpsOMPackageWriter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartNewDocument: fn(
            self: *const IXpsOMPackageWriter,
            documentPartName: ?*IOpcPartUri,
            documentPrintTicket: ?*IXpsOMPrintTicketResource,
            documentStructure: ?*IXpsOMDocumentStructureResource,
            signatureBlockResources: ?*IXpsOMSignatureBlockResourceCollection,
            restrictedFonts: ?*IXpsOMPartUriCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPage: fn(
            self: *const IXpsOMPackageWriter,
            page: ?*IXpsOMPage,
            advisoryPageDimensions: ?*const XPS_SIZE,
            discardableResourceParts: ?*IXpsOMPartUriCollection,
            storyFragments: ?*IXpsOMStoryFragmentsResource,
            pagePrintTicket: ?*IXpsOMPrintTicketResource,
            pageThumbnail: ?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddResource: fn(
            self: *const IXpsOMPackageWriter,
            resource: ?*IXpsOMResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IXpsOMPackageWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsClosed: fn(
            self: *const IXpsOMPackageWriter,
            isClosed: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackageWriter_StartNewDocument(self: *const T, documentPartName: ?*IOpcPartUri, documentPrintTicket: ?*IXpsOMPrintTicketResource, documentStructure: ?*IXpsOMDocumentStructureResource, signatureBlockResources: ?*IXpsOMSignatureBlockResourceCollection, restrictedFonts: ?*IXpsOMPartUriCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackageWriter.VTable, self.vtable).StartNewDocument(@ptrCast(*const IXpsOMPackageWriter, self), documentPartName, documentPrintTicket, documentStructure, signatureBlockResources, restrictedFonts);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackageWriter_AddPage(self: *const T, page: ?*IXpsOMPage, advisoryPageDimensions: ?*const XPS_SIZE, discardableResourceParts: ?*IXpsOMPartUriCollection, storyFragments: ?*IXpsOMStoryFragmentsResource, pagePrintTicket: ?*IXpsOMPrintTicketResource, pageThumbnail: ?*IXpsOMImageResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackageWriter.VTable, self.vtable).AddPage(@ptrCast(*const IXpsOMPackageWriter, self), page, advisoryPageDimensions, discardableResourceParts, storyFragments, pagePrintTicket, pageThumbnail);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackageWriter_AddResource(self: *const T, resource: ?*IXpsOMResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackageWriter.VTable, self.vtable).AddResource(@ptrCast(*const IXpsOMPackageWriter, self), resource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackageWriter_Close(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackageWriter.VTable, self.vtable).Close(@ptrCast(*const IXpsOMPackageWriter, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackageWriter_IsClosed(self: *const T, isClosed: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackageWriter.VTable, self.vtable).IsClosed(@ptrCast(*const IXpsOMPackageWriter, self), isClosed);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPackageTarget_Value = @import("../zig.zig").Guid.initString("219a9db0-4959-47d0-8034-b1ce84f41a4d");
pub const IID_IXpsOMPackageTarget = &IID_IXpsOMPackageTarget_Value;
pub const IXpsOMPackageTarget = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateXpsOMPackageWriter: fn(
            self: *const IXpsOMPackageTarget,
            documentSequencePartName: ?*IOpcPartUri,
            documentSequencePrintTicket: ?*IXpsOMPrintTicketResource,
            discardControlPartName: ?*IOpcPartUri,
            packageWriter: ?*?*IXpsOMPackageWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackageTarget_CreateXpsOMPackageWriter(self: *const T, documentSequencePartName: ?*IOpcPartUri, documentSequencePrintTicket: ?*IXpsOMPrintTicketResource, discardControlPartName: ?*IOpcPartUri, packageWriter: ?*?*IXpsOMPackageWriter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackageTarget.VTable, self.vtable).CreateXpsOMPackageWriter(@ptrCast(*const IXpsOMPackageTarget, self), documentSequencePartName, documentSequencePrintTicket, discardControlPartName, packageWriter);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMThumbnailGenerator_Value = @import("../zig.zig").Guid.initString("15b873d5-1971-41e8-83a3-6578403064c7");
pub const IID_IXpsOMThumbnailGenerator = &IID_IXpsOMThumbnailGenerator_Value;
pub const IXpsOMThumbnailGenerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GenerateThumbnail: fn(
            self: *const IXpsOMThumbnailGenerator,
            page: ?*IXpsOMPage,
            thumbnailType: XPS_IMAGE_TYPE,
            thumbnailSize: XPS_THUMBNAIL_SIZE,
            imageResourcePartName: ?*IOpcPartUri,
            imageResource: ?*?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMThumbnailGenerator_GenerateThumbnail(self: *const T, page: ?*IXpsOMPage, thumbnailType: XPS_IMAGE_TYPE, thumbnailSize: XPS_THUMBNAIL_SIZE, imageResourcePartName: ?*IOpcPartUri, imageResource: ?*?*IXpsOMImageResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMThumbnailGenerator.VTable, self.vtable).GenerateThumbnail(@ptrCast(*const IXpsOMThumbnailGenerator, self), page, thumbnailType, thumbnailSize, imageResourcePartName, imageResource);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const XPS_DOCUMENT_TYPE = enum(i32) {
    UNSPECIFIED = 1,
    XPS = 2,
    OPENXPS = 3,
};
pub const XPS_DOCUMENT_TYPE_UNSPECIFIED = XPS_DOCUMENT_TYPE.UNSPECIFIED;
pub const XPS_DOCUMENT_TYPE_XPS = XPS_DOCUMENT_TYPE.XPS;
pub const XPS_DOCUMENT_TYPE_OPENXPS = XPS_DOCUMENT_TYPE.OPENXPS;

// TODO: this type is limited to platform 'windows8.0'
const IID_IXpsOMObjectFactory1_Value = @import("../zig.zig").Guid.initString("0a91b617-d612-4181-bf7c-be5824e9cc8f");
pub const IID_IXpsOMObjectFactory1 = &IID_IXpsOMObjectFactory1_Value;
pub const IXpsOMObjectFactory1 = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMObjectFactory.VTable,
        GetDocumentTypeFromFile: fn(
            self: *const IXpsOMObjectFactory1,
            filename: ?[*:0]const u16,
            documentType: ?*XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDocumentTypeFromStream: fn(
            self: *const IXpsOMObjectFactory1,
            xpsDocumentStream: ?*IStream,
            documentType: ?*XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertHDPhotoToJpegXR: fn(
            self: *const IXpsOMObjectFactory1,
            imageResource: ?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertJpegXRToHDPhoto: fn(
            self: *const IXpsOMObjectFactory1,
            imageResource: ?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePackageWriterOnFile1: fn(
            self: *const IXpsOMObjectFactory1,
            fileName: ?[*:0]const u16,
            securityAttributes: ?*SECURITY_ATTRIBUTES,
            flagsAndAttributes: u32,
            optimizeMarkupSize: BOOL,
            interleaving: XPS_INTERLEAVING,
            documentSequencePartName: ?*IOpcPartUri,
            coreProperties: ?*IXpsOMCoreProperties,
            packageThumbnail: ?*IXpsOMImageResource,
            documentSequencePrintTicket: ?*IXpsOMPrintTicketResource,
            discardControlPartName: ?*IOpcPartUri,
            documentType: XPS_DOCUMENT_TYPE,
            packageWriter: ?*?*IXpsOMPackageWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePackageWriterOnStream1: fn(
            self: *const IXpsOMObjectFactory1,
            outputStream: ?*ISequentialStream,
            optimizeMarkupSize: BOOL,
            interleaving: XPS_INTERLEAVING,
            documentSequencePartName: ?*IOpcPartUri,
            coreProperties: ?*IXpsOMCoreProperties,
            packageThumbnail: ?*IXpsOMImageResource,
            documentSequencePrintTicket: ?*IXpsOMPrintTicketResource,
            discardControlPartName: ?*IOpcPartUri,
            documentType: XPS_DOCUMENT_TYPE,
            packageWriter: ?*?*IXpsOMPackageWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePackage1: fn(
            self: *const IXpsOMObjectFactory1,
            package: ?*?*IXpsOMPackage1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePackageFromStream1: fn(
            self: *const IXpsOMObjectFactory1,
            stream: ?*IStream,
            reuseObjects: BOOL,
            package: ?*?*IXpsOMPackage1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePackageFromFile1: fn(
            self: *const IXpsOMObjectFactory1,
            filename: ?[*:0]const u16,
            reuseObjects: BOOL,
            package: ?*?*IXpsOMPackage1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePage1: fn(
            self: *const IXpsOMObjectFactory1,
            pageDimensions: ?*const XPS_SIZE,
            language: ?[*:0]const u16,
            partUri: ?*IOpcPartUri,
            page: ?*?*IXpsOMPage1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePageFromStream1: fn(
            self: *const IXpsOMObjectFactory1,
            pageMarkupStream: ?*IStream,
            partUri: ?*IOpcPartUri,
            resources: ?*IXpsOMPartResources,
            reuseObjects: BOOL,
            page: ?*?*IXpsOMPage1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRemoteDictionaryResourceFromStream1: fn(
            self: *const IXpsOMObjectFactory1,
            dictionaryMarkupStream: ?*IStream,
            partUri: ?*IOpcPartUri,
            resources: ?*IXpsOMPartResources,
            dictionaryResource: ?*?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMObjectFactory.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory1_GetDocumentTypeFromFile(self: *const T, filename: ?[*:0]const u16, documentType: ?*XPS_DOCUMENT_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory1.VTable, self.vtable).GetDocumentTypeFromFile(@ptrCast(*const IXpsOMObjectFactory1, self), filename, documentType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory1_GetDocumentTypeFromStream(self: *const T, xpsDocumentStream: ?*IStream, documentType: ?*XPS_DOCUMENT_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory1.VTable, self.vtable).GetDocumentTypeFromStream(@ptrCast(*const IXpsOMObjectFactory1, self), xpsDocumentStream, documentType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory1_ConvertHDPhotoToJpegXR(self: *const T, imageResource: ?*IXpsOMImageResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory1.VTable, self.vtable).ConvertHDPhotoToJpegXR(@ptrCast(*const IXpsOMObjectFactory1, self), imageResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory1_ConvertJpegXRToHDPhoto(self: *const T, imageResource: ?*IXpsOMImageResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory1.VTable, self.vtable).ConvertJpegXRToHDPhoto(@ptrCast(*const IXpsOMObjectFactory1, self), imageResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory1_CreatePackageWriterOnFile1(self: *const T, fileName: ?[*:0]const u16, securityAttributes: ?*SECURITY_ATTRIBUTES, flagsAndAttributes: u32, optimizeMarkupSize: BOOL, interleaving: XPS_INTERLEAVING, documentSequencePartName: ?*IOpcPartUri, coreProperties: ?*IXpsOMCoreProperties, packageThumbnail: ?*IXpsOMImageResource, documentSequencePrintTicket: ?*IXpsOMPrintTicketResource, discardControlPartName: ?*IOpcPartUri, documentType: XPS_DOCUMENT_TYPE, packageWriter: ?*?*IXpsOMPackageWriter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory1.VTable, self.vtable).CreatePackageWriterOnFile1(@ptrCast(*const IXpsOMObjectFactory1, self), fileName, securityAttributes, flagsAndAttributes, optimizeMarkupSize, interleaving, documentSequencePartName, coreProperties, packageThumbnail, documentSequencePrintTicket, discardControlPartName, documentType, packageWriter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory1_CreatePackageWriterOnStream1(self: *const T, outputStream: ?*ISequentialStream, optimizeMarkupSize: BOOL, interleaving: XPS_INTERLEAVING, documentSequencePartName: ?*IOpcPartUri, coreProperties: ?*IXpsOMCoreProperties, packageThumbnail: ?*IXpsOMImageResource, documentSequencePrintTicket: ?*IXpsOMPrintTicketResource, discardControlPartName: ?*IOpcPartUri, documentType: XPS_DOCUMENT_TYPE, packageWriter: ?*?*IXpsOMPackageWriter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory1.VTable, self.vtable).CreatePackageWriterOnStream1(@ptrCast(*const IXpsOMObjectFactory1, self), outputStream, optimizeMarkupSize, interleaving, documentSequencePartName, coreProperties, packageThumbnail, documentSequencePrintTicket, discardControlPartName, documentType, packageWriter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory1_CreatePackage1(self: *const T, package: ?*?*IXpsOMPackage1) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory1.VTable, self.vtable).CreatePackage1(@ptrCast(*const IXpsOMObjectFactory1, self), package);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory1_CreatePackageFromStream1(self: *const T, stream: ?*IStream, reuseObjects: BOOL, package: ?*?*IXpsOMPackage1) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory1.VTable, self.vtable).CreatePackageFromStream1(@ptrCast(*const IXpsOMObjectFactory1, self), stream, reuseObjects, package);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory1_CreatePackageFromFile1(self: *const T, filename: ?[*:0]const u16, reuseObjects: BOOL, package: ?*?*IXpsOMPackage1) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory1.VTable, self.vtable).CreatePackageFromFile1(@ptrCast(*const IXpsOMObjectFactory1, self), filename, reuseObjects, package);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory1_CreatePage1(self: *const T, pageDimensions: ?*const XPS_SIZE, language: ?[*:0]const u16, partUri: ?*IOpcPartUri, page: ?*?*IXpsOMPage1) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory1.VTable, self.vtable).CreatePage1(@ptrCast(*const IXpsOMObjectFactory1, self), pageDimensions, language, partUri, page);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory1_CreatePageFromStream1(self: *const T, pageMarkupStream: ?*IStream, partUri: ?*IOpcPartUri, resources: ?*IXpsOMPartResources, reuseObjects: BOOL, page: ?*?*IXpsOMPage1) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory1.VTable, self.vtable).CreatePageFromStream1(@ptrCast(*const IXpsOMObjectFactory1, self), pageMarkupStream, partUri, resources, reuseObjects, page);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMObjectFactory1_CreateRemoteDictionaryResourceFromStream1(self: *const T, dictionaryMarkupStream: ?*IStream, partUri: ?*IOpcPartUri, resources: ?*IXpsOMPartResources, dictionaryResource: ?*?*IXpsOMRemoteDictionaryResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMObjectFactory1.VTable, self.vtable).CreateRemoteDictionaryResourceFromStream1(@ptrCast(*const IXpsOMObjectFactory1, self), dictionaryMarkupStream, partUri, resources, dictionaryResource);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IXpsOMPackage1_Value = @import("../zig.zig").Guid.initString("95a9435e-12bb-461b-8e7f-c6adb04cd96a");
pub const IID_IXpsOMPackage1 = &IID_IXpsOMPackage1_Value;
pub const IXpsOMPackage1 = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMPackage.VTable,
        GetDocumentType: fn(
            self: *const IXpsOMPackage1,
            documentType: ?*XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteToFile1: fn(
            self: *const IXpsOMPackage1,
            fileName: ?[*:0]const u16,
            securityAttributes: ?*SECURITY_ATTRIBUTES,
            flagsAndAttributes: u32,
            optimizeMarkupSize: BOOL,
            documentType: XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteToStream1: fn(
            self: *const IXpsOMPackage1,
            outputStream: ?*ISequentialStream,
            optimizeMarkupSize: BOOL,
            documentType: XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMPackage.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackage1_GetDocumentType(self: *const T, documentType: ?*XPS_DOCUMENT_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackage1.VTable, self.vtable).GetDocumentType(@ptrCast(*const IXpsOMPackage1, self), documentType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackage1_WriteToFile1(self: *const T, fileName: ?[*:0]const u16, securityAttributes: ?*SECURITY_ATTRIBUTES, flagsAndAttributes: u32, optimizeMarkupSize: BOOL, documentType: XPS_DOCUMENT_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackage1.VTable, self.vtable).WriteToFile1(@ptrCast(*const IXpsOMPackage1, self), fileName, securityAttributes, flagsAndAttributes, optimizeMarkupSize, documentType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackage1_WriteToStream1(self: *const T, outputStream: ?*ISequentialStream, optimizeMarkupSize: BOOL, documentType: XPS_DOCUMENT_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackage1.VTable, self.vtable).WriteToStream1(@ptrCast(*const IXpsOMPackage1, self), outputStream, optimizeMarkupSize, documentType);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IXpsOMPage1_Value = @import("../zig.zig").Guid.initString("305b60ef-6892-4dda-9cbb-3aa65974508a");
pub const IID_IXpsOMPage1 = &IID_IXpsOMPage1_Value;
pub const IXpsOMPage1 = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMPage.VTable,
        GetDocumentType: fn(
            self: *const IXpsOMPage1,
            documentType: ?*XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Write1: fn(
            self: *const IXpsOMPage1,
            stream: ?*ISequentialStream,
            optimizeMarkupSize: BOOL,
            documentType: XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMPage.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage1_GetDocumentType(self: *const T, documentType: ?*XPS_DOCUMENT_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage1.VTable, self.vtable).GetDocumentType(@ptrCast(*const IXpsOMPage1, self), documentType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPage1_Write1(self: *const T, stream: ?*ISequentialStream, optimizeMarkupSize: BOOL, documentType: XPS_DOCUMENT_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPage1.VTable, self.vtable).Write1(@ptrCast(*const IXpsOMPage1, self), stream, optimizeMarkupSize, documentType);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IXpsDocumentPackageTarget_Value = @import("../zig.zig").Guid.initString("3b0b6d38-53ad-41da-b212-d37637a6714e");
pub const IID_IXpsDocumentPackageTarget = &IID_IXpsDocumentPackageTarget_Value;
pub const IXpsDocumentPackageTarget = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetXpsOMPackageWriter: fn(
            self: *const IXpsDocumentPackageTarget,
            documentSequencePartName: ?*IOpcPartUri,
            discardControlPartName: ?*IOpcPartUri,
            packageWriter: ?*?*IXpsOMPackageWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetXpsOMFactory: fn(
            self: *const IXpsDocumentPackageTarget,
            xpsFactory: ?*?*IXpsOMObjectFactory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetXpsType: fn(
            self: *const IXpsDocumentPackageTarget,
            documentType: ?*XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsDocumentPackageTarget_GetXpsOMPackageWriter(self: *const T, documentSequencePartName: ?*IOpcPartUri, discardControlPartName: ?*IOpcPartUri, packageWriter: ?*?*IXpsOMPackageWriter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsDocumentPackageTarget.VTable, self.vtable).GetXpsOMPackageWriter(@ptrCast(*const IXpsDocumentPackageTarget, self), documentSequencePartName, discardControlPartName, packageWriter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsDocumentPackageTarget_GetXpsOMFactory(self: *const T, xpsFactory: ?*?*IXpsOMObjectFactory) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsDocumentPackageTarget.VTable, self.vtable).GetXpsOMFactory(@ptrCast(*const IXpsDocumentPackageTarget, self), xpsFactory);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsDocumentPackageTarget_GetXpsType(self: *const T, documentType: ?*XPS_DOCUMENT_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsDocumentPackageTarget.VTable, self.vtable).GetXpsType(@ptrCast(*const IXpsDocumentPackageTarget, self), documentType);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IXpsOMRemoteDictionaryResource1_Value = @import("../zig.zig").Guid.initString("bf8fc1d4-9d46-4141-ba5f-94bb9250d041");
pub const IID_IXpsOMRemoteDictionaryResource1 = &IID_IXpsOMRemoteDictionaryResource1_Value;
pub const IXpsOMRemoteDictionaryResource1 = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMRemoteDictionaryResource.VTable,
        GetDocumentType: fn(
            self: *const IXpsOMRemoteDictionaryResource1,
            documentType: ?*XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Write1: fn(
            self: *const IXpsOMRemoteDictionaryResource1,
            stream: ?*ISequentialStream,
            documentType: XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMRemoteDictionaryResource.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMRemoteDictionaryResource1_GetDocumentType(self: *const T, documentType: ?*XPS_DOCUMENT_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMRemoteDictionaryResource1.VTable, self.vtable).GetDocumentType(@ptrCast(*const IXpsOMRemoteDictionaryResource1, self), documentType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMRemoteDictionaryResource1_Write1(self: *const T, stream: ?*ISequentialStream, documentType: XPS_DOCUMENT_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMRemoteDictionaryResource1.VTable, self.vtable).Write1(@ptrCast(*const IXpsOMRemoteDictionaryResource1, self), stream, documentType);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IXpsOMPackageWriter3D_Value = @import("../zig.zig").Guid.initString("e8a45033-640e-43fa-9bdf-fddeaa31c6a0");
pub const IID_IXpsOMPackageWriter3D = &IID_IXpsOMPackageWriter3D_Value;
pub const IXpsOMPackageWriter3D = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMPackageWriter.VTable,
        AddModelTexture: fn(
            self: *const IXpsOMPackageWriter3D,
            texturePartName: ?*IOpcPartUri,
            textureData: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetModelPrintTicket: fn(
            self: *const IXpsOMPackageWriter3D,
            printTicketPartName: ?*IOpcPartUri,
            printTicketData: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXpsOMPackageWriter.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackageWriter3D_AddModelTexture(self: *const T, texturePartName: ?*IOpcPartUri, textureData: ?*IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackageWriter3D.VTable, self.vtable).AddModelTexture(@ptrCast(*const IXpsOMPackageWriter3D, self), texturePartName, textureData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsOMPackageWriter3D_SetModelPrintTicket(self: *const T, printTicketPartName: ?*IOpcPartUri, printTicketData: ?*IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsOMPackageWriter3D.VTable, self.vtable).SetModelPrintTicket(@ptrCast(*const IXpsOMPackageWriter3D, self), printTicketPartName, printTicketData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IXpsDocumentPackageTarget3D_Value = @import("../zig.zig").Guid.initString("60ba71b8-3101-4984-9199-f4ea775ff01d");
pub const IID_IXpsDocumentPackageTarget3D = &IID_IXpsDocumentPackageTarget3D_Value;
pub const IXpsDocumentPackageTarget3D = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetXpsOMPackageWriter3D: fn(
            self: *const IXpsDocumentPackageTarget3D,
            documentSequencePartName: ?*IOpcPartUri,
            discardControlPartName: ?*IOpcPartUri,
            modelPartName: ?*IOpcPartUri,
            modelData: ?*IStream,
            packageWriter: ?*?*IXpsOMPackageWriter3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetXpsOMFactory: fn(
            self: *const IXpsDocumentPackageTarget3D,
            xpsFactory: ?*?*IXpsOMObjectFactory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsDocumentPackageTarget3D_GetXpsOMPackageWriter3D(self: *const T, documentSequencePartName: ?*IOpcPartUri, discardControlPartName: ?*IOpcPartUri, modelPartName: ?*IOpcPartUri, modelData: ?*IStream, packageWriter: ?*?*IXpsOMPackageWriter3D) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsDocumentPackageTarget3D.VTable, self.vtable).GetXpsOMPackageWriter3D(@ptrCast(*const IXpsDocumentPackageTarget3D, self), documentSequencePartName, discardControlPartName, modelPartName, modelData, packageWriter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsDocumentPackageTarget3D_GetXpsOMFactory(self: *const T, xpsFactory: ?*?*IXpsOMObjectFactory) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsDocumentPackageTarget3D.VTable, self.vtable).GetXpsOMFactory(@ptrCast(*const IXpsDocumentPackageTarget3D, self), xpsFactory);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_XpsSignatureManager_Value = @import("../zig.zig").Guid.initString("b0c43320-2315-44a2-b70a-0943a140a8ee");
pub const CLSID_XpsSignatureManager = &CLSID_XpsSignatureManager_Value;

pub const XPS_SIGNATURE_STATUS = enum(i32) {
    INCOMPLIANT = 1,
    INCOMPLETE = 2,
    BROKEN = 3,
    QUESTIONABLE = 4,
    VALID = 5,
};
pub const XPS_SIGNATURE_STATUS_INCOMPLIANT = XPS_SIGNATURE_STATUS.INCOMPLIANT;
pub const XPS_SIGNATURE_STATUS_INCOMPLETE = XPS_SIGNATURE_STATUS.INCOMPLETE;
pub const XPS_SIGNATURE_STATUS_BROKEN = XPS_SIGNATURE_STATUS.BROKEN;
pub const XPS_SIGNATURE_STATUS_QUESTIONABLE = XPS_SIGNATURE_STATUS.QUESTIONABLE;
pub const XPS_SIGNATURE_STATUS_VALID = XPS_SIGNATURE_STATUS.VALID;

pub const XPS_SIGN_POLICY = enum(i32) {
    NONE = 0,
    CORE_PROPERTIES = 1,
    SIGNATURE_RELATIONSHIPS = 2,
    PRINT_TICKET = 4,
    DISCARD_CONTROL = 8,
    ALL = 15,
};
pub const XPS_SIGN_POLICY_NONE = XPS_SIGN_POLICY.NONE;
pub const XPS_SIGN_POLICY_CORE_PROPERTIES = XPS_SIGN_POLICY.CORE_PROPERTIES;
pub const XPS_SIGN_POLICY_SIGNATURE_RELATIONSHIPS = XPS_SIGN_POLICY.SIGNATURE_RELATIONSHIPS;
pub const XPS_SIGN_POLICY_PRINT_TICKET = XPS_SIGN_POLICY.PRINT_TICKET;
pub const XPS_SIGN_POLICY_DISCARD_CONTROL = XPS_SIGN_POLICY.DISCARD_CONTROL;
pub const XPS_SIGN_POLICY_ALL = XPS_SIGN_POLICY.ALL;

pub const XPS_SIGN_FLAGS = enum(i32) {
    NONE = 0,
    IGNORE_MARKUP_COMPATIBILITY = 1,
};
pub const XPS_SIGN_FLAGS_NONE = XPS_SIGN_FLAGS.NONE;
pub const XPS_SIGN_FLAGS_IGNORE_MARKUP_COMPATIBILITY = XPS_SIGN_FLAGS.IGNORE_MARKUP_COMPATIBILITY;

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsSigningOptions_Value = @import("../zig.zig").Guid.initString("7718eae4-3215-49be-af5b-594fef7fcfa6");
pub const IID_IXpsSigningOptions = &IID_IXpsSigningOptions_Value;
pub const IXpsSigningOptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSignatureId: fn(
            self: *const IXpsSigningOptions,
            signatureId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignatureId: fn(
            self: *const IXpsSigningOptions,
            signatureId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureMethod: fn(
            self: *const IXpsSigningOptions,
            signatureMethod: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignatureMethod: fn(
            self: *const IXpsSigningOptions,
            signatureMethod: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDigestMethod: fn(
            self: *const IXpsSigningOptions,
            digestMethod: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDigestMethod: fn(
            self: *const IXpsSigningOptions,
            digestMethod: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignaturePartName: fn(
            self: *const IXpsSigningOptions,
            signaturePartName: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignaturePartName: fn(
            self: *const IXpsSigningOptions,
            signaturePartName: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicy: fn(
            self: *const IXpsSigningOptions,
            policy: ?*XPS_SIGN_POLICY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPolicy: fn(
            self: *const IXpsSigningOptions,
            policy: XPS_SIGN_POLICY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSigningTimeFormat: fn(
            self: *const IXpsSigningOptions,
            timeFormat: ?*OPC_SIGNATURE_TIME_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSigningTimeFormat: fn(
            self: *const IXpsSigningOptions,
            timeFormat: OPC_SIGNATURE_TIME_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCustomObjects: fn(
            self: *const IXpsSigningOptions,
            customObjectSet: ?*?*IOpcSignatureCustomObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCustomReferences: fn(
            self: *const IXpsSigningOptions,
            customReferenceSet: ?*?*IOpcSignatureReferenceSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateSet: fn(
            self: *const IXpsSigningOptions,
            certificateSet: ?*?*IOpcCertificateSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: fn(
            self: *const IXpsSigningOptions,
            flags: ?*XPS_SIGN_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFlags: fn(
            self: *const IXpsSigningOptions,
            flags: XPS_SIGN_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSigningOptions_GetSignatureId(self: *const T, signatureId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSigningOptions.VTable, self.vtable).GetSignatureId(@ptrCast(*const IXpsSigningOptions, self), signatureId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSigningOptions_SetSignatureId(self: *const T, signatureId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSigningOptions.VTable, self.vtable).SetSignatureId(@ptrCast(*const IXpsSigningOptions, self), signatureId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSigningOptions_GetSignatureMethod(self: *const T, signatureMethod: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSigningOptions.VTable, self.vtable).GetSignatureMethod(@ptrCast(*const IXpsSigningOptions, self), signatureMethod);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSigningOptions_SetSignatureMethod(self: *const T, signatureMethod: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSigningOptions.VTable, self.vtable).SetSignatureMethod(@ptrCast(*const IXpsSigningOptions, self), signatureMethod);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSigningOptions_GetDigestMethod(self: *const T, digestMethod: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSigningOptions.VTable, self.vtable).GetDigestMethod(@ptrCast(*const IXpsSigningOptions, self), digestMethod);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSigningOptions_SetDigestMethod(self: *const T, digestMethod: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSigningOptions.VTable, self.vtable).SetDigestMethod(@ptrCast(*const IXpsSigningOptions, self), digestMethod);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSigningOptions_GetSignaturePartName(self: *const T, signaturePartName: ?*?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSigningOptions.VTable, self.vtable).GetSignaturePartName(@ptrCast(*const IXpsSigningOptions, self), signaturePartName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSigningOptions_SetSignaturePartName(self: *const T, signaturePartName: ?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSigningOptions.VTable, self.vtable).SetSignaturePartName(@ptrCast(*const IXpsSigningOptions, self), signaturePartName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSigningOptions_GetPolicy(self: *const T, policy: ?*XPS_SIGN_POLICY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSigningOptions.VTable, self.vtable).GetPolicy(@ptrCast(*const IXpsSigningOptions, self), policy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSigningOptions_SetPolicy(self: *const T, policy: XPS_SIGN_POLICY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSigningOptions.VTable, self.vtable).SetPolicy(@ptrCast(*const IXpsSigningOptions, self), policy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSigningOptions_GetSigningTimeFormat(self: *const T, timeFormat: ?*OPC_SIGNATURE_TIME_FORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSigningOptions.VTable, self.vtable).GetSigningTimeFormat(@ptrCast(*const IXpsSigningOptions, self), timeFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSigningOptions_SetSigningTimeFormat(self: *const T, timeFormat: OPC_SIGNATURE_TIME_FORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSigningOptions.VTable, self.vtable).SetSigningTimeFormat(@ptrCast(*const IXpsSigningOptions, self), timeFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSigningOptions_GetCustomObjects(self: *const T, customObjectSet: ?*?*IOpcSignatureCustomObjectSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSigningOptions.VTable, self.vtable).GetCustomObjects(@ptrCast(*const IXpsSigningOptions, self), customObjectSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSigningOptions_GetCustomReferences(self: *const T, customReferenceSet: ?*?*IOpcSignatureReferenceSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSigningOptions.VTable, self.vtable).GetCustomReferences(@ptrCast(*const IXpsSigningOptions, self), customReferenceSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSigningOptions_GetCertificateSet(self: *const T, certificateSet: ?*?*IOpcCertificateSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSigningOptions.VTable, self.vtable).GetCertificateSet(@ptrCast(*const IXpsSigningOptions, self), certificateSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSigningOptions_GetFlags(self: *const T, flags: ?*XPS_SIGN_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSigningOptions.VTable, self.vtable).GetFlags(@ptrCast(*const IXpsSigningOptions, self), flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSigningOptions_SetFlags(self: *const T, flags: XPS_SIGN_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSigningOptions.VTable, self.vtable).SetFlags(@ptrCast(*const IXpsSigningOptions, self), flags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsSignatureCollection_Value = @import("../zig.zig").Guid.initString("a2d1d95d-add2-4dff-ab27-6b9c645ff322");
pub const IID_IXpsSignatureCollection = &IID_IXpsSignatureCollection_Value;
pub const IXpsSignatureCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IXpsSignatureCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IXpsSignatureCollection,
            index: u32,
            signature: ?*?*IXpsSignature,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IXpsSignatureCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureCollection_GetCount(self: *const T, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureCollection.VTable, self.vtable).GetCount(@ptrCast(*const IXpsSignatureCollection, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureCollection_GetAt(self: *const T, index: u32, signature: ?*?*IXpsSignature) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureCollection.VTable, self.vtable).GetAt(@ptrCast(*const IXpsSignatureCollection, self), index, signature);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureCollection_RemoveAt(self: *const T, index: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureCollection.VTable, self.vtable).RemoveAt(@ptrCast(*const IXpsSignatureCollection, self), index);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsSignature_Value = @import("../zig.zig").Guid.initString("6ae4c93e-1ade-42fb-898b-3a5658284857");
pub const IID_IXpsSignature = &IID_IXpsSignature_Value;
pub const IXpsSignature = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSignatureId: fn(
            self: *const IXpsSignature,
            sigId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureValue: fn(
            self: *const IXpsSignature,
            signatureHashValue: [*]?*u8,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateEnumerator: fn(
            self: *const IXpsSignature,
            certificateEnumerator: ?*?*IOpcCertificateEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSigningTime: fn(
            self: *const IXpsSignature,
            sigDateTimeString: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSigningTimeFormat: fn(
            self: *const IXpsSignature,
            timeFormat: ?*OPC_SIGNATURE_TIME_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignaturePartName: fn(
            self: *const IXpsSignature,
            signaturePartName: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Verify: fn(
            self: *const IXpsSignature,
            x509Certificate: ?*const CERT_CONTEXT,
            sigStatus: ?*XPS_SIGNATURE_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicy: fn(
            self: *const IXpsSignature,
            policy: ?*XPS_SIGN_POLICY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCustomObjectEnumerator: fn(
            self: *const IXpsSignature,
            customObjectEnumerator: ?*?*IOpcSignatureCustomObjectEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCustomReferenceEnumerator: fn(
            self: *const IXpsSignature,
            customReferenceEnumerator: ?*?*IOpcSignatureReferenceEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureXml: fn(
            self: *const IXpsSignature,
            signatureXml: [*]?*u8,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignatureXml: fn(
            self: *const IXpsSignature,
            signatureXml: [*:0]const u8,
            count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignature_GetSignatureId(self: *const T, sigId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignature.VTable, self.vtable).GetSignatureId(@ptrCast(*const IXpsSignature, self), sigId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignature_GetSignatureValue(self: *const T, signatureHashValue: [*]?*u8, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignature.VTable, self.vtable).GetSignatureValue(@ptrCast(*const IXpsSignature, self), signatureHashValue, count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignature_GetCertificateEnumerator(self: *const T, certificateEnumerator: ?*?*IOpcCertificateEnumerator) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignature.VTable, self.vtable).GetCertificateEnumerator(@ptrCast(*const IXpsSignature, self), certificateEnumerator);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignature_GetSigningTime(self: *const T, sigDateTimeString: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignature.VTable, self.vtable).GetSigningTime(@ptrCast(*const IXpsSignature, self), sigDateTimeString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignature_GetSigningTimeFormat(self: *const T, timeFormat: ?*OPC_SIGNATURE_TIME_FORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignature.VTable, self.vtable).GetSigningTimeFormat(@ptrCast(*const IXpsSignature, self), timeFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignature_GetSignaturePartName(self: *const T, signaturePartName: ?*?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignature.VTable, self.vtable).GetSignaturePartName(@ptrCast(*const IXpsSignature, self), signaturePartName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignature_Verify(self: *const T, x509Certificate: ?*const CERT_CONTEXT, sigStatus: ?*XPS_SIGNATURE_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignature.VTable, self.vtable).Verify(@ptrCast(*const IXpsSignature, self), x509Certificate, sigStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignature_GetPolicy(self: *const T, policy: ?*XPS_SIGN_POLICY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignature.VTable, self.vtable).GetPolicy(@ptrCast(*const IXpsSignature, self), policy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignature_GetCustomObjectEnumerator(self: *const T, customObjectEnumerator: ?*?*IOpcSignatureCustomObjectEnumerator) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignature.VTable, self.vtable).GetCustomObjectEnumerator(@ptrCast(*const IXpsSignature, self), customObjectEnumerator);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignature_GetCustomReferenceEnumerator(self: *const T, customReferenceEnumerator: ?*?*IOpcSignatureReferenceEnumerator) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignature.VTable, self.vtable).GetCustomReferenceEnumerator(@ptrCast(*const IXpsSignature, self), customReferenceEnumerator);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignature_GetSignatureXml(self: *const T, signatureXml: [*]?*u8, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignature.VTable, self.vtable).GetSignatureXml(@ptrCast(*const IXpsSignature, self), signatureXml, count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignature_SetSignatureXml(self: *const T, signatureXml: [*:0]const u8, count: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignature.VTable, self.vtable).SetSignatureXml(@ptrCast(*const IXpsSignature, self), signatureXml, count);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsSignatureBlockCollection_Value = @import("../zig.zig").Guid.initString("23397050-fe99-467a-8dce-9237f074ffe4");
pub const IID_IXpsSignatureBlockCollection = &IID_IXpsSignatureBlockCollection_Value;
pub const IXpsSignatureBlockCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IXpsSignatureBlockCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IXpsSignatureBlockCollection,
            index: u32,
            signatureBlock: ?*?*IXpsSignatureBlock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IXpsSignatureBlockCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureBlockCollection_GetCount(self: *const T, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureBlockCollection.VTable, self.vtable).GetCount(@ptrCast(*const IXpsSignatureBlockCollection, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureBlockCollection_GetAt(self: *const T, index: u32, signatureBlock: ?*?*IXpsSignatureBlock) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureBlockCollection.VTable, self.vtable).GetAt(@ptrCast(*const IXpsSignatureBlockCollection, self), index, signatureBlock);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureBlockCollection_RemoveAt(self: *const T, index: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureBlockCollection.VTable, self.vtable).RemoveAt(@ptrCast(*const IXpsSignatureBlockCollection, self), index);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsSignatureBlock_Value = @import("../zig.zig").Guid.initString("151fac09-0b97-4ac6-a323-5e4297d4322b");
pub const IID_IXpsSignatureBlock = &IID_IXpsSignatureBlock_Value;
pub const IXpsSignatureBlock = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRequests: fn(
            self: *const IXpsSignatureBlock,
            requests: ?*?*IXpsSignatureRequestCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPartName: fn(
            self: *const IXpsSignatureBlock,
            partName: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDocumentIndex: fn(
            self: *const IXpsSignatureBlock,
            fixedDocumentIndex: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDocumentName: fn(
            self: *const IXpsSignatureBlock,
            fixedDocumentName: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRequest: fn(
            self: *const IXpsSignatureBlock,
            requestId: ?[*:0]const u16,
            signatureRequest: ?*?*IXpsSignatureRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureBlock_GetRequests(self: *const T, requests: ?*?*IXpsSignatureRequestCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureBlock.VTable, self.vtable).GetRequests(@ptrCast(*const IXpsSignatureBlock, self), requests);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureBlock_GetPartName(self: *const T, partName: ?*?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureBlock.VTable, self.vtable).GetPartName(@ptrCast(*const IXpsSignatureBlock, self), partName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureBlock_GetDocumentIndex(self: *const T, fixedDocumentIndex: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureBlock.VTable, self.vtable).GetDocumentIndex(@ptrCast(*const IXpsSignatureBlock, self), fixedDocumentIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureBlock_GetDocumentName(self: *const T, fixedDocumentName: ?*?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureBlock.VTable, self.vtable).GetDocumentName(@ptrCast(*const IXpsSignatureBlock, self), fixedDocumentName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureBlock_CreateRequest(self: *const T, requestId: ?[*:0]const u16, signatureRequest: ?*?*IXpsSignatureRequest) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureBlock.VTable, self.vtable).CreateRequest(@ptrCast(*const IXpsSignatureBlock, self), requestId, signatureRequest);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsSignatureRequestCollection_Value = @import("../zig.zig").Guid.initString("f0253e68-9f19-412e-9b4f-54d3b0ac6cd9");
pub const IID_IXpsSignatureRequestCollection = &IID_IXpsSignatureRequestCollection_Value;
pub const IXpsSignatureRequestCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IXpsSignatureRequestCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IXpsSignatureRequestCollection,
            index: u32,
            signatureRequest: ?*?*IXpsSignatureRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IXpsSignatureRequestCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureRequestCollection_GetCount(self: *const T, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureRequestCollection.VTable, self.vtable).GetCount(@ptrCast(*const IXpsSignatureRequestCollection, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureRequestCollection_GetAt(self: *const T, index: u32, signatureRequest: ?*?*IXpsSignatureRequest) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureRequestCollection.VTable, self.vtable).GetAt(@ptrCast(*const IXpsSignatureRequestCollection, self), index, signatureRequest);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureRequestCollection_RemoveAt(self: *const T, index: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureRequestCollection.VTable, self.vtable).RemoveAt(@ptrCast(*const IXpsSignatureRequestCollection, self), index);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsSignatureRequest_Value = @import("../zig.zig").Guid.initString("ac58950b-7208-4b2d-b2c4-951083d3b8eb");
pub const IID_IXpsSignatureRequest = &IID_IXpsSignatureRequest_Value;
pub const IXpsSignatureRequest = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIntent: fn(
            self: *const IXpsSignatureRequest,
            intent: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIntent: fn(
            self: *const IXpsSignatureRequest,
            intent: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestedSigner: fn(
            self: *const IXpsSignatureRequest,
            signerName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRequestedSigner: fn(
            self: *const IXpsSignatureRequest,
            signerName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestSignByDate: fn(
            self: *const IXpsSignatureRequest,
            dateString: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRequestSignByDate: fn(
            self: *const IXpsSignatureRequest,
            dateString: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSigningLocale: fn(
            self: *const IXpsSignatureRequest,
            place: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSigningLocale: fn(
            self: *const IXpsSignatureRequest,
            place: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpotLocation: fn(
            self: *const IXpsSignatureRequest,
            pageIndex: ?*i32,
            pagePartName: ?*?*IOpcPartUri,
            x: ?*f32,
            y: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSpotLocation: fn(
            self: *const IXpsSignatureRequest,
            pageIndex: i32,
            x: f32,
            y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestId: fn(
            self: *const IXpsSignatureRequest,
            requestId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignature: fn(
            self: *const IXpsSignatureRequest,
            signature: ?*?*IXpsSignature,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureRequest_GetIntent(self: *const T, intent: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureRequest.VTable, self.vtable).GetIntent(@ptrCast(*const IXpsSignatureRequest, self), intent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureRequest_SetIntent(self: *const T, intent: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureRequest.VTable, self.vtable).SetIntent(@ptrCast(*const IXpsSignatureRequest, self), intent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureRequest_GetRequestedSigner(self: *const T, signerName: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureRequest.VTable, self.vtable).GetRequestedSigner(@ptrCast(*const IXpsSignatureRequest, self), signerName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureRequest_SetRequestedSigner(self: *const T, signerName: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureRequest.VTable, self.vtable).SetRequestedSigner(@ptrCast(*const IXpsSignatureRequest, self), signerName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureRequest_GetRequestSignByDate(self: *const T, dateString: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureRequest.VTable, self.vtable).GetRequestSignByDate(@ptrCast(*const IXpsSignatureRequest, self), dateString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureRequest_SetRequestSignByDate(self: *const T, dateString: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureRequest.VTable, self.vtable).SetRequestSignByDate(@ptrCast(*const IXpsSignatureRequest, self), dateString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureRequest_GetSigningLocale(self: *const T, place: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureRequest.VTable, self.vtable).GetSigningLocale(@ptrCast(*const IXpsSignatureRequest, self), place);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureRequest_SetSigningLocale(self: *const T, place: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureRequest.VTable, self.vtable).SetSigningLocale(@ptrCast(*const IXpsSignatureRequest, self), place);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureRequest_GetSpotLocation(self: *const T, pageIndex: ?*i32, pagePartName: ?*?*IOpcPartUri, x: ?*f32, y: ?*f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureRequest.VTable, self.vtable).GetSpotLocation(@ptrCast(*const IXpsSignatureRequest, self), pageIndex, pagePartName, x, y);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureRequest_SetSpotLocation(self: *const T, pageIndex: i32, x: f32, y: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureRequest.VTable, self.vtable).SetSpotLocation(@ptrCast(*const IXpsSignatureRequest, self), pageIndex, x, y);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureRequest_GetRequestId(self: *const T, requestId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureRequest.VTable, self.vtable).GetRequestId(@ptrCast(*const IXpsSignatureRequest, self), requestId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureRequest_GetSignature(self: *const T, signature: ?*?*IXpsSignature) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureRequest.VTable, self.vtable).GetSignature(@ptrCast(*const IXpsSignatureRequest, self), signature);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsSignatureManager_Value = @import("../zig.zig").Guid.initString("d3e8d338-fdc4-4afc-80b5-d532a1782ee1");
pub const IID_IXpsSignatureManager = &IID_IXpsSignatureManager_Value;
pub const IXpsSignatureManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LoadPackageFile: fn(
            self: *const IXpsSignatureManager,
            fileName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadPackageStream: fn(
            self: *const IXpsSignatureManager,
            stream: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Sign: fn(
            self: *const IXpsSignatureManager,
            signOptions: ?*IXpsSigningOptions,
            x509Certificate: ?*const CERT_CONTEXT,
            signature: ?*?*IXpsSignature,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureOriginPartName: fn(
            self: *const IXpsSignatureManager,
            signatureOriginPartName: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignatureOriginPartName: fn(
            self: *const IXpsSignatureManager,
            signatureOriginPartName: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatures: fn(
            self: *const IXpsSignatureManager,
            signatures: ?*?*IXpsSignatureCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddSignatureBlock: fn(
            self: *const IXpsSignatureManager,
            partName: ?*IOpcPartUri,
            fixedDocumentIndex: u32,
            signatureBlock: ?*?*IXpsSignatureBlock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureBlocks: fn(
            self: *const IXpsSignatureManager,
            signatureBlocks: ?*?*IXpsSignatureBlockCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSigningOptions: fn(
            self: *const IXpsSignatureManager,
            signingOptions: ?*?*IXpsSigningOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SavePackageToFile: fn(
            self: *const IXpsSignatureManager,
            fileName: ?[*:0]const u16,
            securityAttributes: ?*SECURITY_ATTRIBUTES,
            flagsAndAttributes: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SavePackageToStream: fn(
            self: *const IXpsSignatureManager,
            stream: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureManager_LoadPackageFile(self: *const T, fileName: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureManager.VTable, self.vtable).LoadPackageFile(@ptrCast(*const IXpsSignatureManager, self), fileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureManager_LoadPackageStream(self: *const T, stream: ?*IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureManager.VTable, self.vtable).LoadPackageStream(@ptrCast(*const IXpsSignatureManager, self), stream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureManager_Sign(self: *const T, signOptions: ?*IXpsSigningOptions, x509Certificate: ?*const CERT_CONTEXT, signature: ?*?*IXpsSignature) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureManager.VTable, self.vtable).Sign(@ptrCast(*const IXpsSignatureManager, self), signOptions, x509Certificate, signature);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureManager_GetSignatureOriginPartName(self: *const T, signatureOriginPartName: ?*?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureManager.VTable, self.vtable).GetSignatureOriginPartName(@ptrCast(*const IXpsSignatureManager, self), signatureOriginPartName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureManager_SetSignatureOriginPartName(self: *const T, signatureOriginPartName: ?*IOpcPartUri) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureManager.VTable, self.vtable).SetSignatureOriginPartName(@ptrCast(*const IXpsSignatureManager, self), signatureOriginPartName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureManager_GetSignatures(self: *const T, signatures: ?*?*IXpsSignatureCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureManager.VTable, self.vtable).GetSignatures(@ptrCast(*const IXpsSignatureManager, self), signatures);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureManager_AddSignatureBlock(self: *const T, partName: ?*IOpcPartUri, fixedDocumentIndex: u32, signatureBlock: ?*?*IXpsSignatureBlock) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureManager.VTable, self.vtable).AddSignatureBlock(@ptrCast(*const IXpsSignatureManager, self), partName, fixedDocumentIndex, signatureBlock);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureManager_GetSignatureBlocks(self: *const T, signatureBlocks: ?*?*IXpsSignatureBlockCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureManager.VTable, self.vtable).GetSignatureBlocks(@ptrCast(*const IXpsSignatureManager, self), signatureBlocks);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureManager_CreateSigningOptions(self: *const T, signingOptions: ?*?*IXpsSigningOptions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureManager.VTable, self.vtable).CreateSigningOptions(@ptrCast(*const IXpsSignatureManager, self), signingOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureManager_SavePackageToFile(self: *const T, fileName: ?[*:0]const u16, securityAttributes: ?*SECURITY_ATTRIBUTES, flagsAndAttributes: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureManager.VTable, self.vtable).SavePackageToFile(@ptrCast(*const IXpsSignatureManager, self), fileName, securityAttributes, flagsAndAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXpsSignatureManager_SavePackageToStream(self: *const T, stream: ?*IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXpsSignatureManager.VTable, self.vtable).SavePackageToStream(@ptrCast(*const IXpsSignatureManager, self), stream);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (12)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "WINSPOOL" fn DeviceCapabilitiesA(
    pDevice: ?[*:0]const u8,
    pPort: ?[*:0]const u8,
    fwCapability: DEVICE_CAPABILITIES,
    pOutput: ?PSTR,
    pDevMode: ?*const DEVMODEA,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "WINSPOOL" fn DeviceCapabilitiesW(
    pDevice: ?[*:0]const u16,
    pPort: ?[*:0]const u16,
    fwCapability: DEVICE_CAPABILITIES,
    pOutput: ?PWSTR,
    pDevMode: ?*const DEVMODEW,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn Escape(
    hdc: ?HDC,
    iEscape: i32,
    cjIn: i32,
    // TODO: what to do with BytesParamIndex 2?
    pvIn: ?[*:0]const u8,
    pvOut: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn ExtEscape(
    hdc: ?HDC,
    iEscape: i32,
    cjInput: i32,
    // TODO: what to do with BytesParamIndex 2?
    lpInData: ?[*:0]const u8,
    cjOutput: i32,
    // TODO: what to do with BytesParamIndex 4?
    lpOutData: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn StartDocA(
    hdc: ?HDC,
    lpdi: ?*const DOCINFOA,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn StartDocW(
    hdc: ?HDC,
    lpdi: ?*const DOCINFOW,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EndDoc(
    hdc: ?HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn StartPage(
    hdc: ?HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn EndPage(
    hdc: ?HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn AbortDoc(
    hdc: ?HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "GDI32" fn SetAbortProc(
    hdc: ?HDC,
    proc: ?ABORTPROC,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "USER32" fn PrintWindow(
    hwnd: ?HWND,
    hdcBlt: ?HDC,
    nFlags: PRINT_WINDOW_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (3)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const DOCINFO = thismodule.DOCINFOA;
        pub const DeviceCapabilities = thismodule.DeviceCapabilitiesA;
        pub const StartDoc = thismodule.StartDocA;
    },
    .wide => struct {
        pub const DOCINFO = thismodule.DOCINFOW;
        pub const DeviceCapabilities = thismodule.DeviceCapabilitiesW;
        pub const StartDoc = thismodule.StartDocW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const DOCINFO = *opaque{};
        pub const DeviceCapabilities = *opaque{};
        pub const StartDoc = *opaque{};
    } else struct {
        pub const DOCINFO = @compileError("'DOCINFO' requires that UNICODE be set to true or false in the root module");
        pub const DeviceCapabilities = @compileError("'DeviceCapabilities' requires that UNICODE be set to true or false in the root module");
        pub const StartDoc = @compileError("'StartDoc' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (24)
//--------------------------------------------------------------------------------
const BOOL = @import("../foundation.zig").BOOL;
const CERT_CONTEXT = @import("../security/cryptography.zig").CERT_CONTEXT;
const DEVMODEA = @import("../graphics/gdi.zig").DEVMODEA;
const DEVMODEW = @import("../graphics/gdi.zig").DEVMODEW;
const HDC = @import("../graphics/gdi.zig").HDC;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IOpcCertificateEnumerator = @import("../storage/packaging/opc.zig").IOpcCertificateEnumerator;
const IOpcCertificateSet = @import("../storage/packaging/opc.zig").IOpcCertificateSet;
const IOpcPartUri = @import("../storage/packaging/opc.zig").IOpcPartUri;
const IOpcSignatureCustomObjectEnumerator = @import("../storage/packaging/opc.zig").IOpcSignatureCustomObjectEnumerator;
const IOpcSignatureCustomObjectSet = @import("../storage/packaging/opc.zig").IOpcSignatureCustomObjectSet;
const IOpcSignatureReferenceEnumerator = @import("../storage/packaging/opc.zig").IOpcSignatureReferenceEnumerator;
const IOpcSignatureReferenceSet = @import("../storage/packaging/opc.zig").IOpcSignatureReferenceSet;
const ISequentialStream = @import("../system/com.zig").ISequentialStream;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const IUri = @import("../system/com.zig").IUri;
const OPC_SIGNATURE_TIME_FORMAT = @import("../storage/packaging/opc.zig").OPC_SIGNATURE_TIME_FORMAT;
const POINT = @import("../foundation.zig").POINT;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const SECURITY_ATTRIBUTES = @import("../security.zig").SECURITY_ATTRIBUTES;
const SYSTEMTIME = @import("../foundation.zig").SYSTEMTIME;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "ABORTPROC")) { _ = ABORTPROC; }

    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
//--------------------------------------------------------------------------------
// Section: SubModules (1)
//--------------------------------------------------------------------------------
pub const printing = @import("xps/printing.zig");
