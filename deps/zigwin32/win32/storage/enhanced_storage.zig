//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (200)
//--------------------------------------------------------------------------------
pub const GUID_DEVINTERFACE_ENHANCED_STORAGE_SILO = Guid.initString("3897f6a4-fd35-4bc8-a0b7-5dbba36adafa");
pub const WPD_CATEGORY_ENHANCED_STORAGE = Guid.initString("91248166-b832-4ad4-baa4-7ca0b6b2798c");
pub const ENHANCED_STORAGE_AUTHN_STATE_UNKNOWN = @as(u32, 0);
pub const ENHANCED_STORAGE_AUTHN_STATE_NO_AUTHENTICATION_REQUIRED = @as(u32, 1);
pub const ENHANCED_STORAGE_AUTHN_STATE_NOT_AUTHENTICATED = @as(u32, 2);
pub const ENHANCED_STORAGE_AUTHN_STATE_AUTHENTICATED = @as(u32, 3);
pub const ENHANCED_STORAGE_AUTHN_STATE_AUTHENTICATION_DENIED = @as(u32, 2147483649);
pub const ENHANCED_STORAGE_AUTHN_STATE_DEVICE_ERROR = @as(u32, 2147483650);
pub const CERT_TYPE_EMPTY = @as(u32, 0);
pub const CERT_TYPE_ASCm = @as(u32, 1);
pub const CERT_TYPE_PCp = @as(u32, 2);
pub const CERT_TYPE_ASCh = @as(u32, 3);
pub const CERT_TYPE_HCh = @as(u32, 4);
pub const CERT_TYPE_SIGNER = @as(u32, 6);
pub const CERT_VALIDATION_POLICY_RESERVED = @as(u32, 0);
pub const CERT_VALIDATION_POLICY_NONE = @as(u32, 1);
pub const CERT_VALIDATION_POLICY_BASIC = @as(u32, 2);
pub const CERT_VALIDATION_POLICY_EXTENDED = @as(u32, 3);
pub const CERT_CAPABILITY_HASH_ALG = @as(u32, 1);
pub const CERT_CAPABILITY_ASYMMETRIC_KEY_CRYPTOGRAPHY = @as(u32, 2);
pub const CERT_CAPABILITY_SIGNATURE_ALG = @as(u32, 3);
pub const CERT_CAPABILITY_CERTIFICATE_SUPPORT = @as(u32, 4);
pub const CERT_CAPABILITY_OPTIONAL_FEATURES = @as(u32, 5);
pub const CERT_MAX_CAPABILITY = @as(u32, 255);
pub const AUDIO_CHANNELCOUNT_MONO = @as(u32, 1);
pub const AUDIO_CHANNELCOUNT_STEREO = @as(u32, 2);
pub const CREATOROPENWITHUIOPTION_HIDDEN = @as(u32, 0);
pub const CREATOROPENWITHUIOPTION_VISIBLE = @as(u32, 1);
pub const ISDEFAULTSAVE_NONE = @as(u32, 0);
pub const ISDEFAULTSAVE_OWNER = @as(u32, 1);
pub const ISDEFAULTSAVE_NONOWNER = @as(u32, 2);
pub const ISDEFAULTSAVE_BOTH = @as(u32, 3);
pub const FILEOFFLINEAVAILABILITYSTATUS_NOTAVAILABLEOFFLINE = @as(u32, 0);
pub const FILEOFFLINEAVAILABILITYSTATUS_PARTIAL = @as(u32, 1);
pub const FILEOFFLINEAVAILABILITYSTATUS_COMPLETE = @as(u32, 2);
pub const FILEOFFLINEAVAILABILITYSTATUS_COMPLETE_PINNED = @as(u32, 3);
pub const FILEOFFLINEAVAILABILITYSTATUS_EXCLUDED = @as(u32, 4);
pub const FILEOFFLINEAVAILABILITYSTATUS_FOLDER_EMPTY = @as(u32, 5);
pub const FLAGSTATUS_NOTFLAGGED = @as(i32, 0);
pub const FLAGSTATUS_COMPLETED = @as(i32, 1);
pub const FLAGSTATUS_FOLLOWUP = @as(i32, 2);
pub const IMPORTANCE_LOW_MIN = @as(i32, 0);
pub const IMPORTANCE_LOW_SET = @as(i32, 1);
pub const IMPORTANCE_LOW_MAX = @as(i32, 1);
pub const IMPORTANCE_NORMAL_MIN = @as(i32, 2);
pub const IMPORTANCE_NORMAL_SET = @as(i32, 3);
pub const IMPORTANCE_NORMAL_MAX = @as(i32, 4);
pub const IMPORTANCE_HIGH_MIN = @as(i32, 5);
pub const IMPORTANCE_HIGH_SET = @as(i32, 5);
pub const IMPORTANCE_HIGH_MAX = @as(i32, 5);
pub const OFFLINEAVAILABILITY_NOT_AVAILABLE = @as(u32, 0);
pub const OFFLINEAVAILABILITY_AVAILABLE = @as(u32, 1);
pub const OFFLINEAVAILABILITY_ALWAYS_AVAILABLE = @as(u32, 2);
pub const OFFLINESTATUS_ONLINE = @as(u32, 0);
pub const OFFLINESTATUS_OFFLINE = @as(u32, 1);
pub const OFFLINESTATUS_OFFLINE_FORCED = @as(u32, 2);
pub const OFFLINESTATUS_OFFLINE_SLOW = @as(u32, 3);
pub const OFFLINESTATUS_OFFLINE_ERROR = @as(u32, 4);
pub const OFFLINESTATUS_OFFLINE_ITEM_VERSION_CONFLICT = @as(u32, 5);
pub const OFFLINESTATUS_OFFLINE_SUSPENDED = @as(u32, 6);
pub const RATING_ONE_STAR_MIN = @as(u32, 1);
pub const RATING_ONE_STAR_SET = @as(u32, 1);
pub const RATING_ONE_STAR_MAX = @as(u32, 12);
pub const RATING_TWO_STARS_MIN = @as(u32, 13);
pub const RATING_TWO_STARS_SET = @as(u32, 25);
pub const RATING_TWO_STARS_MAX = @as(u32, 37);
pub const RATING_THREE_STARS_MIN = @as(u32, 38);
pub const RATING_THREE_STARS_SET = @as(u32, 50);
pub const RATING_THREE_STARS_MAX = @as(u32, 62);
pub const RATING_FOUR_STARS_MIN = @as(u32, 63);
pub const RATING_FOUR_STARS_SET = @as(u32, 75);
pub const RATING_FOUR_STARS_MAX = @as(u32, 87);
pub const RATING_FIVE_STARS_MIN = @as(u32, 88);
pub const RATING_FIVE_STARS_SET = @as(u32, 99);
pub const RATING_FIVE_STARS_MAX = @as(u32, 99);
pub const SHARINGSTATUS_NOTSHARED = @as(u32, 0);
pub const SHARINGSTATUS_SHARED = @as(u32, 1);
pub const SHARINGSTATUS_PRIVATE = @as(u32, 2);
pub const STORAGE_PROVIDER_SHARINGSTATUS_NOTSHARED = @as(u32, 0);
pub const STORAGE_PROVIDER_SHARINGSTATUS_SHARED = @as(u32, 1);
pub const STORAGE_PROVIDER_SHARINGSTATUS_PRIVATE = @as(u32, 2);
pub const STORAGE_PROVIDER_SHARINGSTATUS_PUBLIC = @as(u32, 3);
pub const STORAGE_PROVIDER_SHARINGSTATUS_SHARED_OWNED = @as(u32, 4);
pub const STORAGE_PROVIDER_SHARINGSTATUS_SHARED_COOWNED = @as(u32, 5);
pub const STORAGE_PROVIDER_SHARINGSTATUS_PUBLIC_OWNED = @as(u32, 6);
pub const STORAGE_PROVIDER_SHARINGSTATUS_PUBLIC_COOWNED = @as(u32, 7);
pub const BLUETOOTH_ADDRESS_TYPE_PUBLIC = @as(u32, 0);
pub const BLUETOOTH_ADDRESS_TYPE_RANDOM = @as(u32, 1);
pub const BLUETOOTH_CACHE_MODE_CACHED = @as(u32, 0);
pub const BLUETOOTH_CACHED_MODE_UNCACHED = @as(u32, 1);
pub const PLAYBACKSTATE_UNKNOWN = @as(u32, 0);
pub const PLAYBACKSTATE_STOPPED = @as(u32, 1);
pub const PLAYBACKSTATE_PLAYING = @as(u32, 2);
pub const PLAYBACKSTATE_TRANSITIONING = @as(u32, 3);
pub const PLAYBACKSTATE_PAUSED = @as(u32, 4);
pub const PLAYBACKSTATE_RECORDINGPAUSED = @as(u32, 5);
pub const PLAYBACKSTATE_RECORDING = @as(u32, 6);
pub const PLAYBACKSTATE_NOMEDIA = @as(u32, 7);
pub const LINK_STATUS_RESOLVED = @as(i32, 1);
pub const LINK_STATUS_BROKEN = @as(i32, 2);
pub const PHOTO_CONTRAST_NORMAL = @as(u32, 0);
pub const PHOTO_CONTRAST_SOFT = @as(u32, 1);
pub const PHOTO_CONTRAST_HARD = @as(u32, 2);
pub const PHOTO_EXPOSUREPROGRAM_UNKNOWN = @as(u32, 0);
pub const PHOTO_EXPOSUREPROGRAM_MANUAL = @as(u32, 1);
pub const PHOTO_EXPOSUREPROGRAM_NORMAL = @as(u32, 2);
pub const PHOTO_EXPOSUREPROGRAM_APERTURE = @as(u32, 3);
pub const PHOTO_EXPOSUREPROGRAM_SHUTTER = @as(u32, 4);
pub const PHOTO_EXPOSUREPROGRAM_CREATIVE = @as(u32, 5);
pub const PHOTO_EXPOSUREPROGRAM_ACTION = @as(u32, 6);
pub const PHOTO_EXPOSUREPROGRAM_PORTRAIT = @as(u32, 7);
pub const PHOTO_EXPOSUREPROGRAM_LANDSCAPE = @as(u32, 8);
pub const PHOTO_FLASH_NONE = @as(u32, 0);
pub const PHOTO_FLASH_FLASH = @as(u32, 1);
pub const PHOTO_FLASH_WITHOUTSTROBE = @as(u32, 5);
pub const PHOTO_FLASH_WITHSTROBE = @as(u32, 7);
pub const PHOTO_FLASH_FLASH_COMPULSORY = @as(u32, 9);
pub const PHOTO_FLASH_FLASH_COMPULSORY_NORETURNLIGHT = @as(u32, 13);
pub const PHOTO_FLASH_FLASH_COMPULSORY_RETURNLIGHT = @as(u32, 15);
pub const PHOTO_FLASH_NONE_COMPULSORY = @as(u32, 16);
pub const PHOTO_FLASH_NONE_AUTO = @as(u32, 24);
pub const PHOTO_FLASH_FLASH_AUTO = @as(u32, 25);
pub const PHOTO_FLASH_FLASH_AUTO_NORETURNLIGHT = @as(u32, 29);
pub const PHOTO_FLASH_FLASH_AUTO_RETURNLIGHT = @as(u32, 31);
pub const PHOTO_FLASH_NOFUNCTION = @as(u32, 32);
pub const PHOTO_FLASH_FLASH_REDEYE = @as(u32, 65);
pub const PHOTO_FLASH_FLASH_REDEYE_NORETURNLIGHT = @as(u32, 69);
pub const PHOTO_FLASH_FLASH_REDEYE_RETURNLIGHT = @as(u32, 71);
pub const PHOTO_FLASH_FLASH_COMPULSORY_REDEYE = @as(u32, 73);
pub const PHOTO_FLASH_FLASH_COMPULSORY_REDEYE_NORETURNLIGHT = @as(u32, 77);
pub const PHOTO_FLASH_FLASH_COMPULSORY_REDEYE_RETURNLIGHT = @as(u32, 79);
pub const PHOTO_FLASH_FLASH_AUTO_REDEYE = @as(u32, 89);
pub const PHOTO_FLASH_FLASH_AUTO_REDEYE_NORETURNLIGHT = @as(u32, 93);
pub const PHOTO_FLASH_FLASH_AUTO_REDEYE_RETURNLIGHT = @as(u32, 95);
pub const PHOTO_GAINCONTROL_NONE = @as(f64, 0);
pub const PHOTO_GAINCONTROL_LOWGAINUP = @as(f64, 1);
pub const PHOTO_GAINCONTROL_HIGHGAINUP = @as(f64, 2);
pub const PHOTO_GAINCONTROL_LOWGAINDOWN = @as(f64, 3);
pub const PHOTO_GAINCONTROL_HIGHGAINDOWN = @as(f64, 4);
pub const PHOTO_LIGHTSOURCE_UNKNOWN = @as(u32, 0);
pub const PHOTO_LIGHTSOURCE_DAYLIGHT = @as(u32, 1);
pub const PHOTO_LIGHTSOURCE_FLUORESCENT = @as(u32, 2);
pub const PHOTO_LIGHTSOURCE_TUNGSTEN = @as(u32, 3);
pub const PHOTO_LIGHTSOURCE_STANDARD_A = @as(u32, 17);
pub const PHOTO_LIGHTSOURCE_STANDARD_B = @as(u32, 18);
pub const PHOTO_LIGHTSOURCE_STANDARD_C = @as(u32, 19);
pub const PHOTO_LIGHTSOURCE_D55 = @as(u32, 20);
pub const PHOTO_LIGHTSOURCE_D65 = @as(u32, 21);
pub const PHOTO_LIGHTSOURCE_D75 = @as(u32, 22);
pub const PHOTO_PROGRAMMODE_NOTDEFINED = @as(u32, 0);
pub const PHOTO_PROGRAMMODE_MANUAL = @as(u32, 1);
pub const PHOTO_PROGRAMMODE_NORMAL = @as(u32, 2);
pub const PHOTO_PROGRAMMODE_APERTURE = @as(u32, 3);
pub const PHOTO_PROGRAMMODE_SHUTTER = @as(u32, 4);
pub const PHOTO_PROGRAMMODE_CREATIVE = @as(u32, 5);
pub const PHOTO_PROGRAMMODE_ACTION = @as(u32, 6);
pub const PHOTO_PROGRAMMODE_PORTRAIT = @as(u32, 7);
pub const PHOTO_PROGRAMMODE_LANDSCAPE = @as(u32, 8);
pub const PHOTO_SATURATION_NORMAL = @as(u32, 0);
pub const PHOTO_SATURATION_LOW = @as(u32, 1);
pub const PHOTO_SATURATION_HIGH = @as(u32, 2);
pub const PHOTO_SHARPNESS_NORMAL = @as(u32, 0);
pub const PHOTO_SHARPNESS_SOFT = @as(u32, 1);
pub const PHOTO_SHARPNESS_HARD = @as(u32, 2);
pub const PHOTO_WHITEBALANCE_AUTO = @as(u32, 0);
pub const PHOTO_WHITEBALANCE_MANUAL = @as(u32, 1);
pub const APPUSERMODEL_STARTPINOPTION_DEFAULT = @as(u32, 0);
pub const APPUSERMODEL_STARTPINOPTION_NOPINONINSTALL = @as(u32, 1);
pub const APPUSERMODEL_STARTPINOPTION_USERPINNED = @as(u32, 2);
pub const SYNC_HANDLERTYPE_OTHER = @as(u32, 0);
pub const SYNC_HANDLERTYPE_PROGRAMS = @as(u32, 1);
pub const SYNC_HANDLERTYPE_DEVICES = @as(u32, 2);
pub const SYNC_HANDLERTYPE_FOLDERS = @as(u32, 3);
pub const SYNC_HANDLERTYPE_WEBSERVICES = @as(u32, 4);
pub const SYNC_HANDLERTYPE_COMPUTERS = @as(u32, 5);
pub const SYNC_STATE_NOTSETUP = @as(u32, 0);
pub const SYNC_STATE_SYNCNOTRUN = @as(u32, 1);
pub const SYNC_STATE_IDLE = @as(u32, 2);
pub const SYNC_STATE_ERROR = @as(u32, 3);
pub const SYNC_STATE_PENDING = @as(u32, 4);
pub const SYNC_STATE_SYNCING = @as(u32, 5);
pub const ACT_AUTHORIZE_ON_RESUME = @as(u32, 1);
pub const ACT_AUTHORIZE_ON_SESSION_UNLOCK = @as(u32, 2);
pub const ACT_UNAUTHORIZE_ON_SUSPEND = @as(u32, 1);
pub const ACT_UNAUTHORIZE_ON_SESSION_LOCK = @as(u32, 2);
pub const ES_RESERVED_COM_ERROR_START = @as(u32, 0);
pub const ES_RESERVED_COM_ERROR_END = @as(u32, 511);
pub const ES_GENERAL_ERROR_START = @as(u32, 512);
pub const ES_GENERAL_ERROR_END = @as(u32, 1023);
pub const ES_AUTHN_ERROR_START = @as(u32, 1024);
pub const ES_AUTHN_ERROR_END = @as(u32, 1279);
pub const ES_RESERVED_SILO_ERROR_START = @as(u32, 1280);
pub const ES_RESERVED_SILO_ERROR_END = @as(u32, 4095);
pub const ES_PW_SILO_ERROR_START = @as(u32, 4352);
pub const ES_PW_SILO_ERROR_END = @as(u32, 4607);
pub const ES_RESERVED_SILO_SPECIFIC_ERROR_START = @as(u32, 4608);
pub const ES_RESERVED_SILO_SPECIFIC_ERROR_END = @as(u32, 49151);
pub const ES_VENDOR_ERROR_START = @as(u32, 49152);
pub const ES_VENDOR_ERROR_END = @as(u32, 65535);
pub const FACILITY_ENHANCED_STORAGE = @as(u32, 4);

//--------------------------------------------------------------------------------
// Section: Types (14)
//--------------------------------------------------------------------------------
pub const ENHANCED_STORAGE_PASSWORD_SILO_INFORMATION = extern struct {
    CurrentAdminFailures: u8,
    CurrentUserFailures: u8,
    TotalUserAuthenticationCount: u32,
    TotalAdminAuthenticationCount: u32,
    FipsCompliant: BOOL,
    SecurityIDAvailable: BOOL,
    InitializeInProgress: BOOL,
    ITMSArmed: BOOL,
    ITMSArmable: BOOL,
    UserCreated: BOOL,
    ResetOnPORDefault: BOOL,
    ResetOnPORCurrent: BOOL,
    MaxAdminFailures: u8,
    MaxUserFailures: u8,
    TimeToCompleteInitialization: u32,
    TimeRemainingToCompleteInitialization: u32,
    MinTimeToAuthenticate: u32,
    MaxAdminPasswordSize: u8,
    MinAdminPasswordSize: u8,
    MaxAdminHintSize: u8,
    MaxUserPasswordSize: u8,
    MinUserPasswordSize: u8,
    MaxUserHintSize: u8,
    MaxUserNameSize: u8,
    MaxSiloNameSize: u8,
    MaxChallengeSize: u16,
};

const CLSID_EnumEnhancedStorageACT_Value = @import("../zig.zig").Guid.initString("fe841493-835c-4fa3-b6cc-b4b2d4719848");
pub const CLSID_EnumEnhancedStorageACT = &CLSID_EnumEnhancedStorageACT_Value;

const CLSID_EnhancedStorageACT_Value = @import("../zig.zig").Guid.initString("af076a15-2ece-4ad4-bb21-29f040e176d8");
pub const CLSID_EnhancedStorageACT = &CLSID_EnhancedStorageACT_Value;

const CLSID_EnhancedStorageSilo_Value = @import("../zig.zig").Guid.initString("cb25220c-76c7-4fee-842b-f3383cd022bc");
pub const CLSID_EnhancedStorageSilo = &CLSID_EnhancedStorageSilo_Value;

const CLSID_EnhancedStorageSiloAction_Value = @import("../zig.zig").Guid.initString("886d29dd-b506-466b-9fbf-b44ff383fb3f");
pub const CLSID_EnhancedStorageSiloAction = &CLSID_EnhancedStorageSiloAction_Value;

pub const ACT_AUTHORIZATION_STATE = extern struct {
    ulState: u32,
};

pub const SILO_INFO = extern struct {
    ulSTID: u32,
    SpecificationMajor: u8,
    SpecificationMinor: u8,
    ImplementationMajor: u8,
    ImplementationMinor: u8,
    type: u8,
    capabilities: u8,
};

pub const ACT_AUTHORIZATION_STATE_VALUE = enum(i32) {
    UNAUTHORIZED = 0,
    AUTHORIZED = 1,
};
pub const ACT_UNAUTHORIZED = ACT_AUTHORIZATION_STATE_VALUE.UNAUTHORIZED;
pub const ACT_AUTHORIZED = ACT_AUTHORIZATION_STATE_VALUE.AUTHORIZED;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumEnhancedStorageACT_Value = @import("../zig.zig").Guid.initString("09b224bd-1335-4631-a7ff-cfd3a92646d7");
pub const IID_IEnumEnhancedStorageACT = &IID_IEnumEnhancedStorageACT_Value;
pub const IEnumEnhancedStorageACT = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetACTs: fn(
            self: *const IEnumEnhancedStorageACT,
            pppIEnhancedStorageACTs: [*]?*?*IEnhancedStorageACT,
            pcEnhancedStorageACTs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMatchingACT: fn(
            self: *const IEnumEnhancedStorageACT,
            szVolume: ?[*:0]const u16,
            ppIEnhancedStorageACT: ?*?*IEnhancedStorageACT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumEnhancedStorageACT_GetACTs(self: *const T, pppIEnhancedStorageACTs: [*]?*?*IEnhancedStorageACT, pcEnhancedStorageACTs: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumEnhancedStorageACT.VTable, self.vtable).GetACTs(@ptrCast(*const IEnumEnhancedStorageACT, self), pppIEnhancedStorageACTs, pcEnhancedStorageACTs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumEnhancedStorageACT_GetMatchingACT(self: *const T, szVolume: ?[*:0]const u16, ppIEnhancedStorageACT: ?*?*IEnhancedStorageACT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumEnhancedStorageACT.VTable, self.vtable).GetMatchingACT(@ptrCast(*const IEnumEnhancedStorageACT, self), szVolume, ppIEnhancedStorageACT);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnhancedStorageACT_Value = @import("../zig.zig").Guid.initString("6e7781f4-e0f2-4239-b976-a01abab52930");
pub const IID_IEnhancedStorageACT = &IID_IEnhancedStorageACT_Value;
pub const IEnhancedStorageACT = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Authorize: fn(
            self: *const IEnhancedStorageACT,
            hwndParent: u32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unauthorize: fn(
            self: *const IEnhancedStorageACT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAuthorizationState: fn(
            self: *const IEnhancedStorageACT,
            pState: ?*ACT_AUTHORIZATION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMatchingVolume: fn(
            self: *const IEnhancedStorageACT,
            ppwszVolume: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUniqueIdentity: fn(
            self: *const IEnhancedStorageACT,
            ppwszIdentity: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSilos: fn(
            self: *const IEnhancedStorageACT,
            pppIEnhancedStorageSilos: [*]?*?*IEnhancedStorageSilo,
            pcEnhancedStorageSilos: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT_Authorize(self: *const T, hwndParent: u32, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT.VTable, self.vtable).Authorize(@ptrCast(*const IEnhancedStorageACT, self), hwndParent, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT_Unauthorize(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT.VTable, self.vtable).Unauthorize(@ptrCast(*const IEnhancedStorageACT, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT_GetAuthorizationState(self: *const T, pState: ?*ACT_AUTHORIZATION_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT.VTable, self.vtable).GetAuthorizationState(@ptrCast(*const IEnhancedStorageACT, self), pState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT_GetMatchingVolume(self: *const T, ppwszVolume: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT.VTable, self.vtable).GetMatchingVolume(@ptrCast(*const IEnhancedStorageACT, self), ppwszVolume);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT_GetUniqueIdentity(self: *const T, ppwszIdentity: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT.VTable, self.vtable).GetUniqueIdentity(@ptrCast(*const IEnhancedStorageACT, self), ppwszIdentity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT_GetSilos(self: *const T, pppIEnhancedStorageSilos: [*]?*?*IEnhancedStorageSilo, pcEnhancedStorageSilos: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT.VTable, self.vtable).GetSilos(@ptrCast(*const IEnhancedStorageACT, self), pppIEnhancedStorageSilos, pcEnhancedStorageSilos);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IEnhancedStorageACT2_Value = @import("../zig.zig").Guid.initString("4da57d2e-8eb3-41f6-a07e-98b52b88242b");
pub const IID_IEnhancedStorageACT2 = &IID_IEnhancedStorageACT2_Value;
pub const IEnhancedStorageACT2 = extern struct {
    pub const VTable = extern struct {
        base: IEnhancedStorageACT.VTable,
        GetDeviceName: fn(
            self: *const IEnhancedStorageACT2,
            ppwszDeviceName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDeviceRemovable: fn(
            self: *const IEnhancedStorageACT2,
            pIsDeviceRemovable: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IEnhancedStorageACT.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT2_GetDeviceName(self: *const T, ppwszDeviceName: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT2.VTable, self.vtable).GetDeviceName(@ptrCast(*const IEnhancedStorageACT2, self), ppwszDeviceName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT2_IsDeviceRemovable(self: *const T, pIsDeviceRemovable: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT2.VTable, self.vtable).IsDeviceRemovable(@ptrCast(*const IEnhancedStorageACT2, self), pIsDeviceRemovable);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnhancedStorageACT3_Value = @import("../zig.zig").Guid.initString("022150a1-113d-11df-bb61-001aa01bbc58");
pub const IID_IEnhancedStorageACT3 = &IID_IEnhancedStorageACT3_Value;
pub const IEnhancedStorageACT3 = extern struct {
    pub const VTable = extern struct {
        base: IEnhancedStorageACT2.VTable,
        UnauthorizeEx: fn(
            self: *const IEnhancedStorageACT3,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsQueueFrozen: fn(
            self: *const IEnhancedStorageACT3,
            pIsQueueFrozen: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShellExtSupport: fn(
            self: *const IEnhancedStorageACT3,
            pShellExtSupport: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IEnhancedStorageACT2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT3_UnauthorizeEx(self: *const T, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT3.VTable, self.vtable).UnauthorizeEx(@ptrCast(*const IEnhancedStorageACT3, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT3_IsQueueFrozen(self: *const T, pIsQueueFrozen: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT3.VTable, self.vtable).IsQueueFrozen(@ptrCast(*const IEnhancedStorageACT3, self), pIsQueueFrozen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT3_GetShellExtSupport(self: *const T, pShellExtSupport: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT3.VTable, self.vtable).GetShellExtSupport(@ptrCast(*const IEnhancedStorageACT3, self), pShellExtSupport);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnhancedStorageSilo_Value = @import("../zig.zig").Guid.initString("5aef78c6-2242-4703-bf49-44b29357a359");
pub const IID_IEnhancedStorageSilo = &IID_IEnhancedStorageSilo_Value;
pub const IEnhancedStorageSilo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInfo: fn(
            self: *const IEnhancedStorageSilo,
            pSiloInfo: ?*SILO_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetActions: fn(
            self: *const IEnhancedStorageSilo,
            pppIEnhancedStorageSiloActions: [*]?*?*IEnhancedStorageSiloAction,
            pcEnhancedStorageSiloActions: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendCommand: fn(
            self: *const IEnhancedStorageSilo,
            Command: u8,
            pbCommandBuffer: [*:0]u8,
            cbCommandBuffer: u32,
            pbResponseBuffer: [*:0]u8,
            pcbResponseBuffer: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPortableDevice: fn(
            self: *const IEnhancedStorageSilo,
            ppIPortableDevice: ?*?*IPortableDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDevicePath: fn(
            self: *const IEnhancedStorageSilo,
            ppwszSiloDevicePath: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageSilo_GetInfo(self: *const T, pSiloInfo: ?*SILO_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageSilo.VTable, self.vtable).GetInfo(@ptrCast(*const IEnhancedStorageSilo, self), pSiloInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageSilo_GetActions(self: *const T, pppIEnhancedStorageSiloActions: [*]?*?*IEnhancedStorageSiloAction, pcEnhancedStorageSiloActions: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageSilo.VTable, self.vtable).GetActions(@ptrCast(*const IEnhancedStorageSilo, self), pppIEnhancedStorageSiloActions, pcEnhancedStorageSiloActions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageSilo_SendCommand(self: *const T, Command: u8, pbCommandBuffer: [*:0]u8, cbCommandBuffer: u32, pbResponseBuffer: [*:0]u8, pcbResponseBuffer: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageSilo.VTable, self.vtable).SendCommand(@ptrCast(*const IEnhancedStorageSilo, self), Command, pbCommandBuffer, cbCommandBuffer, pbResponseBuffer, pcbResponseBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageSilo_GetPortableDevice(self: *const T, ppIPortableDevice: ?*?*IPortableDevice) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageSilo.VTable, self.vtable).GetPortableDevice(@ptrCast(*const IEnhancedStorageSilo, self), ppIPortableDevice);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageSilo_GetDevicePath(self: *const T, ppwszSiloDevicePath: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageSilo.VTable, self.vtable).GetDevicePath(@ptrCast(*const IEnhancedStorageSilo, self), ppwszSiloDevicePath);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnhancedStorageSiloAction_Value = @import("../zig.zig").Guid.initString("b6f7f311-206f-4ff8-9c4b-27efee77a86f");
pub const IID_IEnhancedStorageSiloAction = &IID_IEnhancedStorageSiloAction_Value;
pub const IEnhancedStorageSiloAction = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetName: fn(
            self: *const IEnhancedStorageSiloAction,
            ppwszActionName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: fn(
            self: *const IEnhancedStorageSiloAction,
            ppwszActionDescription: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Invoke: fn(
            self: *const IEnhancedStorageSiloAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageSiloAction_GetName(self: *const T, ppwszActionName: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageSiloAction.VTable, self.vtable).GetName(@ptrCast(*const IEnhancedStorageSiloAction, self), ppwszActionName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageSiloAction_GetDescription(self: *const T, ppwszActionDescription: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageSiloAction.VTable, self.vtable).GetDescription(@ptrCast(*const IEnhancedStorageSiloAction, self), ppwszActionDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageSiloAction_Invoke(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageSiloAction.VTable, self.vtable).Invoke(@ptrCast(*const IEnhancedStorageSiloAction, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const HRESULT = @import("../foundation.zig").HRESULT;
const IPortableDevice = @import("../devices/portable_devices.zig").IPortableDevice;
const IUnknown = @import("../system/com.zig").IUnknown;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
