//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (75)
//--------------------------------------------------------------------------------
pub const OFN_SHAREFALLTHROUGH = @as(u32, 2);
pub const OFN_SHARENOWARN = @as(u32, 1);
pub const OFN_SHAREWARN = @as(u32, 0);
pub const CDM_FIRST = @as(u32, 1124);
pub const CDM_LAST = @as(u32, 1224);
pub const CDM_GETSPEC = @as(u32, 1124);
pub const CDM_GETFILEPATH = @as(u32, 1125);
pub const CDM_GETFOLDERPATH = @as(u32, 1126);
pub const CDM_GETFOLDERIDLIST = @as(u32, 1127);
pub const CDM_SETCONTROLTEXT = @as(u32, 1128);
pub const CDM_HIDECONTROL = @as(u32, 1129);
pub const CDM_SETDEFEXT = @as(u32, 1130);
pub const FR_RAW = @as(u32, 131072);
pub const FR_SHOWWRAPAROUND = @as(u32, 262144);
pub const FR_NOWRAPAROUND = @as(u32, 524288);
pub const FR_WRAPAROUND = @as(u32, 1048576);
pub const FRM_FIRST = @as(u32, 1124);
pub const FRM_LAST = @as(u32, 1224);
pub const FRM_SETOPERATIONRESULT = @as(u32, 1124);
pub const FRM_SETOPERATIONRESULTTEXT = @as(u32, 1125);
pub const PS_OPENTYPE_FONTTYPE = @as(u32, 65536);
pub const TT_OPENTYPE_FONTTYPE = @as(u32, 131072);
pub const TYPE1_FONTTYPE = @as(u32, 262144);
pub const SYMBOL_FONTTYPE = @as(u32, 524288);
pub const WM_CHOOSEFONT_GETLOGFONT = @as(u32, 1025);
pub const WM_CHOOSEFONT_SETLOGFONT = @as(u32, 1125);
pub const WM_CHOOSEFONT_SETFLAGS = @as(u32, 1126);
pub const CD_LBSELNOITEMS = @as(i32, -1);
pub const CD_LBSELCHANGE = @as(u32, 0);
pub const CD_LBSELSUB = @as(u32, 1);
pub const CD_LBSELADD = @as(u32, 2);
pub const START_PAGE_GENERAL = @as(u32, 4294967295);
pub const PD_RESULT_CANCEL = @as(u32, 0);
pub const PD_RESULT_PRINT = @as(u32, 1);
pub const PD_RESULT_APPLY = @as(u32, 2);
pub const DN_DEFAULTPRN = @as(u32, 1);
pub const WM_PSD_FULLPAGERECT = @as(u32, 1025);
pub const WM_PSD_MINMARGINRECT = @as(u32, 1026);
pub const WM_PSD_MARGINRECT = @as(u32, 1027);
pub const WM_PSD_GREEKTEXTRECT = @as(u32, 1028);
pub const WM_PSD_ENVSTAMPRECT = @as(u32, 1029);
pub const WM_PSD_YAFULLPAGERECT = @as(u32, 1030);
pub const DLG_COLOR = @as(u32, 10);
pub const COLOR_HUESCROLL = @as(u32, 700);
pub const COLOR_SATSCROLL = @as(u32, 701);
pub const COLOR_LUMSCROLL = @as(u32, 702);
pub const COLOR_HUE = @as(u32, 703);
pub const COLOR_SAT = @as(u32, 704);
pub const COLOR_LUM = @as(u32, 705);
pub const COLOR_RED = @as(u32, 706);
pub const COLOR_GREEN = @as(u32, 707);
pub const COLOR_BLUE = @as(u32, 708);
pub const COLOR_CURRENT = @as(u32, 709);
pub const COLOR_RAINBOW = @as(u32, 710);
pub const COLOR_SAVE = @as(u32, 711);
pub const COLOR_ADD = @as(u32, 712);
pub const COLOR_SOLID = @as(u32, 713);
pub const COLOR_TUNE = @as(u32, 714);
pub const COLOR_SCHEMES = @as(u32, 715);
pub const COLOR_ELEMENT = @as(u32, 716);
pub const COLOR_SAMPLES = @as(u32, 717);
pub const COLOR_PALETTE = @as(u32, 718);
pub const COLOR_MIX = @as(u32, 719);
pub const COLOR_BOX1 = @as(u32, 720);
pub const COLOR_CUSTOM1 = @as(u32, 721);
pub const COLOR_HUEACCEL = @as(u32, 723);
pub const COLOR_SATACCEL = @as(u32, 724);
pub const COLOR_LUMACCEL = @as(u32, 725);
pub const COLOR_REDACCEL = @as(u32, 726);
pub const COLOR_GREENACCEL = @as(u32, 727);
pub const COLOR_BLUEACCEL = @as(u32, 728);
pub const COLOR_SOLID_LEFT = @as(u32, 730);
pub const COLOR_SOLID_RIGHT = @as(u32, 731);
pub const NUM_BASIC_COLORS = @as(u32, 48);
pub const NUM_CUSTOM_COLORS = @as(u32, 16);

//--------------------------------------------------------------------------------
// Section: Types (62)
//--------------------------------------------------------------------------------
pub const COMMON_DLG_ERRORS = enum(u32) {
    CDERR_DIALOGFAILURE = 65535,
    CDERR_GENERALCODES = 0,
    CDERR_STRUCTSIZE = 1,
    CDERR_INITIALIZATION = 2,
    CDERR_NOTEMPLATE = 3,
    CDERR_NOHINSTANCE = 4,
    CDERR_LOADSTRFAILURE = 5,
    CDERR_FINDRESFAILURE = 6,
    CDERR_LOADRESFAILURE = 7,
    CDERR_LOCKRESFAILURE = 8,
    CDERR_MEMALLOCFAILURE = 9,
    CDERR_MEMLOCKFAILURE = 10,
    CDERR_NOHOOK = 11,
    CDERR_REGISTERMSGFAIL = 12,
    PDERR_PRINTERCODES = 4096,
    PDERR_SETUPFAILURE = 4097,
    PDERR_PARSEFAILURE = 4098,
    PDERR_RETDEFFAILURE = 4099,
    PDERR_LOADDRVFAILURE = 4100,
    PDERR_GETDEVMODEFAIL = 4101,
    PDERR_INITFAILURE = 4102,
    PDERR_NODEVICES = 4103,
    PDERR_NODEFAULTPRN = 4104,
    PDERR_DNDMMISMATCH = 4105,
    PDERR_CREATEICFAILURE = 4106,
    PDERR_PRINTERNOTFOUND = 4107,
    PDERR_DEFAULTDIFFERENT = 4108,
    CFERR_CHOOSEFONTCODES = 8192,
    CFERR_NOFONTS = 8193,
    CFERR_MAXLESSTHANMIN = 8194,
    FNERR_FILENAMECODES = 12288,
    FNERR_SUBCLASSFAILURE = 12289,
    FNERR_INVALIDFILENAME = 12290,
    FNERR_BUFFERTOOSMALL = 12291,
    FRERR_FINDREPLACECODES = 16384,
    FRERR_BUFFERLENGTHZERO = 16385,
    CCERR_CHOOSECOLORCODES = 20480,
};
pub const CDERR_DIALOGFAILURE = COMMON_DLG_ERRORS.CDERR_DIALOGFAILURE;
pub const CDERR_GENERALCODES = COMMON_DLG_ERRORS.CDERR_GENERALCODES;
pub const CDERR_STRUCTSIZE = COMMON_DLG_ERRORS.CDERR_STRUCTSIZE;
pub const CDERR_INITIALIZATION = COMMON_DLG_ERRORS.CDERR_INITIALIZATION;
pub const CDERR_NOTEMPLATE = COMMON_DLG_ERRORS.CDERR_NOTEMPLATE;
pub const CDERR_NOHINSTANCE = COMMON_DLG_ERRORS.CDERR_NOHINSTANCE;
pub const CDERR_LOADSTRFAILURE = COMMON_DLG_ERRORS.CDERR_LOADSTRFAILURE;
pub const CDERR_FINDRESFAILURE = COMMON_DLG_ERRORS.CDERR_FINDRESFAILURE;
pub const CDERR_LOADRESFAILURE = COMMON_DLG_ERRORS.CDERR_LOADRESFAILURE;
pub const CDERR_LOCKRESFAILURE = COMMON_DLG_ERRORS.CDERR_LOCKRESFAILURE;
pub const CDERR_MEMALLOCFAILURE = COMMON_DLG_ERRORS.CDERR_MEMALLOCFAILURE;
pub const CDERR_MEMLOCKFAILURE = COMMON_DLG_ERRORS.CDERR_MEMLOCKFAILURE;
pub const CDERR_NOHOOK = COMMON_DLG_ERRORS.CDERR_NOHOOK;
pub const CDERR_REGISTERMSGFAIL = COMMON_DLG_ERRORS.CDERR_REGISTERMSGFAIL;
pub const PDERR_PRINTERCODES = COMMON_DLG_ERRORS.PDERR_PRINTERCODES;
pub const PDERR_SETUPFAILURE = COMMON_DLG_ERRORS.PDERR_SETUPFAILURE;
pub const PDERR_PARSEFAILURE = COMMON_DLG_ERRORS.PDERR_PARSEFAILURE;
pub const PDERR_RETDEFFAILURE = COMMON_DLG_ERRORS.PDERR_RETDEFFAILURE;
pub const PDERR_LOADDRVFAILURE = COMMON_DLG_ERRORS.PDERR_LOADDRVFAILURE;
pub const PDERR_GETDEVMODEFAIL = COMMON_DLG_ERRORS.PDERR_GETDEVMODEFAIL;
pub const PDERR_INITFAILURE = COMMON_DLG_ERRORS.PDERR_INITFAILURE;
pub const PDERR_NODEVICES = COMMON_DLG_ERRORS.PDERR_NODEVICES;
pub const PDERR_NODEFAULTPRN = COMMON_DLG_ERRORS.PDERR_NODEFAULTPRN;
pub const PDERR_DNDMMISMATCH = COMMON_DLG_ERRORS.PDERR_DNDMMISMATCH;
pub const PDERR_CREATEICFAILURE = COMMON_DLG_ERRORS.PDERR_CREATEICFAILURE;
pub const PDERR_PRINTERNOTFOUND = COMMON_DLG_ERRORS.PDERR_PRINTERNOTFOUND;
pub const PDERR_DEFAULTDIFFERENT = COMMON_DLG_ERRORS.PDERR_DEFAULTDIFFERENT;
pub const CFERR_CHOOSEFONTCODES = COMMON_DLG_ERRORS.CFERR_CHOOSEFONTCODES;
pub const CFERR_NOFONTS = COMMON_DLG_ERRORS.CFERR_NOFONTS;
pub const CFERR_MAXLESSTHANMIN = COMMON_DLG_ERRORS.CFERR_MAXLESSTHANMIN;
pub const FNERR_FILENAMECODES = COMMON_DLG_ERRORS.FNERR_FILENAMECODES;
pub const FNERR_SUBCLASSFAILURE = COMMON_DLG_ERRORS.FNERR_SUBCLASSFAILURE;
pub const FNERR_INVALIDFILENAME = COMMON_DLG_ERRORS.FNERR_INVALIDFILENAME;
pub const FNERR_BUFFERTOOSMALL = COMMON_DLG_ERRORS.FNERR_BUFFERTOOSMALL;
pub const FRERR_FINDREPLACECODES = COMMON_DLG_ERRORS.FRERR_FINDREPLACECODES;
pub const FRERR_BUFFERLENGTHZERO = COMMON_DLG_ERRORS.FRERR_BUFFERLENGTHZERO;
pub const CCERR_CHOOSECOLORCODES = COMMON_DLG_ERRORS.CCERR_CHOOSECOLORCODES;

pub const OPEN_FILENAME_FLAGS = enum(u32) {
    READONLY = 1,
    OVERWRITEPROMPT = 2,
    HIDEREADONLY = 4,
    NOCHANGEDIR = 8,
    SHOWHELP = 16,
    ENABLEHOOK = 32,
    ENABLETEMPLATE = 64,
    ENABLETEMPLATEHANDLE = 128,
    NOVALIDATE = 256,
    ALLOWMULTISELECT = 512,
    EXTENSIONDIFFERENT = 1024,
    PATHMUSTEXIST = 2048,
    FILEMUSTEXIST = 4096,
    CREATEPROMPT = 8192,
    SHAREAWARE = 16384,
    NOREADONLYRETURN = 32768,
    NOTESTFILECREATE = 65536,
    NONETWORKBUTTON = 131072,
    NOLONGNAMES = 262144,
    EXPLORER = 524288,
    NODEREFERENCELINKS = 1048576,
    LONGNAMES = 2097152,
    ENABLEINCLUDENOTIFY = 4194304,
    ENABLESIZING = 8388608,
    DONTADDTORECENT = 33554432,
    FORCESHOWHIDDEN = 268435456,
    _,
    pub fn initFlags(o: struct {
        READONLY: u1 = 0,
        OVERWRITEPROMPT: u1 = 0,
        HIDEREADONLY: u1 = 0,
        NOCHANGEDIR: u1 = 0,
        SHOWHELP: u1 = 0,
        ENABLEHOOK: u1 = 0,
        ENABLETEMPLATE: u1 = 0,
        ENABLETEMPLATEHANDLE: u1 = 0,
        NOVALIDATE: u1 = 0,
        ALLOWMULTISELECT: u1 = 0,
        EXTENSIONDIFFERENT: u1 = 0,
        PATHMUSTEXIST: u1 = 0,
        FILEMUSTEXIST: u1 = 0,
        CREATEPROMPT: u1 = 0,
        SHAREAWARE: u1 = 0,
        NOREADONLYRETURN: u1 = 0,
        NOTESTFILECREATE: u1 = 0,
        NONETWORKBUTTON: u1 = 0,
        NOLONGNAMES: u1 = 0,
        EXPLORER: u1 = 0,
        NODEREFERENCELINKS: u1 = 0,
        LONGNAMES: u1 = 0,
        ENABLEINCLUDENOTIFY: u1 = 0,
        ENABLESIZING: u1 = 0,
        DONTADDTORECENT: u1 = 0,
        FORCESHOWHIDDEN: u1 = 0,
    }) OPEN_FILENAME_FLAGS {
        return @intToEnum(OPEN_FILENAME_FLAGS,
              (if (o.READONLY == 1) @enumToInt(OPEN_FILENAME_FLAGS.READONLY) else 0)
            | (if (o.OVERWRITEPROMPT == 1) @enumToInt(OPEN_FILENAME_FLAGS.OVERWRITEPROMPT) else 0)
            | (if (o.HIDEREADONLY == 1) @enumToInt(OPEN_FILENAME_FLAGS.HIDEREADONLY) else 0)
            | (if (o.NOCHANGEDIR == 1) @enumToInt(OPEN_FILENAME_FLAGS.NOCHANGEDIR) else 0)
            | (if (o.SHOWHELP == 1) @enumToInt(OPEN_FILENAME_FLAGS.SHOWHELP) else 0)
            | (if (o.ENABLEHOOK == 1) @enumToInt(OPEN_FILENAME_FLAGS.ENABLEHOOK) else 0)
            | (if (o.ENABLETEMPLATE == 1) @enumToInt(OPEN_FILENAME_FLAGS.ENABLETEMPLATE) else 0)
            | (if (o.ENABLETEMPLATEHANDLE == 1) @enumToInt(OPEN_FILENAME_FLAGS.ENABLETEMPLATEHANDLE) else 0)
            | (if (o.NOVALIDATE == 1) @enumToInt(OPEN_FILENAME_FLAGS.NOVALIDATE) else 0)
            | (if (o.ALLOWMULTISELECT == 1) @enumToInt(OPEN_FILENAME_FLAGS.ALLOWMULTISELECT) else 0)
            | (if (o.EXTENSIONDIFFERENT == 1) @enumToInt(OPEN_FILENAME_FLAGS.EXTENSIONDIFFERENT) else 0)
            | (if (o.PATHMUSTEXIST == 1) @enumToInt(OPEN_FILENAME_FLAGS.PATHMUSTEXIST) else 0)
            | (if (o.FILEMUSTEXIST == 1) @enumToInt(OPEN_FILENAME_FLAGS.FILEMUSTEXIST) else 0)
            | (if (o.CREATEPROMPT == 1) @enumToInt(OPEN_FILENAME_FLAGS.CREATEPROMPT) else 0)
            | (if (o.SHAREAWARE == 1) @enumToInt(OPEN_FILENAME_FLAGS.SHAREAWARE) else 0)
            | (if (o.NOREADONLYRETURN == 1) @enumToInt(OPEN_FILENAME_FLAGS.NOREADONLYRETURN) else 0)
            | (if (o.NOTESTFILECREATE == 1) @enumToInt(OPEN_FILENAME_FLAGS.NOTESTFILECREATE) else 0)
            | (if (o.NONETWORKBUTTON == 1) @enumToInt(OPEN_FILENAME_FLAGS.NONETWORKBUTTON) else 0)
            | (if (o.NOLONGNAMES == 1) @enumToInt(OPEN_FILENAME_FLAGS.NOLONGNAMES) else 0)
            | (if (o.EXPLORER == 1) @enumToInt(OPEN_FILENAME_FLAGS.EXPLORER) else 0)
            | (if (o.NODEREFERENCELINKS == 1) @enumToInt(OPEN_FILENAME_FLAGS.NODEREFERENCELINKS) else 0)
            | (if (o.LONGNAMES == 1) @enumToInt(OPEN_FILENAME_FLAGS.LONGNAMES) else 0)
            | (if (o.ENABLEINCLUDENOTIFY == 1) @enumToInt(OPEN_FILENAME_FLAGS.ENABLEINCLUDENOTIFY) else 0)
            | (if (o.ENABLESIZING == 1) @enumToInt(OPEN_FILENAME_FLAGS.ENABLESIZING) else 0)
            | (if (o.DONTADDTORECENT == 1) @enumToInt(OPEN_FILENAME_FLAGS.DONTADDTORECENT) else 0)
            | (if (o.FORCESHOWHIDDEN == 1) @enumToInt(OPEN_FILENAME_FLAGS.FORCESHOWHIDDEN) else 0)
        );
    }
};
pub const OFN_READONLY = OPEN_FILENAME_FLAGS.READONLY;
pub const OFN_OVERWRITEPROMPT = OPEN_FILENAME_FLAGS.OVERWRITEPROMPT;
pub const OFN_HIDEREADONLY = OPEN_FILENAME_FLAGS.HIDEREADONLY;
pub const OFN_NOCHANGEDIR = OPEN_FILENAME_FLAGS.NOCHANGEDIR;
pub const OFN_SHOWHELP = OPEN_FILENAME_FLAGS.SHOWHELP;
pub const OFN_ENABLEHOOK = OPEN_FILENAME_FLAGS.ENABLEHOOK;
pub const OFN_ENABLETEMPLATE = OPEN_FILENAME_FLAGS.ENABLETEMPLATE;
pub const OFN_ENABLETEMPLATEHANDLE = OPEN_FILENAME_FLAGS.ENABLETEMPLATEHANDLE;
pub const OFN_NOVALIDATE = OPEN_FILENAME_FLAGS.NOVALIDATE;
pub const OFN_ALLOWMULTISELECT = OPEN_FILENAME_FLAGS.ALLOWMULTISELECT;
pub const OFN_EXTENSIONDIFFERENT = OPEN_FILENAME_FLAGS.EXTENSIONDIFFERENT;
pub const OFN_PATHMUSTEXIST = OPEN_FILENAME_FLAGS.PATHMUSTEXIST;
pub const OFN_FILEMUSTEXIST = OPEN_FILENAME_FLAGS.FILEMUSTEXIST;
pub const OFN_CREATEPROMPT = OPEN_FILENAME_FLAGS.CREATEPROMPT;
pub const OFN_SHAREAWARE = OPEN_FILENAME_FLAGS.SHAREAWARE;
pub const OFN_NOREADONLYRETURN = OPEN_FILENAME_FLAGS.NOREADONLYRETURN;
pub const OFN_NOTESTFILECREATE = OPEN_FILENAME_FLAGS.NOTESTFILECREATE;
pub const OFN_NONETWORKBUTTON = OPEN_FILENAME_FLAGS.NONETWORKBUTTON;
pub const OFN_NOLONGNAMES = OPEN_FILENAME_FLAGS.NOLONGNAMES;
pub const OFN_EXPLORER = OPEN_FILENAME_FLAGS.EXPLORER;
pub const OFN_NODEREFERENCELINKS = OPEN_FILENAME_FLAGS.NODEREFERENCELINKS;
pub const OFN_LONGNAMES = OPEN_FILENAME_FLAGS.LONGNAMES;
pub const OFN_ENABLEINCLUDENOTIFY = OPEN_FILENAME_FLAGS.ENABLEINCLUDENOTIFY;
pub const OFN_ENABLESIZING = OPEN_FILENAME_FLAGS.ENABLESIZING;
pub const OFN_DONTADDTORECENT = OPEN_FILENAME_FLAGS.DONTADDTORECENT;
pub const OFN_FORCESHOWHIDDEN = OPEN_FILENAME_FLAGS.FORCESHOWHIDDEN;

pub const OPEN_FILENAME_FLAGS_EX = enum(u32) {
    NE = 0,
    PLACESBAR = 1,
    _,
    pub fn initFlags(o: struct {
        NE: u1 = 0,
        PLACESBAR: u1 = 0,
    }) OPEN_FILENAME_FLAGS_EX {
        return @intToEnum(OPEN_FILENAME_FLAGS_EX,
              (if (o.NE == 1) @enumToInt(OPEN_FILENAME_FLAGS_EX.NE) else 0)
            | (if (o.PLACESBAR == 1) @enumToInt(OPEN_FILENAME_FLAGS_EX.PLACESBAR) else 0)
        );
    }
};
pub const OFN_EX_NONE = OPEN_FILENAME_FLAGS_EX.NE;
pub const OFN_EX_NOPLACESBAR = OPEN_FILENAME_FLAGS_EX.PLACESBAR;

pub const PAGESETUPDLG_FLAGS = enum(u32) {
    DEFAULTMINMARGINS = 0,
    DISABLEMARGINS = 16,
    DISABLEORIENTATION = 256,
    DISABLEPAGEPAINTING = 524288,
    DISABLEPAPER = 512,
    DISABLEPRINTER = 32,
    ENABLEPAGEPAINTHOOK = 262144,
    ENABLEPAGESETUPHOOK = 8192,
    ENABLEPAGESETUPTEMPLATE = 32768,
    ENABLEPAGESETUPTEMPLATEHANDLE = 131072,
    INHUNDREDTHSOFMILLIMETERS = 8,
    INTHOUSANDTHSOFINCHES = 4,
    // INWININIINTLMEASURE = 0, this enum value conflicts with DEFAULTMINMARGINS
    MARGINS = 2,
    MINMARGINS = 1,
    NONETWORKBUTTON = 2097152,
    NOWARNING = 128,
    RETURNDEFAULT = 1024,
    SHOWHELP = 2048,
    _,
    pub fn initFlags(o: struct {
        DEFAULTMINMARGINS: u1 = 0,
        DISABLEMARGINS: u1 = 0,
        DISABLEORIENTATION: u1 = 0,
        DISABLEPAGEPAINTING: u1 = 0,
        DISABLEPAPER: u1 = 0,
        DISABLEPRINTER: u1 = 0,
        ENABLEPAGEPAINTHOOK: u1 = 0,
        ENABLEPAGESETUPHOOK: u1 = 0,
        ENABLEPAGESETUPTEMPLATE: u1 = 0,
        ENABLEPAGESETUPTEMPLATEHANDLE: u1 = 0,
        INHUNDREDTHSOFMILLIMETERS: u1 = 0,
        INTHOUSANDTHSOFINCHES: u1 = 0,
        MARGINS: u1 = 0,
        MINMARGINS: u1 = 0,
        NONETWORKBUTTON: u1 = 0,
        NOWARNING: u1 = 0,
        RETURNDEFAULT: u1 = 0,
        SHOWHELP: u1 = 0,
    }) PAGESETUPDLG_FLAGS {
        return @intToEnum(PAGESETUPDLG_FLAGS,
              (if (o.DEFAULTMINMARGINS == 1) @enumToInt(PAGESETUPDLG_FLAGS.DEFAULTMINMARGINS) else 0)
            | (if (o.DISABLEMARGINS == 1) @enumToInt(PAGESETUPDLG_FLAGS.DISABLEMARGINS) else 0)
            | (if (o.DISABLEORIENTATION == 1) @enumToInt(PAGESETUPDLG_FLAGS.DISABLEORIENTATION) else 0)
            | (if (o.DISABLEPAGEPAINTING == 1) @enumToInt(PAGESETUPDLG_FLAGS.DISABLEPAGEPAINTING) else 0)
            | (if (o.DISABLEPAPER == 1) @enumToInt(PAGESETUPDLG_FLAGS.DISABLEPAPER) else 0)
            | (if (o.DISABLEPRINTER == 1) @enumToInt(PAGESETUPDLG_FLAGS.DISABLEPRINTER) else 0)
            | (if (o.ENABLEPAGEPAINTHOOK == 1) @enumToInt(PAGESETUPDLG_FLAGS.ENABLEPAGEPAINTHOOK) else 0)
            | (if (o.ENABLEPAGESETUPHOOK == 1) @enumToInt(PAGESETUPDLG_FLAGS.ENABLEPAGESETUPHOOK) else 0)
            | (if (o.ENABLEPAGESETUPTEMPLATE == 1) @enumToInt(PAGESETUPDLG_FLAGS.ENABLEPAGESETUPTEMPLATE) else 0)
            | (if (o.ENABLEPAGESETUPTEMPLATEHANDLE == 1) @enumToInt(PAGESETUPDLG_FLAGS.ENABLEPAGESETUPTEMPLATEHANDLE) else 0)
            | (if (o.INHUNDREDTHSOFMILLIMETERS == 1) @enumToInt(PAGESETUPDLG_FLAGS.INHUNDREDTHSOFMILLIMETERS) else 0)
            | (if (o.INTHOUSANDTHSOFINCHES == 1) @enumToInt(PAGESETUPDLG_FLAGS.INTHOUSANDTHSOFINCHES) else 0)
            | (if (o.MARGINS == 1) @enumToInt(PAGESETUPDLG_FLAGS.MARGINS) else 0)
            | (if (o.MINMARGINS == 1) @enumToInt(PAGESETUPDLG_FLAGS.MINMARGINS) else 0)
            | (if (o.NONETWORKBUTTON == 1) @enumToInt(PAGESETUPDLG_FLAGS.NONETWORKBUTTON) else 0)
            | (if (o.NOWARNING == 1) @enumToInt(PAGESETUPDLG_FLAGS.NOWARNING) else 0)
            | (if (o.RETURNDEFAULT == 1) @enumToInt(PAGESETUPDLG_FLAGS.RETURNDEFAULT) else 0)
            | (if (o.SHOWHELP == 1) @enumToInt(PAGESETUPDLG_FLAGS.SHOWHELP) else 0)
        );
    }
};
pub const PSD_DEFAULTMINMARGINS = PAGESETUPDLG_FLAGS.DEFAULTMINMARGINS;
pub const PSD_DISABLEMARGINS = PAGESETUPDLG_FLAGS.DISABLEMARGINS;
pub const PSD_DISABLEORIENTATION = PAGESETUPDLG_FLAGS.DISABLEORIENTATION;
pub const PSD_DISABLEPAGEPAINTING = PAGESETUPDLG_FLAGS.DISABLEPAGEPAINTING;
pub const PSD_DISABLEPAPER = PAGESETUPDLG_FLAGS.DISABLEPAPER;
pub const PSD_DISABLEPRINTER = PAGESETUPDLG_FLAGS.DISABLEPRINTER;
pub const PSD_ENABLEPAGEPAINTHOOK = PAGESETUPDLG_FLAGS.ENABLEPAGEPAINTHOOK;
pub const PSD_ENABLEPAGESETUPHOOK = PAGESETUPDLG_FLAGS.ENABLEPAGESETUPHOOK;
pub const PSD_ENABLEPAGESETUPTEMPLATE = PAGESETUPDLG_FLAGS.ENABLEPAGESETUPTEMPLATE;
pub const PSD_ENABLEPAGESETUPTEMPLATEHANDLE = PAGESETUPDLG_FLAGS.ENABLEPAGESETUPTEMPLATEHANDLE;
pub const PSD_INHUNDREDTHSOFMILLIMETERS = PAGESETUPDLG_FLAGS.INHUNDREDTHSOFMILLIMETERS;
pub const PSD_INTHOUSANDTHSOFINCHES = PAGESETUPDLG_FLAGS.INTHOUSANDTHSOFINCHES;
pub const PSD_INWININIINTLMEASURE = PAGESETUPDLG_FLAGS.DEFAULTMINMARGINS;
pub const PSD_MARGINS = PAGESETUPDLG_FLAGS.MARGINS;
pub const PSD_MINMARGINS = PAGESETUPDLG_FLAGS.MINMARGINS;
pub const PSD_NONETWORKBUTTON = PAGESETUPDLG_FLAGS.NONETWORKBUTTON;
pub const PSD_NOWARNING = PAGESETUPDLG_FLAGS.NOWARNING;
pub const PSD_RETURNDEFAULT = PAGESETUPDLG_FLAGS.RETURNDEFAULT;
pub const PSD_SHOWHELP = PAGESETUPDLG_FLAGS.SHOWHELP;

pub const CHOOSEFONT_FLAGS = enum(u32) {
    APPLY = 512,
    ANSIONLY = 1024,
    BOTH = 3,
    EFFECTS = 256,
    ENABLEHOOK = 8,
    ENABLETEMPLATE = 16,
    ENABLETEMPLATEHANDLE = 32,
    FIXEDPITCHONLY = 16384,
    FORCEFONTEXIST = 65536,
    INACTIVEFONTS = 33554432,
    INITTOLOGFONTSTRUCT = 64,
    LIMITSIZE = 8192,
    NOOEMFONTS = 2048,
    NOFACESEL = 524288,
    NOSCRIPTSEL = 8388608,
    NOSIMULATIONS = 4096,
    NOSIZESEL = 2097152,
    NOSTYLESEL = 1048576,
    // NOVECTORFONTS = 2048, this enum value conflicts with NOOEMFONTS
    NOVERTFONTS = 16777216,
    PRINTERFONTS = 2,
    SCALABLEONLY = 131072,
    SCREENFONTS = 1,
    // SCRIPTSONLY = 1024, this enum value conflicts with ANSIONLY
    SELECTSCRIPT = 4194304,
    SHOWHELP = 4,
    TTONLY = 262144,
    USESTYLE = 128,
    WYSIWYG = 32768,
    _,
    pub fn initFlags(o: struct {
        APPLY: u1 = 0,
        ANSIONLY: u1 = 0,
        BOTH: u1 = 0,
        EFFECTS: u1 = 0,
        ENABLEHOOK: u1 = 0,
        ENABLETEMPLATE: u1 = 0,
        ENABLETEMPLATEHANDLE: u1 = 0,
        FIXEDPITCHONLY: u1 = 0,
        FORCEFONTEXIST: u1 = 0,
        INACTIVEFONTS: u1 = 0,
        INITTOLOGFONTSTRUCT: u1 = 0,
        LIMITSIZE: u1 = 0,
        NOOEMFONTS: u1 = 0,
        NOFACESEL: u1 = 0,
        NOSCRIPTSEL: u1 = 0,
        NOSIMULATIONS: u1 = 0,
        NOSIZESEL: u1 = 0,
        NOSTYLESEL: u1 = 0,
        NOVERTFONTS: u1 = 0,
        PRINTERFONTS: u1 = 0,
        SCALABLEONLY: u1 = 0,
        SCREENFONTS: u1 = 0,
        SELECTSCRIPT: u1 = 0,
        SHOWHELP: u1 = 0,
        TTONLY: u1 = 0,
        USESTYLE: u1 = 0,
        WYSIWYG: u1 = 0,
    }) CHOOSEFONT_FLAGS {
        return @intToEnum(CHOOSEFONT_FLAGS,
              (if (o.APPLY == 1) @enumToInt(CHOOSEFONT_FLAGS.APPLY) else 0)
            | (if (o.ANSIONLY == 1) @enumToInt(CHOOSEFONT_FLAGS.ANSIONLY) else 0)
            | (if (o.BOTH == 1) @enumToInt(CHOOSEFONT_FLAGS.BOTH) else 0)
            | (if (o.EFFECTS == 1) @enumToInt(CHOOSEFONT_FLAGS.EFFECTS) else 0)
            | (if (o.ENABLEHOOK == 1) @enumToInt(CHOOSEFONT_FLAGS.ENABLEHOOK) else 0)
            | (if (o.ENABLETEMPLATE == 1) @enumToInt(CHOOSEFONT_FLAGS.ENABLETEMPLATE) else 0)
            | (if (o.ENABLETEMPLATEHANDLE == 1) @enumToInt(CHOOSEFONT_FLAGS.ENABLETEMPLATEHANDLE) else 0)
            | (if (o.FIXEDPITCHONLY == 1) @enumToInt(CHOOSEFONT_FLAGS.FIXEDPITCHONLY) else 0)
            | (if (o.FORCEFONTEXIST == 1) @enumToInt(CHOOSEFONT_FLAGS.FORCEFONTEXIST) else 0)
            | (if (o.INACTIVEFONTS == 1) @enumToInt(CHOOSEFONT_FLAGS.INACTIVEFONTS) else 0)
            | (if (o.INITTOLOGFONTSTRUCT == 1) @enumToInt(CHOOSEFONT_FLAGS.INITTOLOGFONTSTRUCT) else 0)
            | (if (o.LIMITSIZE == 1) @enumToInt(CHOOSEFONT_FLAGS.LIMITSIZE) else 0)
            | (if (o.NOOEMFONTS == 1) @enumToInt(CHOOSEFONT_FLAGS.NOOEMFONTS) else 0)
            | (if (o.NOFACESEL == 1) @enumToInt(CHOOSEFONT_FLAGS.NOFACESEL) else 0)
            | (if (o.NOSCRIPTSEL == 1) @enumToInt(CHOOSEFONT_FLAGS.NOSCRIPTSEL) else 0)
            | (if (o.NOSIMULATIONS == 1) @enumToInt(CHOOSEFONT_FLAGS.NOSIMULATIONS) else 0)
            | (if (o.NOSIZESEL == 1) @enumToInt(CHOOSEFONT_FLAGS.NOSIZESEL) else 0)
            | (if (o.NOSTYLESEL == 1) @enumToInt(CHOOSEFONT_FLAGS.NOSTYLESEL) else 0)
            | (if (o.NOVERTFONTS == 1) @enumToInt(CHOOSEFONT_FLAGS.NOVERTFONTS) else 0)
            | (if (o.PRINTERFONTS == 1) @enumToInt(CHOOSEFONT_FLAGS.PRINTERFONTS) else 0)
            | (if (o.SCALABLEONLY == 1) @enumToInt(CHOOSEFONT_FLAGS.SCALABLEONLY) else 0)
            | (if (o.SCREENFONTS == 1) @enumToInt(CHOOSEFONT_FLAGS.SCREENFONTS) else 0)
            | (if (o.SELECTSCRIPT == 1) @enumToInt(CHOOSEFONT_FLAGS.SELECTSCRIPT) else 0)
            | (if (o.SHOWHELP == 1) @enumToInt(CHOOSEFONT_FLAGS.SHOWHELP) else 0)
            | (if (o.TTONLY == 1) @enumToInt(CHOOSEFONT_FLAGS.TTONLY) else 0)
            | (if (o.USESTYLE == 1) @enumToInt(CHOOSEFONT_FLAGS.USESTYLE) else 0)
            | (if (o.WYSIWYG == 1) @enumToInt(CHOOSEFONT_FLAGS.WYSIWYG) else 0)
        );
    }
};
pub const CF_APPLY = CHOOSEFONT_FLAGS.APPLY;
pub const CF_ANSIONLY = CHOOSEFONT_FLAGS.ANSIONLY;
pub const CF_BOTH = CHOOSEFONT_FLAGS.BOTH;
pub const CF_EFFECTS = CHOOSEFONT_FLAGS.EFFECTS;
pub const CF_ENABLEHOOK = CHOOSEFONT_FLAGS.ENABLEHOOK;
pub const CF_ENABLETEMPLATE = CHOOSEFONT_FLAGS.ENABLETEMPLATE;
pub const CF_ENABLETEMPLATEHANDLE = CHOOSEFONT_FLAGS.ENABLETEMPLATEHANDLE;
pub const CF_FIXEDPITCHONLY = CHOOSEFONT_FLAGS.FIXEDPITCHONLY;
pub const CF_FORCEFONTEXIST = CHOOSEFONT_FLAGS.FORCEFONTEXIST;
pub const CF_INACTIVEFONTS = CHOOSEFONT_FLAGS.INACTIVEFONTS;
pub const CF_INITTOLOGFONTSTRUCT = CHOOSEFONT_FLAGS.INITTOLOGFONTSTRUCT;
pub const CF_LIMITSIZE = CHOOSEFONT_FLAGS.LIMITSIZE;
pub const CF_NOOEMFONTS = CHOOSEFONT_FLAGS.NOOEMFONTS;
pub const CF_NOFACESEL = CHOOSEFONT_FLAGS.NOFACESEL;
pub const CF_NOSCRIPTSEL = CHOOSEFONT_FLAGS.NOSCRIPTSEL;
pub const CF_NOSIMULATIONS = CHOOSEFONT_FLAGS.NOSIMULATIONS;
pub const CF_NOSIZESEL = CHOOSEFONT_FLAGS.NOSIZESEL;
pub const CF_NOSTYLESEL = CHOOSEFONT_FLAGS.NOSTYLESEL;
pub const CF_NOVECTORFONTS = CHOOSEFONT_FLAGS.NOOEMFONTS;
pub const CF_NOVERTFONTS = CHOOSEFONT_FLAGS.NOVERTFONTS;
pub const CF_PRINTERFONTS = CHOOSEFONT_FLAGS.PRINTERFONTS;
pub const CF_SCALABLEONLY = CHOOSEFONT_FLAGS.SCALABLEONLY;
pub const CF_SCREENFONTS = CHOOSEFONT_FLAGS.SCREENFONTS;
pub const CF_SCRIPTSONLY = CHOOSEFONT_FLAGS.ANSIONLY;
pub const CF_SELECTSCRIPT = CHOOSEFONT_FLAGS.SELECTSCRIPT;
pub const CF_SHOWHELP = CHOOSEFONT_FLAGS.SHOWHELP;
pub const CF_TTONLY = CHOOSEFONT_FLAGS.TTONLY;
pub const CF_USESTYLE = CHOOSEFONT_FLAGS.USESTYLE;
pub const CF_WYSIWYG = CHOOSEFONT_FLAGS.WYSIWYG;

pub const FINDREPLACE_FLAGS = enum(u32) {
    DIALOGTERM = 64,
    DOWN = 1,
    ENABLEHOOK = 256,
    ENABLETEMPLATE = 512,
    ENABLETEMPLATEHANDLE = 8192,
    FINDNEXT = 8,
    HIDEUPDOWN = 16384,
    HIDEMATCHCASE = 32768,
    HIDEWHOLEWORD = 65536,
    MATCHCASE = 4,
    NOMATCHCASE = 2048,
    NOUPDOWN = 1024,
    NOWHOLEWORD = 4096,
    REPLACE = 16,
    REPLACEALL = 32,
    SHOWHELP = 128,
    WHOLEWORD = 2,
    _,
    pub fn initFlags(o: struct {
        DIALOGTERM: u1 = 0,
        DOWN: u1 = 0,
        ENABLEHOOK: u1 = 0,
        ENABLETEMPLATE: u1 = 0,
        ENABLETEMPLATEHANDLE: u1 = 0,
        FINDNEXT: u1 = 0,
        HIDEUPDOWN: u1 = 0,
        HIDEMATCHCASE: u1 = 0,
        HIDEWHOLEWORD: u1 = 0,
        MATCHCASE: u1 = 0,
        NOMATCHCASE: u1 = 0,
        NOUPDOWN: u1 = 0,
        NOWHOLEWORD: u1 = 0,
        REPLACE: u1 = 0,
        REPLACEALL: u1 = 0,
        SHOWHELP: u1 = 0,
        WHOLEWORD: u1 = 0,
    }) FINDREPLACE_FLAGS {
        return @intToEnum(FINDREPLACE_FLAGS,
              (if (o.DIALOGTERM == 1) @enumToInt(FINDREPLACE_FLAGS.DIALOGTERM) else 0)
            | (if (o.DOWN == 1) @enumToInt(FINDREPLACE_FLAGS.DOWN) else 0)
            | (if (o.ENABLEHOOK == 1) @enumToInt(FINDREPLACE_FLAGS.ENABLEHOOK) else 0)
            | (if (o.ENABLETEMPLATE == 1) @enumToInt(FINDREPLACE_FLAGS.ENABLETEMPLATE) else 0)
            | (if (o.ENABLETEMPLATEHANDLE == 1) @enumToInt(FINDREPLACE_FLAGS.ENABLETEMPLATEHANDLE) else 0)
            | (if (o.FINDNEXT == 1) @enumToInt(FINDREPLACE_FLAGS.FINDNEXT) else 0)
            | (if (o.HIDEUPDOWN == 1) @enumToInt(FINDREPLACE_FLAGS.HIDEUPDOWN) else 0)
            | (if (o.HIDEMATCHCASE == 1) @enumToInt(FINDREPLACE_FLAGS.HIDEMATCHCASE) else 0)
            | (if (o.HIDEWHOLEWORD == 1) @enumToInt(FINDREPLACE_FLAGS.HIDEWHOLEWORD) else 0)
            | (if (o.MATCHCASE == 1) @enumToInt(FINDREPLACE_FLAGS.MATCHCASE) else 0)
            | (if (o.NOMATCHCASE == 1) @enumToInt(FINDREPLACE_FLAGS.NOMATCHCASE) else 0)
            | (if (o.NOUPDOWN == 1) @enumToInt(FINDREPLACE_FLAGS.NOUPDOWN) else 0)
            | (if (o.NOWHOLEWORD == 1) @enumToInt(FINDREPLACE_FLAGS.NOWHOLEWORD) else 0)
            | (if (o.REPLACE == 1) @enumToInt(FINDREPLACE_FLAGS.REPLACE) else 0)
            | (if (o.REPLACEALL == 1) @enumToInt(FINDREPLACE_FLAGS.REPLACEALL) else 0)
            | (if (o.SHOWHELP == 1) @enumToInt(FINDREPLACE_FLAGS.SHOWHELP) else 0)
            | (if (o.WHOLEWORD == 1) @enumToInt(FINDREPLACE_FLAGS.WHOLEWORD) else 0)
        );
    }
};
pub const FR_DIALOGTERM = FINDREPLACE_FLAGS.DIALOGTERM;
pub const FR_DOWN = FINDREPLACE_FLAGS.DOWN;
pub const FR_ENABLEHOOK = FINDREPLACE_FLAGS.ENABLEHOOK;
pub const FR_ENABLETEMPLATE = FINDREPLACE_FLAGS.ENABLETEMPLATE;
pub const FR_ENABLETEMPLATEHANDLE = FINDREPLACE_FLAGS.ENABLETEMPLATEHANDLE;
pub const FR_FINDNEXT = FINDREPLACE_FLAGS.FINDNEXT;
pub const FR_HIDEUPDOWN = FINDREPLACE_FLAGS.HIDEUPDOWN;
pub const FR_HIDEMATCHCASE = FINDREPLACE_FLAGS.HIDEMATCHCASE;
pub const FR_HIDEWHOLEWORD = FINDREPLACE_FLAGS.HIDEWHOLEWORD;
pub const FR_MATCHCASE = FINDREPLACE_FLAGS.MATCHCASE;
pub const FR_NOMATCHCASE = FINDREPLACE_FLAGS.NOMATCHCASE;
pub const FR_NOUPDOWN = FINDREPLACE_FLAGS.NOUPDOWN;
pub const FR_NOWHOLEWORD = FINDREPLACE_FLAGS.NOWHOLEWORD;
pub const FR_REPLACE = FINDREPLACE_FLAGS.REPLACE;
pub const FR_REPLACEALL = FINDREPLACE_FLAGS.REPLACEALL;
pub const FR_SHOWHELP = FINDREPLACE_FLAGS.SHOWHELP;
pub const FR_WHOLEWORD = FINDREPLACE_FLAGS.WHOLEWORD;

pub const PRINTDLGEX_FLAGS = enum(u32) {
    ALLPAGES = 0,
    COLLATE = 16,
    CURRENTPAGE = 4194304,
    DISABLEPRINTTOFILE = 524288,
    ENABLEPRINTTEMPLATE = 16384,
    ENABLEPRINTTEMPLATEHANDLE = 65536,
    EXCLUSIONFLAGS = 16777216,
    HIDEPRINTTOFILE = 1048576,
    NOCURRENTPAGE = 8388608,
    NOPAGENUMS = 8,
    NOSELECTION = 4,
    NOWARNING = 128,
    PAGENUMS = 2,
    PRINTTOFILE = 32,
    RETURNDC = 256,
    RETURNDEFAULT = 1024,
    RETURNIC = 512,
    SELECTION = 1,
    USEDEVMODECOPIES = 262144,
    // USEDEVMODECOPIESANDCOLLATE = 262144, this enum value conflicts with USEDEVMODECOPIES
    USELARGETEMPLATE = 268435456,
    ENABLEPRINTHOOK = 4096,
    ENABLESETUPHOOK = 8192,
    ENABLESETUPTEMPLATE = 32768,
    ENABLESETUPTEMPLATEHANDLE = 131072,
    NONETWORKBUTTON = 2097152,
    PRINTSETUP = 64,
    SHOWHELP = 2048,
    _,
    pub fn initFlags(o: struct {
        ALLPAGES: u1 = 0,
        COLLATE: u1 = 0,
        CURRENTPAGE: u1 = 0,
        DISABLEPRINTTOFILE: u1 = 0,
        ENABLEPRINTTEMPLATE: u1 = 0,
        ENABLEPRINTTEMPLATEHANDLE: u1 = 0,
        EXCLUSIONFLAGS: u1 = 0,
        HIDEPRINTTOFILE: u1 = 0,
        NOCURRENTPAGE: u1 = 0,
        NOPAGENUMS: u1 = 0,
        NOSELECTION: u1 = 0,
        NOWARNING: u1 = 0,
        PAGENUMS: u1 = 0,
        PRINTTOFILE: u1 = 0,
        RETURNDC: u1 = 0,
        RETURNDEFAULT: u1 = 0,
        RETURNIC: u1 = 0,
        SELECTION: u1 = 0,
        USEDEVMODECOPIES: u1 = 0,
        USELARGETEMPLATE: u1 = 0,
        ENABLEPRINTHOOK: u1 = 0,
        ENABLESETUPHOOK: u1 = 0,
        ENABLESETUPTEMPLATE: u1 = 0,
        ENABLESETUPTEMPLATEHANDLE: u1 = 0,
        NONETWORKBUTTON: u1 = 0,
        PRINTSETUP: u1 = 0,
        SHOWHELP: u1 = 0,
    }) PRINTDLGEX_FLAGS {
        return @intToEnum(PRINTDLGEX_FLAGS,
              (if (o.ALLPAGES == 1) @enumToInt(PRINTDLGEX_FLAGS.ALLPAGES) else 0)
            | (if (o.COLLATE == 1) @enumToInt(PRINTDLGEX_FLAGS.COLLATE) else 0)
            | (if (o.CURRENTPAGE == 1) @enumToInt(PRINTDLGEX_FLAGS.CURRENTPAGE) else 0)
            | (if (o.DISABLEPRINTTOFILE == 1) @enumToInt(PRINTDLGEX_FLAGS.DISABLEPRINTTOFILE) else 0)
            | (if (o.ENABLEPRINTTEMPLATE == 1) @enumToInt(PRINTDLGEX_FLAGS.ENABLEPRINTTEMPLATE) else 0)
            | (if (o.ENABLEPRINTTEMPLATEHANDLE == 1) @enumToInt(PRINTDLGEX_FLAGS.ENABLEPRINTTEMPLATEHANDLE) else 0)
            | (if (o.EXCLUSIONFLAGS == 1) @enumToInt(PRINTDLGEX_FLAGS.EXCLUSIONFLAGS) else 0)
            | (if (o.HIDEPRINTTOFILE == 1) @enumToInt(PRINTDLGEX_FLAGS.HIDEPRINTTOFILE) else 0)
            | (if (o.NOCURRENTPAGE == 1) @enumToInt(PRINTDLGEX_FLAGS.NOCURRENTPAGE) else 0)
            | (if (o.NOPAGENUMS == 1) @enumToInt(PRINTDLGEX_FLAGS.NOPAGENUMS) else 0)
            | (if (o.NOSELECTION == 1) @enumToInt(PRINTDLGEX_FLAGS.NOSELECTION) else 0)
            | (if (o.NOWARNING == 1) @enumToInt(PRINTDLGEX_FLAGS.NOWARNING) else 0)
            | (if (o.PAGENUMS == 1) @enumToInt(PRINTDLGEX_FLAGS.PAGENUMS) else 0)
            | (if (o.PRINTTOFILE == 1) @enumToInt(PRINTDLGEX_FLAGS.PRINTTOFILE) else 0)
            | (if (o.RETURNDC == 1) @enumToInt(PRINTDLGEX_FLAGS.RETURNDC) else 0)
            | (if (o.RETURNDEFAULT == 1) @enumToInt(PRINTDLGEX_FLAGS.RETURNDEFAULT) else 0)
            | (if (o.RETURNIC == 1) @enumToInt(PRINTDLGEX_FLAGS.RETURNIC) else 0)
            | (if (o.SELECTION == 1) @enumToInt(PRINTDLGEX_FLAGS.SELECTION) else 0)
            | (if (o.USEDEVMODECOPIES == 1) @enumToInt(PRINTDLGEX_FLAGS.USEDEVMODECOPIES) else 0)
            | (if (o.USELARGETEMPLATE == 1) @enumToInt(PRINTDLGEX_FLAGS.USELARGETEMPLATE) else 0)
            | (if (o.ENABLEPRINTHOOK == 1) @enumToInt(PRINTDLGEX_FLAGS.ENABLEPRINTHOOK) else 0)
            | (if (o.ENABLESETUPHOOK == 1) @enumToInt(PRINTDLGEX_FLAGS.ENABLESETUPHOOK) else 0)
            | (if (o.ENABLESETUPTEMPLATE == 1) @enumToInt(PRINTDLGEX_FLAGS.ENABLESETUPTEMPLATE) else 0)
            | (if (o.ENABLESETUPTEMPLATEHANDLE == 1) @enumToInt(PRINTDLGEX_FLAGS.ENABLESETUPTEMPLATEHANDLE) else 0)
            | (if (o.NONETWORKBUTTON == 1) @enumToInt(PRINTDLGEX_FLAGS.NONETWORKBUTTON) else 0)
            | (if (o.PRINTSETUP == 1) @enumToInt(PRINTDLGEX_FLAGS.PRINTSETUP) else 0)
            | (if (o.SHOWHELP == 1) @enumToInt(PRINTDLGEX_FLAGS.SHOWHELP) else 0)
        );
    }
};
pub const PD_ALLPAGES = PRINTDLGEX_FLAGS.ALLPAGES;
pub const PD_COLLATE = PRINTDLGEX_FLAGS.COLLATE;
pub const PD_CURRENTPAGE = PRINTDLGEX_FLAGS.CURRENTPAGE;
pub const PD_DISABLEPRINTTOFILE = PRINTDLGEX_FLAGS.DISABLEPRINTTOFILE;
pub const PD_ENABLEPRINTTEMPLATE = PRINTDLGEX_FLAGS.ENABLEPRINTTEMPLATE;
pub const PD_ENABLEPRINTTEMPLATEHANDLE = PRINTDLGEX_FLAGS.ENABLEPRINTTEMPLATEHANDLE;
pub const PD_EXCLUSIONFLAGS = PRINTDLGEX_FLAGS.EXCLUSIONFLAGS;
pub const PD_HIDEPRINTTOFILE = PRINTDLGEX_FLAGS.HIDEPRINTTOFILE;
pub const PD_NOCURRENTPAGE = PRINTDLGEX_FLAGS.NOCURRENTPAGE;
pub const PD_NOPAGENUMS = PRINTDLGEX_FLAGS.NOPAGENUMS;
pub const PD_NOSELECTION = PRINTDLGEX_FLAGS.NOSELECTION;
pub const PD_NOWARNING = PRINTDLGEX_FLAGS.NOWARNING;
pub const PD_PAGENUMS = PRINTDLGEX_FLAGS.PAGENUMS;
pub const PD_PRINTTOFILE = PRINTDLGEX_FLAGS.PRINTTOFILE;
pub const PD_RETURNDC = PRINTDLGEX_FLAGS.RETURNDC;
pub const PD_RETURNDEFAULT = PRINTDLGEX_FLAGS.RETURNDEFAULT;
pub const PD_RETURNIC = PRINTDLGEX_FLAGS.RETURNIC;
pub const PD_SELECTION = PRINTDLGEX_FLAGS.SELECTION;
pub const PD_USEDEVMODECOPIES = PRINTDLGEX_FLAGS.USEDEVMODECOPIES;
pub const PD_USEDEVMODECOPIESANDCOLLATE = PRINTDLGEX_FLAGS.USEDEVMODECOPIES;
pub const PD_USELARGETEMPLATE = PRINTDLGEX_FLAGS.USELARGETEMPLATE;
pub const PD_ENABLEPRINTHOOK = PRINTDLGEX_FLAGS.ENABLEPRINTHOOK;
pub const PD_ENABLESETUPHOOK = PRINTDLGEX_FLAGS.ENABLESETUPHOOK;
pub const PD_ENABLESETUPTEMPLATE = PRINTDLGEX_FLAGS.ENABLESETUPTEMPLATE;
pub const PD_ENABLESETUPTEMPLATEHANDLE = PRINTDLGEX_FLAGS.ENABLESETUPTEMPLATEHANDLE;
pub const PD_NONETWORKBUTTON = PRINTDLGEX_FLAGS.NONETWORKBUTTON;
pub const PD_PRINTSETUP = PRINTDLGEX_FLAGS.PRINTSETUP;
pub const PD_SHOWHELP = PRINTDLGEX_FLAGS.SHOWHELP;

pub const CHOOSEFONT_FONT_TYPE = enum(u16) {
    BOLD_FONTTYPE = 256,
    ITALIC_FONTTYPE = 512,
    PRINTER_FONTTYPE = 16384,
    REGULAR_FONTTYPE = 1024,
    SCREEN_FONTTYPE = 8192,
    SIMULATED_FONTTYPE = 32768,
    _,
    pub fn initFlags(o: struct {
        BOLD_FONTTYPE: u1 = 0,
        ITALIC_FONTTYPE: u1 = 0,
        PRINTER_FONTTYPE: u1 = 0,
        REGULAR_FONTTYPE: u1 = 0,
        SCREEN_FONTTYPE: u1 = 0,
        SIMULATED_FONTTYPE: u1 = 0,
    }) CHOOSEFONT_FONT_TYPE {
        return @intToEnum(CHOOSEFONT_FONT_TYPE,
              (if (o.BOLD_FONTTYPE == 1) @enumToInt(CHOOSEFONT_FONT_TYPE.BOLD_FONTTYPE) else 0)
            | (if (o.ITALIC_FONTTYPE == 1) @enumToInt(CHOOSEFONT_FONT_TYPE.ITALIC_FONTTYPE) else 0)
            | (if (o.PRINTER_FONTTYPE == 1) @enumToInt(CHOOSEFONT_FONT_TYPE.PRINTER_FONTTYPE) else 0)
            | (if (o.REGULAR_FONTTYPE == 1) @enumToInt(CHOOSEFONT_FONT_TYPE.REGULAR_FONTTYPE) else 0)
            | (if (o.SCREEN_FONTTYPE == 1) @enumToInt(CHOOSEFONT_FONT_TYPE.SCREEN_FONTTYPE) else 0)
            | (if (o.SIMULATED_FONTTYPE == 1) @enumToInt(CHOOSEFONT_FONT_TYPE.SIMULATED_FONTTYPE) else 0)
        );
    }
};
pub const BOLD_FONTTYPE = CHOOSEFONT_FONT_TYPE.BOLD_FONTTYPE;
pub const ITALIC_FONTTYPE = CHOOSEFONT_FONT_TYPE.ITALIC_FONTTYPE;
pub const PRINTER_FONTTYPE = CHOOSEFONT_FONT_TYPE.PRINTER_FONTTYPE;
pub const REGULAR_FONTTYPE = CHOOSEFONT_FONT_TYPE.REGULAR_FONTTYPE;
pub const SCREEN_FONTTYPE = CHOOSEFONT_FONT_TYPE.SCREEN_FONTTYPE;
pub const SIMULATED_FONTTYPE = CHOOSEFONT_FONT_TYPE.SIMULATED_FONTTYPE;

pub const LPOFNHOOKPROC = fn(
    param0: ?HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) usize;





pub const LPCCHOOKPROC = fn(
    param0: ?HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) usize;







pub const LPFRHOOKPROC = fn(
    param0: ?HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) usize;



pub const LPCFHOOKPROC = fn(
    param0: ?HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) usize;



pub const LPPRINTHOOKPROC = fn(
    param0: ?HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) usize;

pub const LPSETUPHOOKPROC = fn(
    param0: ?HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) usize;



// TODO: this type is limited to platform 'windows5.0'
const IID_IPrintDialogCallback_Value = @import("../../zig.zig").Guid.initString("5852a2c3-6530-11d1-b6a3-0000f8757bf9");
pub const IID_IPrintDialogCallback = &IID_IPrintDialogCallback_Value;
pub const IPrintDialogCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitDone: fn(
            self: *const IPrintDialogCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectionChange: fn(
            self: *const IPrintDialogCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleMessage: fn(
            self: *const IPrintDialogCallback,
            hDlg: ?HWND,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
            pResult: ?*LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintDialogCallback_InitDone(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintDialogCallback.VTable, self.vtable).InitDone(@ptrCast(*const IPrintDialogCallback, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintDialogCallback_SelectionChange(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintDialogCallback.VTable, self.vtable).SelectionChange(@ptrCast(*const IPrintDialogCallback, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintDialogCallback_HandleMessage(self: *const T, hDlg: ?HWND, uMsg: u32, wParam: WPARAM, lParam: LPARAM, pResult: ?*LRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintDialogCallback.VTable, self.vtable).HandleMessage(@ptrCast(*const IPrintDialogCallback, self), hDlg, uMsg, wParam, lParam, pResult);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IPrintDialogServices_Value = @import("../../zig.zig").Guid.initString("509aaeda-5639-11d1-b6a1-0000f8757bf9");
pub const IID_IPrintDialogServices = &IID_IPrintDialogServices_Value;
pub const IPrintDialogServices = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCurrentDevMode: fn(
            self: *const IPrintDialogServices,
            pDevMode: ?*DEVMODEA,
            pcbSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentPrinterName: fn(
            self: *const IPrintDialogServices,
            pPrinterName: ?[*:0]u16,
            pcchSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentPortName: fn(
            self: *const IPrintDialogServices,
            pPortName: ?[*:0]u16,
            pcchSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintDialogServices_GetCurrentDevMode(self: *const T, pDevMode: ?*DEVMODEA, pcbSize: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintDialogServices.VTable, self.vtable).GetCurrentDevMode(@ptrCast(*const IPrintDialogServices, self), pDevMode, pcbSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintDialogServices_GetCurrentPrinterName(self: *const T, pPrinterName: ?[*:0]u16, pcchSize: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintDialogServices.VTable, self.vtable).GetCurrentPrinterName(@ptrCast(*const IPrintDialogServices, self), pPrinterName, pcchSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintDialogServices_GetCurrentPortName(self: *const T, pPortName: ?[*:0]u16, pcchSize: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintDialogServices.VTable, self.vtable).GetCurrentPortName(@ptrCast(*const IPrintDialogServices, self), pPortName, pcchSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};





pub const LPPAGEPAINTHOOK = fn(
    param0: ?HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) usize;

pub const LPPAGESETUPHOOK = fn(
    param0: ?HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) usize;

























pub const OPENFILENAME_NT4A = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HINSTANCE,
        lpstrFilter: ?[*:0]const u8,
        lpstrCustomFilter: ?PSTR,
        nMaxCustFilter: u32,
        nFilterIndex: u32,
        lpstrFile: ?PSTR,
        nMaxFile: u32,
        lpstrFileTitle: ?PSTR,
        nMaxFileTitle: u32,
        lpstrInitialDir: ?[*:0]const u8,
        lpstrTitle: ?[*:0]const u8,
        Flags: u32,
        nFileOffset: u16,
        nFileExtension: u16,
        lpstrDefExt: ?[*:0]const u8,
        lCustData: LPARAM,
        lpfnHook: ?LPOFNHOOKPROC,
        lpTemplateName: ?[*:0]const u8,
    },
    .X86 => packed struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HINSTANCE,
        lpstrFilter: ?[*:0]const u8,
        lpstrCustomFilter: ?PSTR,
        nMaxCustFilter: u32,
        nFilterIndex: u32,
        lpstrFile: ?PSTR,
        nMaxFile: u32,
        lpstrFileTitle: ?PSTR,
        nMaxFileTitle: u32,
        lpstrInitialDir: ?[*:0]const u8,
        lpstrTitle: ?[*:0]const u8,
        Flags: u32,
        nFileOffset: u16,
        nFileExtension: u16,
        lpstrDefExt: ?[*:0]const u8,
        lCustData: LPARAM,
        lpfnHook: ?LPOFNHOOKPROC,
        lpTemplateName: ?[*:0]const u8,
    },
};
pub const OPENFILENAME_NT4W = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HINSTANCE,
        lpstrFilter: ?[*:0]const u16,
        lpstrCustomFilter: ?PWSTR,
        nMaxCustFilter: u32,
        nFilterIndex: u32,
        lpstrFile: ?PWSTR,
        nMaxFile: u32,
        lpstrFileTitle: ?PWSTR,
        nMaxFileTitle: u32,
        lpstrInitialDir: ?[*:0]const u16,
        lpstrTitle: ?[*:0]const u16,
        Flags: u32,
        nFileOffset: u16,
        nFileExtension: u16,
        lpstrDefExt: ?[*:0]const u16,
        lCustData: LPARAM,
        lpfnHook: ?LPOFNHOOKPROC,
        lpTemplateName: ?[*:0]const u16,
    },
    .X86 => packed struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HINSTANCE,
        lpstrFilter: ?[*:0]const u16,
        lpstrCustomFilter: ?PWSTR,
        nMaxCustFilter: u32,
        nFilterIndex: u32,
        lpstrFile: ?PWSTR,
        nMaxFile: u32,
        lpstrFileTitle: ?PWSTR,
        nMaxFileTitle: u32,
        lpstrInitialDir: ?[*:0]const u16,
        lpstrTitle: ?[*:0]const u16,
        Flags: u32,
        nFileOffset: u16,
        nFileExtension: u16,
        lpstrDefExt: ?[*:0]const u16,
        lCustData: LPARAM,
        lpfnHook: ?LPOFNHOOKPROC,
        lpTemplateName: ?[*:0]const u16,
    },
};
pub const OPENFILENAMEA = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HINSTANCE,
        lpstrFilter: ?[*:0]const u8,
        lpstrCustomFilter: ?PSTR,
        nMaxCustFilter: u32,
        nFilterIndex: u32,
        lpstrFile: ?PSTR,
        nMaxFile: u32,
        lpstrFileTitle: ?PSTR,
        nMaxFileTitle: u32,
        lpstrInitialDir: ?[*:0]const u8,
        lpstrTitle: ?[*:0]const u8,
        Flags: OPEN_FILENAME_FLAGS,
        nFileOffset: u16,
        nFileExtension: u16,
        lpstrDefExt: ?[*:0]const u8,
        lCustData: LPARAM,
        lpfnHook: ?LPOFNHOOKPROC,
        lpTemplateName: ?[*:0]const u8,
        pvReserved: ?*anyopaque,
        dwReserved: u32,
        FlagsEx: OPEN_FILENAME_FLAGS_EX,
    },
    .X86 => packed struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HINSTANCE,
        lpstrFilter: ?[*:0]const u8,
        lpstrCustomFilter: ?PSTR,
        nMaxCustFilter: u32,
        nFilterIndex: u32,
        lpstrFile: ?PSTR,
        nMaxFile: u32,
        lpstrFileTitle: ?PSTR,
        nMaxFileTitle: u32,
        lpstrInitialDir: ?[*:0]const u8,
        lpstrTitle: ?[*:0]const u8,
        Flags: OPEN_FILENAME_FLAGS,
        nFileOffset: u16,
        nFileExtension: u16,
        lpstrDefExt: ?[*:0]const u8,
        lCustData: LPARAM,
        lpfnHook: ?LPOFNHOOKPROC,
        lpTemplateName: ?[*:0]const u8,
        pvReserved: ?*anyopaque,
        dwReserved: u32,
        FlagsEx: OPEN_FILENAME_FLAGS_EX,
    },
};
pub const OPENFILENAMEW = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HINSTANCE,
        lpstrFilter: ?[*:0]const u16,
        lpstrCustomFilter: ?PWSTR,
        nMaxCustFilter: u32,
        nFilterIndex: u32,
        lpstrFile: ?PWSTR,
        nMaxFile: u32,
        lpstrFileTitle: ?PWSTR,
        nMaxFileTitle: u32,
        lpstrInitialDir: ?[*:0]const u16,
        lpstrTitle: ?[*:0]const u16,
        Flags: OPEN_FILENAME_FLAGS,
        nFileOffset: u16,
        nFileExtension: u16,
        lpstrDefExt: ?[*:0]const u16,
        lCustData: LPARAM,
        lpfnHook: ?LPOFNHOOKPROC,
        lpTemplateName: ?[*:0]const u16,
        pvReserved: ?*anyopaque,
        dwReserved: u32,
        FlagsEx: OPEN_FILENAME_FLAGS_EX,
    },
    .X86 => packed struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HINSTANCE,
        lpstrFilter: ?[*:0]const u16,
        lpstrCustomFilter: ?PWSTR,
        nMaxCustFilter: u32,
        nFilterIndex: u32,
        lpstrFile: ?PWSTR,
        nMaxFile: u32,
        lpstrFileTitle: ?PWSTR,
        nMaxFileTitle: u32,
        lpstrInitialDir: ?[*:0]const u16,
        lpstrTitle: ?[*:0]const u16,
        Flags: OPEN_FILENAME_FLAGS,
        nFileOffset: u16,
        nFileExtension: u16,
        lpstrDefExt: ?[*:0]const u16,
        lCustData: LPARAM,
        lpfnHook: ?LPOFNHOOKPROC,
        lpTemplateName: ?[*:0]const u16,
        pvReserved: ?*anyopaque,
        dwReserved: u32,
        FlagsEx: OPEN_FILENAME_FLAGS_EX,
    },
};
pub const OFNOTIFYA = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        hdr: NMHDR,
        lpOFN: ?*OPENFILENAMEA,
        pszFile: ?PSTR,
    },
    .X86 => packed struct {
        hdr: NMHDR,
        lpOFN: ?*OPENFILENAMEA,
        pszFile: ?PSTR,
    },
};
pub const OFNOTIFYW = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        hdr: NMHDR,
        lpOFN: ?*OPENFILENAMEW,
        pszFile: ?PWSTR,
    },
    .X86 => packed struct {
        hdr: NMHDR,
        lpOFN: ?*OPENFILENAMEW,
        pszFile: ?PWSTR,
    },
};
pub const OFNOTIFYEXA = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        hdr: NMHDR,
        lpOFN: ?*OPENFILENAMEA,
        psf: ?*anyopaque,
        pidl: ?*anyopaque,
    },
    .X86 => packed struct {
        hdr: NMHDR,
        lpOFN: ?*OPENFILENAMEA,
        psf: ?*anyopaque,
        pidl: ?*anyopaque,
    },
};
pub const OFNOTIFYEXW = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        hdr: NMHDR,
        lpOFN: ?*OPENFILENAMEW,
        psf: ?*anyopaque,
        pidl: ?*anyopaque,
    },
    .X86 => packed struct {
        hdr: NMHDR,
        lpOFN: ?*OPENFILENAMEW,
        psf: ?*anyopaque,
        pidl: ?*anyopaque,
    },
};
pub const CHOOSECOLORA = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HWND,
        rgbResult: u32,
        lpCustColors: ?*u32,
        Flags: u32,
        lCustData: LPARAM,
        lpfnHook: ?LPCCHOOKPROC,
        lpTemplateName: ?[*:0]const u8,
    },
    .X86 => packed struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HWND,
        rgbResult: u32,
        lpCustColors: ?*u32,
        Flags: u32,
        lCustData: LPARAM,
        lpfnHook: ?LPCCHOOKPROC,
        lpTemplateName: ?[*:0]const u8,
    },
};
pub const CHOOSECOLORW = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HWND,
        rgbResult: u32,
        lpCustColors: ?*u32,
        Flags: u32,
        lCustData: LPARAM,
        lpfnHook: ?LPCCHOOKPROC,
        lpTemplateName: ?[*:0]const u16,
    },
    .X86 => packed struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HWND,
        rgbResult: u32,
        lpCustColors: ?*u32,
        Flags: u32,
        lCustData: LPARAM,
        lpfnHook: ?LPCCHOOKPROC,
        lpTemplateName: ?[*:0]const u16,
    },
};
pub const FINDREPLACEA = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HINSTANCE,
        Flags: FINDREPLACE_FLAGS,
        lpstrFindWhat: ?PSTR,
        lpstrReplaceWith: ?PSTR,
        wFindWhatLen: u16,
        wReplaceWithLen: u16,
        lCustData: LPARAM,
        lpfnHook: ?LPFRHOOKPROC,
        lpTemplateName: ?[*:0]const u8,
    },
    .X86 => packed struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HINSTANCE,
        Flags: FINDREPLACE_FLAGS,
        lpstrFindWhat: ?PSTR,
        lpstrReplaceWith: ?PSTR,
        wFindWhatLen: u16,
        wReplaceWithLen: u16,
        lCustData: LPARAM,
        lpfnHook: ?LPFRHOOKPROC,
        lpTemplateName: ?[*:0]const u8,
    },
};
pub const FINDREPLACEW = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HINSTANCE,
        Flags: FINDREPLACE_FLAGS,
        lpstrFindWhat: ?PWSTR,
        lpstrReplaceWith: ?PWSTR,
        wFindWhatLen: u16,
        wReplaceWithLen: u16,
        lCustData: LPARAM,
        lpfnHook: ?LPFRHOOKPROC,
        lpTemplateName: ?[*:0]const u16,
    },
    .X86 => packed struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hInstance: ?HINSTANCE,
        Flags: FINDREPLACE_FLAGS,
        lpstrFindWhat: ?PWSTR,
        lpstrReplaceWith: ?PWSTR,
        wFindWhatLen: u16,
        wReplaceWithLen: u16,
        lCustData: LPARAM,
        lpfnHook: ?LPFRHOOKPROC,
        lpTemplateName: ?[*:0]const u16,
    },
};
pub const CHOOSEFONTA = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDC: ?HDC,
        lpLogFont: ?*LOGFONTA,
        iPointSize: i32,
        Flags: CHOOSEFONT_FLAGS,
        rgbColors: u32,
        lCustData: LPARAM,
        lpfnHook: ?LPCFHOOKPROC,
        lpTemplateName: ?[*:0]const u8,
        hInstance: ?HINSTANCE,
        lpszStyle: ?PSTR,
        nFontType: CHOOSEFONT_FONT_TYPE,
        ___MISSING_ALIGNMENT__: u16,
        nSizeMin: i32,
        nSizeMax: i32,
    },
    .X86 => packed struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDC: ?HDC,
        lpLogFont: ?*LOGFONTA,
        iPointSize: i32,
        Flags: CHOOSEFONT_FLAGS,
        rgbColors: u32,
        lCustData: LPARAM,
        lpfnHook: ?LPCFHOOKPROC,
        lpTemplateName: ?[*:0]const u8,
        hInstance: ?HINSTANCE,
        lpszStyle: ?PSTR,
        nFontType: CHOOSEFONT_FONT_TYPE,
        ___MISSING_ALIGNMENT__: u16,
        nSizeMin: i32,
        nSizeMax: i32,
    },
};
pub const CHOOSEFONTW = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDC: ?HDC,
        lpLogFont: ?*LOGFONTW,
        iPointSize: i32,
        Flags: CHOOSEFONT_FLAGS,
        rgbColors: u32,
        lCustData: LPARAM,
        lpfnHook: ?LPCFHOOKPROC,
        lpTemplateName: ?[*:0]const u16,
        hInstance: ?HINSTANCE,
        lpszStyle: ?PWSTR,
        nFontType: CHOOSEFONT_FONT_TYPE,
        ___MISSING_ALIGNMENT__: u16,
        nSizeMin: i32,
        nSizeMax: i32,
    },
    .X86 => packed struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDC: ?HDC,
        lpLogFont: ?*LOGFONTW,
        iPointSize: i32,
        Flags: CHOOSEFONT_FLAGS,
        rgbColors: u32,
        lCustData: LPARAM,
        lpfnHook: ?LPCFHOOKPROC,
        lpTemplateName: ?[*:0]const u16,
        hInstance: ?HINSTANCE,
        lpszStyle: ?PWSTR,
        nFontType: CHOOSEFONT_FONT_TYPE,
        ___MISSING_ALIGNMENT__: u16,
        nSizeMin: i32,
        nSizeMax: i32,
    },
};
pub const PRINTDLGA = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDevMode: isize,
        hDevNames: isize,
        hDC: ?HDC,
        Flags: PRINTDLGEX_FLAGS,
        nFromPage: u16,
        nToPage: u16,
        nMinPage: u16,
        nMaxPage: u16,
        nCopies: u16,
        hInstance: ?HINSTANCE,
        lCustData: LPARAM,
        lpfnPrintHook: ?LPPRINTHOOKPROC,
        lpfnSetupHook: ?LPSETUPHOOKPROC,
        lpPrintTemplateName: ?[*:0]const u8,
        lpSetupTemplateName: ?[*:0]const u8,
        hPrintTemplate: isize,
        hSetupTemplate: isize,
    },
    .X86 => packed struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDevMode: isize,
        hDevNames: isize,
        hDC: ?HDC,
        Flags: PRINTDLGEX_FLAGS,
        nFromPage: u16,
        nToPage: u16,
        nMinPage: u16,
        nMaxPage: u16,
        nCopies: u16,
        hInstance: ?HINSTANCE,
        lCustData: LPARAM,
        lpfnPrintHook: ?LPPRINTHOOKPROC,
        lpfnSetupHook: ?LPSETUPHOOKPROC,
        lpPrintTemplateName: ?[*:0]const u8,
        lpSetupTemplateName: ?[*:0]const u8,
        hPrintTemplate: isize,
        hSetupTemplate: isize,
    },
};
pub const PRINTDLGW = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDevMode: isize,
        hDevNames: isize,
        hDC: ?HDC,
        Flags: PRINTDLGEX_FLAGS,
        nFromPage: u16,
        nToPage: u16,
        nMinPage: u16,
        nMaxPage: u16,
        nCopies: u16,
        hInstance: ?HINSTANCE,
        lCustData: LPARAM,
        lpfnPrintHook: ?LPPRINTHOOKPROC,
        lpfnSetupHook: ?LPSETUPHOOKPROC,
        lpPrintTemplateName: ?[*:0]const u16,
        lpSetupTemplateName: ?[*:0]const u16,
        hPrintTemplate: isize,
        hSetupTemplate: isize,
    },
    .X86 => packed struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDevMode: isize,
        hDevNames: isize,
        hDC: ?HDC,
        Flags: PRINTDLGEX_FLAGS,
        nFromPage: u16,
        nToPage: u16,
        nMinPage: u16,
        nMaxPage: u16,
        nCopies: u16,
        hInstance: ?HINSTANCE,
        lCustData: LPARAM,
        lpfnPrintHook: ?LPPRINTHOOKPROC,
        lpfnSetupHook: ?LPSETUPHOOKPROC,
        lpPrintTemplateName: ?[*:0]const u16,
        lpSetupTemplateName: ?[*:0]const u16,
        hPrintTemplate: isize,
        hSetupTemplate: isize,
    },
};
pub const PRINTPAGERANGE = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        nFromPage: u32,
        nToPage: u32,
    },
    .X86 => packed struct {
        nFromPage: u32,
        nToPage: u32,
    },
};
pub const PRINTDLGEXA = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDevMode: isize,
        hDevNames: isize,
        hDC: ?HDC,
        Flags: PRINTDLGEX_FLAGS,
        Flags2: u32,
        ExclusionFlags: u32,
        nPageRanges: u32,
        nMaxPageRanges: u32,
        lpPageRanges: ?*PRINTPAGERANGE,
        nMinPage: u32,
        nMaxPage: u32,
        nCopies: u32,
        hInstance: ?HINSTANCE,
        lpPrintTemplateName: ?[*:0]const u8,
        lpCallback: ?*IUnknown,
        nPropertyPages: u32,
        lphPropertyPages: ?*?HPROPSHEETPAGE,
        nStartPage: u32,
        dwResultAction: u32,
    },
    .X86 => packed struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDevMode: isize,
        hDevNames: isize,
        hDC: ?HDC,
        Flags: PRINTDLGEX_FLAGS,
        Flags2: u32,
        ExclusionFlags: u32,
        nPageRanges: u32,
        nMaxPageRanges: u32,
        lpPageRanges: ?*PRINTPAGERANGE,
        nMinPage: u32,
        nMaxPage: u32,
        nCopies: u32,
        hInstance: ?HINSTANCE,
        lpPrintTemplateName: ?[*:0]const u8,
        lpCallback: ?*IUnknown,
        nPropertyPages: u32,
        lphPropertyPages: ?*?HPROPSHEETPAGE,
        nStartPage: u32,
        dwResultAction: u32,
    },
};
pub const PRINTDLGEXW = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDevMode: isize,
        hDevNames: isize,
        hDC: ?HDC,
        Flags: PRINTDLGEX_FLAGS,
        Flags2: u32,
        ExclusionFlags: u32,
        nPageRanges: u32,
        nMaxPageRanges: u32,
        lpPageRanges: ?*PRINTPAGERANGE,
        nMinPage: u32,
        nMaxPage: u32,
        nCopies: u32,
        hInstance: ?HINSTANCE,
        lpPrintTemplateName: ?[*:0]const u16,
        lpCallback: ?*IUnknown,
        nPropertyPages: u32,
        lphPropertyPages: ?*?HPROPSHEETPAGE,
        nStartPage: u32,
        dwResultAction: u32,
    },
    .X86 => packed struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDevMode: isize,
        hDevNames: isize,
        hDC: ?HDC,
        Flags: PRINTDLGEX_FLAGS,
        Flags2: u32,
        ExclusionFlags: u32,
        nPageRanges: u32,
        nMaxPageRanges: u32,
        lpPageRanges: ?*PRINTPAGERANGE,
        nMinPage: u32,
        nMaxPage: u32,
        nCopies: u32,
        hInstance: ?HINSTANCE,
        lpPrintTemplateName: ?[*:0]const u16,
        lpCallback: ?*IUnknown,
        nPropertyPages: u32,
        lphPropertyPages: ?*?HPROPSHEETPAGE,
        nStartPage: u32,
        dwResultAction: u32,
    },
};
pub const DEVNAMES = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        wDriverOffset: u16,
        wDeviceOffset: u16,
        wOutputOffset: u16,
        wDefault: u16,
    },
    .X86 => packed struct {
        wDriverOffset: u16,
        wDeviceOffset: u16,
        wOutputOffset: u16,
        wDefault: u16,
    },
};
pub const PAGESETUPDLGA = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDevMode: isize,
        hDevNames: isize,
        Flags: PAGESETUPDLG_FLAGS,
        ptPaperSize: POINT,
        rtMinMargin: RECT,
        rtMargin: RECT,
        hInstance: ?HINSTANCE,
        lCustData: LPARAM,
        lpfnPageSetupHook: ?LPPAGESETUPHOOK,
        lpfnPagePaintHook: ?LPPAGEPAINTHOOK,
        lpPageSetupTemplateName: ?[*:0]const u8,
        hPageSetupTemplate: isize,
    },
    .X86 => packed struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDevMode: isize,
        hDevNames: isize,
        Flags: PAGESETUPDLG_FLAGS,
        ptPaperSize: POINT,
        rtMinMargin: RECT,
        rtMargin: RECT,
        hInstance: ?HINSTANCE,
        lCustData: LPARAM,
        lpfnPageSetupHook: ?LPPAGESETUPHOOK,
        lpfnPagePaintHook: ?LPPAGEPAINTHOOK,
        lpPageSetupTemplateName: ?[*:0]const u8,
        hPageSetupTemplate: isize,
    },
};
pub const PAGESETUPDLGW = switch(@import("../../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDevMode: isize,
        hDevNames: isize,
        Flags: PAGESETUPDLG_FLAGS,
        ptPaperSize: POINT,
        rtMinMargin: RECT,
        rtMargin: RECT,
        hInstance: ?HINSTANCE,
        lCustData: LPARAM,
        lpfnPageSetupHook: ?LPPAGESETUPHOOK,
        lpfnPagePaintHook: ?LPPAGEPAINTHOOK,
        lpPageSetupTemplateName: ?[*:0]const u16,
        hPageSetupTemplate: isize,
    },
    .X86 => packed struct {
        lStructSize: u32,
        hwndOwner: ?HWND,
        hDevMode: isize,
        hDevNames: isize,
        Flags: PAGESETUPDLG_FLAGS,
        ptPaperSize: POINT,
        rtMinMargin: RECT,
        rtMargin: RECT,
        hInstance: ?HINSTANCE,
        lCustData: LPARAM,
        lpfnPageSetupHook: ?LPPAGESETUPHOOK,
        lpfnPagePaintHook: ?LPPAGEPAINTHOOK,
        lpPageSetupTemplateName: ?[*:0]const u16,
        hPageSetupTemplate: isize,
    },
};

//--------------------------------------------------------------------------------
// Section: Functions (21)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "COMDLG32" fn GetOpenFileNameA(
    param0: ?*OPENFILENAMEA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "COMDLG32" fn GetOpenFileNameW(
    param0: ?*OPENFILENAMEW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "COMDLG32" fn GetSaveFileNameA(
    param0: ?*OPENFILENAMEA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "COMDLG32" fn GetSaveFileNameW(
    param0: ?*OPENFILENAMEW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "COMDLG32" fn GetFileTitleA(
    param0: ?[*:0]const u8,
    Buf: [*:0]u8,
    cchSize: u16,
) callconv(@import("std").os.windows.WINAPI) i16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "COMDLG32" fn GetFileTitleW(
    param0: ?[*:0]const u16,
    Buf: [*:0]u16,
    cchSize: u16,
) callconv(@import("std").os.windows.WINAPI) i16;

pub extern "COMDLG32" fn ChooseColorA(
    param0: ?*CHOOSECOLORA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn ChooseColorW(
    param0: ?*CHOOSECOLORW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "COMDLG32" fn FindTextA(
    param0: ?*FINDREPLACEA,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "COMDLG32" fn FindTextW(
    param0: ?*FINDREPLACEW,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "COMDLG32" fn ReplaceTextA(
    param0: ?*FINDREPLACEA,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

// TODO: this type is limited to platform 'windows5.0'
pub extern "COMDLG32" fn ReplaceTextW(
    param0: ?*FINDREPLACEW,
) callconv(@import("std").os.windows.WINAPI) ?HWND;

pub extern "COMDLG32" fn ChooseFontA(
    param0: ?*CHOOSEFONTA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn ChooseFontW(
    param0: ?*CHOOSEFONTW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn PrintDlgA(
    pPD: ?*PRINTDLGA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn PrintDlgW(
    pPD: ?*PRINTDLGW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn PrintDlgExA(
    pPD: ?*PRINTDLGEXA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "COMDLG32" fn PrintDlgExW(
    pPD: ?*PRINTDLGEXW,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "COMDLG32" fn CommDlgExtendedError(
) callconv(@import("std").os.windows.WINAPI) COMMON_DLG_ERRORS;

pub extern "COMDLG32" fn PageSetupDlgA(
    param0: ?*PAGESETUPDLGA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn PageSetupDlgW(
    param0: ?*PAGESETUPDLGW,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (20)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const OPENFILENAME_NT4 = thismodule.OPENFILENAME_NT4A;
        pub const OPENFILENAME = thismodule.OPENFILENAMEA;
        pub const OFNOTIFY = thismodule.OFNOTIFYA;
        pub const OFNOTIFYEX = thismodule.OFNOTIFYEXA;
        pub const CHOOSECOLOR = thismodule.CHOOSECOLORA;
        pub const FINDREPLACE = thismodule.FINDREPLACEA;
        pub const CHOOSEFONT = thismodule.CHOOSEFONTA;
        pub const PRINTDLG = thismodule.PRINTDLGA;
        pub const PRINTDLGEX = thismodule.PRINTDLGEXA;
        pub const PAGESETUPDLG = thismodule.PAGESETUPDLGA;
        pub const GetOpenFileName = thismodule.GetOpenFileNameA;
        pub const GetSaveFileName = thismodule.GetSaveFileNameA;
        pub const GetFileTitle = thismodule.GetFileTitleA;
        pub const ChooseColor = thismodule.ChooseColorA;
        pub const FindText = thismodule.FindTextA;
        pub const ReplaceText = thismodule.ReplaceTextA;
        pub const ChooseFont = thismodule.ChooseFontA;
        pub const PrintDlg = thismodule.PrintDlgA;
        pub const PrintDlgEx = thismodule.PrintDlgExA;
        pub const PageSetupDlg = thismodule.PageSetupDlgA;
    },
    .wide => struct {
        pub const OPENFILENAME_NT4 = thismodule.OPENFILENAME_NT4W;
        pub const OPENFILENAME = thismodule.OPENFILENAMEW;
        pub const OFNOTIFY = thismodule.OFNOTIFYW;
        pub const OFNOTIFYEX = thismodule.OFNOTIFYEXW;
        pub const CHOOSECOLOR = thismodule.CHOOSECOLORW;
        pub const FINDREPLACE = thismodule.FINDREPLACEW;
        pub const CHOOSEFONT = thismodule.CHOOSEFONTW;
        pub const PRINTDLG = thismodule.PRINTDLGW;
        pub const PRINTDLGEX = thismodule.PRINTDLGEXW;
        pub const PAGESETUPDLG = thismodule.PAGESETUPDLGW;
        pub const GetOpenFileName = thismodule.GetOpenFileNameW;
        pub const GetSaveFileName = thismodule.GetSaveFileNameW;
        pub const GetFileTitle = thismodule.GetFileTitleW;
        pub const ChooseColor = thismodule.ChooseColorW;
        pub const FindText = thismodule.FindTextW;
        pub const ReplaceText = thismodule.ReplaceTextW;
        pub const ChooseFont = thismodule.ChooseFontW;
        pub const PrintDlg = thismodule.PrintDlgW;
        pub const PrintDlgEx = thismodule.PrintDlgExW;
        pub const PageSetupDlg = thismodule.PageSetupDlgW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const OPENFILENAME_NT4 = *opaque{};
        pub const OPENFILENAME = *opaque{};
        pub const OFNOTIFY = *opaque{};
        pub const OFNOTIFYEX = *opaque{};
        pub const CHOOSECOLOR = *opaque{};
        pub const FINDREPLACE = *opaque{};
        pub const CHOOSEFONT = *opaque{};
        pub const PRINTDLG = *opaque{};
        pub const PRINTDLGEX = *opaque{};
        pub const PAGESETUPDLG = *opaque{};
        pub const GetOpenFileName = *opaque{};
        pub const GetSaveFileName = *opaque{};
        pub const GetFileTitle = *opaque{};
        pub const ChooseColor = *opaque{};
        pub const FindText = *opaque{};
        pub const ReplaceText = *opaque{};
        pub const ChooseFont = *opaque{};
        pub const PrintDlg = *opaque{};
        pub const PrintDlgEx = *opaque{};
        pub const PageSetupDlg = *opaque{};
    } else struct {
        pub const OPENFILENAME_NT4 = @compileError("'OPENFILENAME_NT4' requires that UNICODE be set to true or false in the root module");
        pub const OPENFILENAME = @compileError("'OPENFILENAME' requires that UNICODE be set to true or false in the root module");
        pub const OFNOTIFY = @compileError("'OFNOTIFY' requires that UNICODE be set to true or false in the root module");
        pub const OFNOTIFYEX = @compileError("'OFNOTIFYEX' requires that UNICODE be set to true or false in the root module");
        pub const CHOOSECOLOR = @compileError("'CHOOSECOLOR' requires that UNICODE be set to true or false in the root module");
        pub const FINDREPLACE = @compileError("'FINDREPLACE' requires that UNICODE be set to true or false in the root module");
        pub const CHOOSEFONT = @compileError("'CHOOSEFONT' requires that UNICODE be set to true or false in the root module");
        pub const PRINTDLG = @compileError("'PRINTDLG' requires that UNICODE be set to true or false in the root module");
        pub const PRINTDLGEX = @compileError("'PRINTDLGEX' requires that UNICODE be set to true or false in the root module");
        pub const PAGESETUPDLG = @compileError("'PAGESETUPDLG' requires that UNICODE be set to true or false in the root module");
        pub const GetOpenFileName = @compileError("'GetOpenFileName' requires that UNICODE be set to true or false in the root module");
        pub const GetSaveFileName = @compileError("'GetSaveFileName' requires that UNICODE be set to true or false in the root module");
        pub const GetFileTitle = @compileError("'GetFileTitle' requires that UNICODE be set to true or false in the root module");
        pub const ChooseColor = @compileError("'ChooseColor' requires that UNICODE be set to true or false in the root module");
        pub const FindText = @compileError("'FindText' requires that UNICODE be set to true or false in the root module");
        pub const ReplaceText = @compileError("'ReplaceText' requires that UNICODE be set to true or false in the root module");
        pub const ChooseFont = @compileError("'ChooseFont' requires that UNICODE be set to true or false in the root module");
        pub const PrintDlg = @compileError("'PrintDlg' requires that UNICODE be set to true or false in the root module");
        pub const PrintDlgEx = @compileError("'PrintDlgEx' requires that UNICODE be set to true or false in the root module");
        pub const PageSetupDlg = @compileError("'PageSetupDlg' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (18)
//--------------------------------------------------------------------------------
const BOOL = @import("../../foundation.zig").BOOL;
const DEVMODEA = @import("../../graphics/gdi.zig").DEVMODEA;
const HDC = @import("../../graphics/gdi.zig").HDC;
const HINSTANCE = @import("../../foundation.zig").HINSTANCE;
const HPROPSHEETPAGE = @import("../../ui/controls.zig").HPROPSHEETPAGE;
const HRESULT = @import("../../foundation.zig").HRESULT;
const HWND = @import("../../foundation.zig").HWND;
const IUnknown = @import("../../system/com.zig").IUnknown;
const LOGFONTA = @import("../../graphics/gdi.zig").LOGFONTA;
const LOGFONTW = @import("../../graphics/gdi.zig").LOGFONTW;
const LPARAM = @import("../../foundation.zig").LPARAM;
const LRESULT = @import("../../foundation.zig").LRESULT;
const NMHDR = @import("../../ui/controls.zig").NMHDR;
const POINT = @import("../../foundation.zig").POINT;
const PSTR = @import("../../foundation.zig").PSTR;
const PWSTR = @import("../../foundation.zig").PWSTR;
const RECT = @import("../../foundation.zig").RECT;
const WPARAM = @import("../../foundation.zig").WPARAM;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "LPOFNHOOKPROC")) { _ = LPOFNHOOKPROC; }
    if (@hasDecl(@This(), "LPCCHOOKPROC")) { _ = LPCCHOOKPROC; }
    if (@hasDecl(@This(), "LPFRHOOKPROC")) { _ = LPFRHOOKPROC; }
    if (@hasDecl(@This(), "LPCFHOOKPROC")) { _ = LPCFHOOKPROC; }
    if (@hasDecl(@This(), "LPPRINTHOOKPROC")) { _ = LPPRINTHOOKPROC; }
    if (@hasDecl(@This(), "LPSETUPHOOKPROC")) { _ = LPSETUPHOOKPROC; }
    if (@hasDecl(@This(), "LPPAGEPAINTHOOK")) { _ = LPPAGEPAINTHOOK; }
    if (@hasDecl(@This(), "LPPAGESETUPHOOK")) { _ = LPPAGESETUPHOOK; }

    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
