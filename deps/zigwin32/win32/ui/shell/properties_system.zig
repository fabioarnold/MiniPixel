//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (1)
//--------------------------------------------------------------------------------
pub const PKEY_PIDSTR_MAX = @as(u32, 10);

//--------------------------------------------------------------------------------
// Section: Types (61)
//--------------------------------------------------------------------------------
pub const PROPERTYKEY = extern struct {
    fmtid: Guid,
    pid: u32,
};

const CLSID_InMemoryPropertyStore_Value = @import("../../zig.zig").Guid.initString("9a02e012-6303-4e1e-b9a1-630f802592c5");
pub const CLSID_InMemoryPropertyStore = &CLSID_InMemoryPropertyStore_Value;

const CLSID_InMemoryPropertyStoreMarshalByValue_Value = @import("../../zig.zig").Guid.initString("d4ca0e2d-6da7-4b75-a97c-5f306f0eaedc");
pub const CLSID_InMemoryPropertyStoreMarshalByValue = &CLSID_InMemoryPropertyStoreMarshalByValue_Value;

const CLSID_PropertySystem_Value = @import("../../zig.zig").Guid.initString("b8967f85-58ae-4f46-9fb2-5d7904798f4b");
pub const CLSID_PropertySystem = &CLSID_PropertySystem_Value;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IInitializeWithFile_Value = @import("../../zig.zig").Guid.initString("b7d14566-0509-4cce-a71f-0a554233bd9b");
pub const IID_IInitializeWithFile = &IID_IInitializeWithFile_Value;
pub const IInitializeWithFile = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IInitializeWithFile,
            pszFilePath: ?[*:0]const u16,
            grfMode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInitializeWithFile_Initialize(self: *const T, pszFilePath: ?[*:0]const u16, grfMode: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInitializeWithFile.VTable, self.vtable).Initialize(@ptrCast(*const IInitializeWithFile, self), pszFilePath, grfMode);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IInitializeWithStream_Value = @import("../../zig.zig").Guid.initString("b824b49d-22ac-4161-ac8a-9916e8fa3f7f");
pub const IID_IInitializeWithStream = &IID_IInitializeWithStream_Value;
pub const IInitializeWithStream = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IInitializeWithStream,
            pstream: ?*IStream,
            grfMode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInitializeWithStream_Initialize(self: *const T, pstream: ?*IStream, grfMode: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInitializeWithStream.VTable, self.vtable).Initialize(@ptrCast(*const IInitializeWithStream, self), pstream, grfMode);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPropertyStore_Value = @import("../../zig.zig").Guid.initString("886d8eeb-8cf2-4446-8d02-cdba1dbdcf99");
pub const IID_IPropertyStore = &IID_IPropertyStore_Value;
pub const IPropertyStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IPropertyStore,
            cProps: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IPropertyStore,
            iProp: u32,
            pkey: ?*PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const IPropertyStore,
            key: ?*const PROPERTYKEY,
            pv: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: fn(
            self: *const IPropertyStore,
            key: ?*const PROPERTYKEY,
            propvar: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: fn(
            self: *const IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStore_GetCount(self: *const T, cProps: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStore.VTable, self.vtable).GetCount(@ptrCast(*const IPropertyStore, self), cProps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStore_GetAt(self: *const T, iProp: u32, pkey: ?*PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStore.VTable, self.vtable).GetAt(@ptrCast(*const IPropertyStore, self), iProp, pkey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStore_GetValue(self: *const T, key: ?*const PROPERTYKEY, pv: ?*PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStore.VTable, self.vtable).GetValue(@ptrCast(*const IPropertyStore, self), key, pv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStore_SetValue(self: *const T, key: ?*const PROPERTYKEY, propvar: ?*const PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStore.VTable, self.vtable).SetValue(@ptrCast(*const IPropertyStore, self), key, propvar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStore_Commit(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStore.VTable, self.vtable).Commit(@ptrCast(*const IPropertyStore, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INamedPropertyStore_Value = @import("../../zig.zig").Guid.initString("71604b0f-97b0-4764-8577-2f13e98a1422");
pub const IID_INamedPropertyStore = &IID_INamedPropertyStore_Value;
pub const INamedPropertyStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNamedValue: fn(
            self: *const INamedPropertyStore,
            pszName: ?[*:0]const u16,
            ppropvar: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNamedValue: fn(
            self: *const INamedPropertyStore,
            pszName: ?[*:0]const u16,
            propvar: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameCount: fn(
            self: *const INamedPropertyStore,
            pdwCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameAt: fn(
            self: *const INamedPropertyStore,
            iProp: u32,
            pbstrName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INamedPropertyStore_GetNamedValue(self: *const T, pszName: ?[*:0]const u16, ppropvar: ?*PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const INamedPropertyStore.VTable, self.vtable).GetNamedValue(@ptrCast(*const INamedPropertyStore, self), pszName, ppropvar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INamedPropertyStore_SetNamedValue(self: *const T, pszName: ?[*:0]const u16, propvar: ?*const PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const INamedPropertyStore.VTable, self.vtable).SetNamedValue(@ptrCast(*const INamedPropertyStore, self), pszName, propvar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INamedPropertyStore_GetNameCount(self: *const T, pdwCount: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INamedPropertyStore.VTable, self.vtable).GetNameCount(@ptrCast(*const INamedPropertyStore, self), pdwCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INamedPropertyStore_GetNameAt(self: *const T, iProp: u32, pbstrName: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const INamedPropertyStore.VTable, self.vtable).GetNameAt(@ptrCast(*const INamedPropertyStore, self), iProp, pbstrName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const GETPROPERTYSTOREFLAGS = enum(i32) {
    DEFAULT = 0,
    HANDLERPROPERTIESONLY = 1,
    READWRITE = 2,
    TEMPORARY = 4,
    FASTPROPERTIESONLY = 8,
    OPENSLOWITEM = 16,
    DELAYCREATION = 32,
    BESTEFFORT = 64,
    NO_OPLOCK = 128,
    PREFERQUERYPROPERTIES = 256,
    EXTRINSICPROPERTIES = 512,
    EXTRINSICPROPERTIESONLY = 1024,
    VOLATILEPROPERTIES = 2048,
    VOLATILEPROPERTIESONLY = 4096,
    MASK_VALID = 8191,
};
pub const GPS_DEFAULT = GETPROPERTYSTOREFLAGS.DEFAULT;
pub const GPS_HANDLERPROPERTIESONLY = GETPROPERTYSTOREFLAGS.HANDLERPROPERTIESONLY;
pub const GPS_READWRITE = GETPROPERTYSTOREFLAGS.READWRITE;
pub const GPS_TEMPORARY = GETPROPERTYSTOREFLAGS.TEMPORARY;
pub const GPS_FASTPROPERTIESONLY = GETPROPERTYSTOREFLAGS.FASTPROPERTIESONLY;
pub const GPS_OPENSLOWITEM = GETPROPERTYSTOREFLAGS.OPENSLOWITEM;
pub const GPS_DELAYCREATION = GETPROPERTYSTOREFLAGS.DELAYCREATION;
pub const GPS_BESTEFFORT = GETPROPERTYSTOREFLAGS.BESTEFFORT;
pub const GPS_NO_OPLOCK = GETPROPERTYSTOREFLAGS.NO_OPLOCK;
pub const GPS_PREFERQUERYPROPERTIES = GETPROPERTYSTOREFLAGS.PREFERQUERYPROPERTIES;
pub const GPS_EXTRINSICPROPERTIES = GETPROPERTYSTOREFLAGS.EXTRINSICPROPERTIES;
pub const GPS_EXTRINSICPROPERTIESONLY = GETPROPERTYSTOREFLAGS.EXTRINSICPROPERTIESONLY;
pub const GPS_VOLATILEPROPERTIES = GETPROPERTYSTOREFLAGS.VOLATILEPROPERTIES;
pub const GPS_VOLATILEPROPERTIESONLY = GETPROPERTYSTOREFLAGS.VOLATILEPROPERTIESONLY;
pub const GPS_MASK_VALID = GETPROPERTYSTOREFLAGS.MASK_VALID;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IObjectWithPropertyKey_Value = @import("../../zig.zig").Guid.initString("fc0ca0a7-c316-4fd2-9031-3e628e6d4f23");
pub const IID_IObjectWithPropertyKey = &IID_IObjectWithPropertyKey_Value;
pub const IObjectWithPropertyKey = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetPropertyKey: fn(
            self: *const IObjectWithPropertyKey,
            key: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyKey: fn(
            self: *const IObjectWithPropertyKey,
            pkey: ?*PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectWithPropertyKey_SetPropertyKey(self: *const T, key: ?*const PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectWithPropertyKey.VTable, self.vtable).SetPropertyKey(@ptrCast(*const IObjectWithPropertyKey, self), key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectWithPropertyKey_GetPropertyKey(self: *const T, pkey: ?*PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectWithPropertyKey.VTable, self.vtable).GetPropertyKey(@ptrCast(*const IObjectWithPropertyKey, self), pkey);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PKA_FLAGS = enum(i32) {
    SET = 0,
    APPEND = 1,
    DELETE = 2,
};
pub const PKA_SET = PKA_FLAGS.SET;
pub const PKA_APPEND = PKA_FLAGS.APPEND;
pub const PKA_DELETE = PKA_FLAGS.DELETE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyChange_Value = @import("../../zig.zig").Guid.initString("f917bc8a-1bba-4478-a245-1bde03eb9431");
pub const IID_IPropertyChange = &IID_IPropertyChange_Value;
pub const IPropertyChange = extern struct {
    pub const VTable = extern struct {
        base: IObjectWithPropertyKey.VTable,
        ApplyToPropVariant: fn(
            self: *const IPropertyChange,
            propvarIn: ?*const PROPVARIANT,
            ppropvarOut: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IObjectWithPropertyKey.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyChange_ApplyToPropVariant(self: *const T, propvarIn: ?*const PROPVARIANT, ppropvarOut: ?*PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyChange.VTable, self.vtable).ApplyToPropVariant(@ptrCast(*const IPropertyChange, self), propvarIn, ppropvarOut);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyChangeArray_Value = @import("../../zig.zig").Guid.initString("380f5cad-1b5e-42f2-805d-637fd392d31e");
pub const IID_IPropertyChangeArray = &IID_IPropertyChangeArray_Value;
pub const IPropertyChangeArray = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IPropertyChangeArray,
            pcOperations: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IPropertyChangeArray,
            iIndex: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: fn(
            self: *const IPropertyChangeArray,
            iIndex: u32,
            ppropChange: ?*IPropertyChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: fn(
            self: *const IPropertyChangeArray,
            ppropChange: ?*IPropertyChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendOrReplace: fn(
            self: *const IPropertyChangeArray,
            ppropChange: ?*IPropertyChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IPropertyChangeArray,
            iIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsKeyInArray: fn(
            self: *const IPropertyChangeArray,
            key: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyChangeArray_GetCount(self: *const T, pcOperations: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyChangeArray.VTable, self.vtable).GetCount(@ptrCast(*const IPropertyChangeArray, self), pcOperations);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyChangeArray_GetAt(self: *const T, iIndex: u32, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyChangeArray.VTable, self.vtable).GetAt(@ptrCast(*const IPropertyChangeArray, self), iIndex, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyChangeArray_InsertAt(self: *const T, iIndex: u32, ppropChange: ?*IPropertyChange) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyChangeArray.VTable, self.vtable).InsertAt(@ptrCast(*const IPropertyChangeArray, self), iIndex, ppropChange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyChangeArray_Append(self: *const T, ppropChange: ?*IPropertyChange) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyChangeArray.VTable, self.vtable).Append(@ptrCast(*const IPropertyChangeArray, self), ppropChange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyChangeArray_AppendOrReplace(self: *const T, ppropChange: ?*IPropertyChange) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyChangeArray.VTable, self.vtable).AppendOrReplace(@ptrCast(*const IPropertyChangeArray, self), ppropChange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyChangeArray_RemoveAt(self: *const T, iIndex: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyChangeArray.VTable, self.vtable).RemoveAt(@ptrCast(*const IPropertyChangeArray, self), iIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyChangeArray_IsKeyInArray(self: *const T, key: ?*const PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyChangeArray.VTable, self.vtable).IsKeyInArray(@ptrCast(*const IPropertyChangeArray, self), key);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyStoreCapabilities_Value = @import("../../zig.zig").Guid.initString("c8e2d566-186e-4d49-bf41-6909ead56acc");
pub const IID_IPropertyStoreCapabilities = &IID_IPropertyStoreCapabilities_Value;
pub const IPropertyStoreCapabilities = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsPropertyWritable: fn(
            self: *const IPropertyStoreCapabilities,
            key: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStoreCapabilities_IsPropertyWritable(self: *const T, key: ?*const PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStoreCapabilities.VTable, self.vtable).IsPropertyWritable(@ptrCast(*const IPropertyStoreCapabilities, self), key);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PSC_STATE = enum(i32) {
    NORMAL = 0,
    NOTINSOURCE = 1,
    DIRTY = 2,
    READONLY = 3,
};
pub const PSC_NORMAL = PSC_STATE.NORMAL;
pub const PSC_NOTINSOURCE = PSC_STATE.NOTINSOURCE;
pub const PSC_DIRTY = PSC_STATE.DIRTY;
pub const PSC_READONLY = PSC_STATE.READONLY;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyStoreCache_Value = @import("../../zig.zig").Guid.initString("3017056d-9a91-4e90-937d-746c72abbf4f");
pub const IID_IPropertyStoreCache = &IID_IPropertyStoreCache_Value;
pub const IPropertyStoreCache = extern struct {
    pub const VTable = extern struct {
        base: IPropertyStore.VTable,
        GetState: fn(
            self: *const IPropertyStoreCache,
            key: ?*const PROPERTYKEY,
            pstate: ?*PSC_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValueAndState: fn(
            self: *const IPropertyStoreCache,
            key: ?*const PROPERTYKEY,
            ppropvar: ?*PROPVARIANT,
            pstate: ?*PSC_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetState: fn(
            self: *const IPropertyStoreCache,
            key: ?*const PROPERTYKEY,
            state: PSC_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValueAndState: fn(
            self: *const IPropertyStoreCache,
            key: ?*const PROPERTYKEY,
            ppropvar: ?*const PROPVARIANT,
            state: PSC_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPropertyStore.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStoreCache_GetState(self: *const T, key: ?*const PROPERTYKEY, pstate: ?*PSC_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStoreCache.VTable, self.vtable).GetState(@ptrCast(*const IPropertyStoreCache, self), key, pstate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStoreCache_GetValueAndState(self: *const T, key: ?*const PROPERTYKEY, ppropvar: ?*PROPVARIANT, pstate: ?*PSC_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStoreCache.VTable, self.vtable).GetValueAndState(@ptrCast(*const IPropertyStoreCache, self), key, ppropvar, pstate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStoreCache_SetState(self: *const T, key: ?*const PROPERTYKEY, state: PSC_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStoreCache.VTable, self.vtable).SetState(@ptrCast(*const IPropertyStoreCache, self), key, state);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStoreCache_SetValueAndState(self: *const T, key: ?*const PROPERTYKEY, ppropvar: ?*const PROPVARIANT, state: PSC_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStoreCache.VTable, self.vtable).SetValueAndState(@ptrCast(*const IPropertyStoreCache, self), key, ppropvar, state);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PROPENUMTYPE = enum(i32) {
    DISCRETEVALUE = 0,
    RANGEDVALUE = 1,
    DEFAULTVALUE = 2,
    ENDRANGE = 3,
};
pub const PET_DISCRETEVALUE = PROPENUMTYPE.DISCRETEVALUE;
pub const PET_RANGEDVALUE = PROPENUMTYPE.RANGEDVALUE;
pub const PET_DEFAULTVALUE = PROPENUMTYPE.DEFAULTVALUE;
pub const PET_ENDRANGE = PROPENUMTYPE.ENDRANGE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyEnumType_Value = @import("../../zig.zig").Guid.initString("11e1fbf9-2d56-4a6b-8db3-7cd193a471f2");
pub const IID_IPropertyEnumType = &IID_IPropertyEnumType_Value;
pub const IPropertyEnumType = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetEnumType: fn(
            self: *const IPropertyEnumType,
            penumtype: ?*PROPENUMTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const IPropertyEnumType,
            ppropvar: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRangeMinValue: fn(
            self: *const IPropertyEnumType,
            ppropvarMin: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRangeSetValue: fn(
            self: *const IPropertyEnumType,
            ppropvarSet: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayText: fn(
            self: *const IPropertyEnumType,
            ppszDisplay: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumType_GetEnumType(self: *const T, penumtype: ?*PROPENUMTYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumType.VTable, self.vtable).GetEnumType(@ptrCast(*const IPropertyEnumType, self), penumtype);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumType_GetValue(self: *const T, ppropvar: ?*PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumType.VTable, self.vtable).GetValue(@ptrCast(*const IPropertyEnumType, self), ppropvar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumType_GetRangeMinValue(self: *const T, ppropvarMin: ?*PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumType.VTable, self.vtable).GetRangeMinValue(@ptrCast(*const IPropertyEnumType, self), ppropvarMin);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumType_GetRangeSetValue(self: *const T, ppropvarSet: ?*PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumType.VTable, self.vtable).GetRangeSetValue(@ptrCast(*const IPropertyEnumType, self), ppropvarSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumType_GetDisplayText(self: *const T, ppszDisplay: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumType.VTable, self.vtable).GetDisplayText(@ptrCast(*const IPropertyEnumType, self), ppszDisplay);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPropertyEnumType2_Value = @import("../../zig.zig").Guid.initString("9b6e051c-5ddd-4321-9070-fe2acb55e794");
pub const IID_IPropertyEnumType2 = &IID_IPropertyEnumType2_Value;
pub const IPropertyEnumType2 = extern struct {
    pub const VTable = extern struct {
        base: IPropertyEnumType.VTable,
        GetImageReference: fn(
            self: *const IPropertyEnumType2,
            ppszImageRes: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPropertyEnumType.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumType2_GetImageReference(self: *const T, ppszImageRes: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumType2.VTable, self.vtable).GetImageReference(@ptrCast(*const IPropertyEnumType2, self), ppszImageRes);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyEnumTypeList_Value = @import("../../zig.zig").Guid.initString("a99400f4-3d84-4557-94ba-1242fb2cc9a6");
pub const IID_IPropertyEnumTypeList = &IID_IPropertyEnumTypeList_Value;
pub const IPropertyEnumTypeList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IPropertyEnumTypeList,
            pctypes: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IPropertyEnumTypeList,
            itype: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConditionAt: fn(
            self: *const IPropertyEnumTypeList,
            nIndex: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindMatchingIndex: fn(
            self: *const IPropertyEnumTypeList,
            propvarCmp: ?*const PROPVARIANT,
            pnIndex: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumTypeList_GetCount(self: *const T, pctypes: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumTypeList.VTable, self.vtable).GetCount(@ptrCast(*const IPropertyEnumTypeList, self), pctypes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumTypeList_GetAt(self: *const T, itype: u32, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumTypeList.VTable, self.vtable).GetAt(@ptrCast(*const IPropertyEnumTypeList, self), itype, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumTypeList_GetConditionAt(self: *const T, nIndex: u32, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumTypeList.VTable, self.vtable).GetConditionAt(@ptrCast(*const IPropertyEnumTypeList, self), nIndex, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumTypeList_FindMatchingIndex(self: *const T, propvarCmp: ?*const PROPVARIANT, pnIndex: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumTypeList.VTable, self.vtable).FindMatchingIndex(@ptrCast(*const IPropertyEnumTypeList, self), propvarCmp, pnIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PROPDESC_TYPE_FLAGS = enum(i32) {
    DEFAULT = 0,
    MULTIPLEVALUES = 1,
    ISINNATE = 2,
    ISGROUP = 4,
    CANGROUPBY = 8,
    CANSTACKBY = 16,
    ISTREEPROPERTY = 32,
    INCLUDEINFULLTEXTQUERY = 64,
    ISVIEWABLE = 128,
    ISQUERYABLE = 256,
    CANBEPURGED = 512,
    SEARCHRAWVALUE = 1024,
    DONTCOERCEEMPTYSTRINGS = 2048,
    ALWAYSINSUPPLEMENTALSTORE = 4096,
    ISSYSTEMPROPERTY = -2147483648,
    MASK_ALL = -2147475457,
};
pub const PDTF_DEFAULT = PROPDESC_TYPE_FLAGS.DEFAULT;
pub const PDTF_MULTIPLEVALUES = PROPDESC_TYPE_FLAGS.MULTIPLEVALUES;
pub const PDTF_ISINNATE = PROPDESC_TYPE_FLAGS.ISINNATE;
pub const PDTF_ISGROUP = PROPDESC_TYPE_FLAGS.ISGROUP;
pub const PDTF_CANGROUPBY = PROPDESC_TYPE_FLAGS.CANGROUPBY;
pub const PDTF_CANSTACKBY = PROPDESC_TYPE_FLAGS.CANSTACKBY;
pub const PDTF_ISTREEPROPERTY = PROPDESC_TYPE_FLAGS.ISTREEPROPERTY;
pub const PDTF_INCLUDEINFULLTEXTQUERY = PROPDESC_TYPE_FLAGS.INCLUDEINFULLTEXTQUERY;
pub const PDTF_ISVIEWABLE = PROPDESC_TYPE_FLAGS.ISVIEWABLE;
pub const PDTF_ISQUERYABLE = PROPDESC_TYPE_FLAGS.ISQUERYABLE;
pub const PDTF_CANBEPURGED = PROPDESC_TYPE_FLAGS.CANBEPURGED;
pub const PDTF_SEARCHRAWVALUE = PROPDESC_TYPE_FLAGS.SEARCHRAWVALUE;
pub const PDTF_DONTCOERCEEMPTYSTRINGS = PROPDESC_TYPE_FLAGS.DONTCOERCEEMPTYSTRINGS;
pub const PDTF_ALWAYSINSUPPLEMENTALSTORE = PROPDESC_TYPE_FLAGS.ALWAYSINSUPPLEMENTALSTORE;
pub const PDTF_ISSYSTEMPROPERTY = PROPDESC_TYPE_FLAGS.ISSYSTEMPROPERTY;
pub const PDTF_MASK_ALL = PROPDESC_TYPE_FLAGS.MASK_ALL;

pub const PROPDESC_VIEW_FLAGS = enum(i32) {
    DEFAULT = 0,
    CENTERALIGN = 1,
    RIGHTALIGN = 2,
    BEGINNEWGROUP = 4,
    FILLAREA = 8,
    SORTDESCENDING = 16,
    SHOWONLYIFPRESENT = 32,
    SHOWBYDEFAULT = 64,
    SHOWINPRIMARYLIST = 128,
    SHOWINSECONDARYLIST = 256,
    HIDELABEL = 512,
    HIDDEN = 2048,
    CANWRAP = 4096,
    MASK_ALL = 7167,
};
pub const PDVF_DEFAULT = PROPDESC_VIEW_FLAGS.DEFAULT;
pub const PDVF_CENTERALIGN = PROPDESC_VIEW_FLAGS.CENTERALIGN;
pub const PDVF_RIGHTALIGN = PROPDESC_VIEW_FLAGS.RIGHTALIGN;
pub const PDVF_BEGINNEWGROUP = PROPDESC_VIEW_FLAGS.BEGINNEWGROUP;
pub const PDVF_FILLAREA = PROPDESC_VIEW_FLAGS.FILLAREA;
pub const PDVF_SORTDESCENDING = PROPDESC_VIEW_FLAGS.SORTDESCENDING;
pub const PDVF_SHOWONLYIFPRESENT = PROPDESC_VIEW_FLAGS.SHOWONLYIFPRESENT;
pub const PDVF_SHOWBYDEFAULT = PROPDESC_VIEW_FLAGS.SHOWBYDEFAULT;
pub const PDVF_SHOWINPRIMARYLIST = PROPDESC_VIEW_FLAGS.SHOWINPRIMARYLIST;
pub const PDVF_SHOWINSECONDARYLIST = PROPDESC_VIEW_FLAGS.SHOWINSECONDARYLIST;
pub const PDVF_HIDELABEL = PROPDESC_VIEW_FLAGS.HIDELABEL;
pub const PDVF_HIDDEN = PROPDESC_VIEW_FLAGS.HIDDEN;
pub const PDVF_CANWRAP = PROPDESC_VIEW_FLAGS.CANWRAP;
pub const PDVF_MASK_ALL = PROPDESC_VIEW_FLAGS.MASK_ALL;

pub const PROPDESC_DISPLAYTYPE = enum(i32) {
    STRING = 0,
    NUMBER = 1,
    BOOLEAN = 2,
    DATETIME = 3,
    ENUMERATED = 4,
};
pub const PDDT_STRING = PROPDESC_DISPLAYTYPE.STRING;
pub const PDDT_NUMBER = PROPDESC_DISPLAYTYPE.NUMBER;
pub const PDDT_BOOLEAN = PROPDESC_DISPLAYTYPE.BOOLEAN;
pub const PDDT_DATETIME = PROPDESC_DISPLAYTYPE.DATETIME;
pub const PDDT_ENUMERATED = PROPDESC_DISPLAYTYPE.ENUMERATED;

pub const PROPDESC_GROUPING_RANGE = enum(i32) {
    DISCRETE = 0,
    ALPHANUMERIC = 1,
    SIZE = 2,
    DYNAMIC = 3,
    DATE = 4,
    PERCENT = 5,
    ENUMERATED = 6,
};
pub const PDGR_DISCRETE = PROPDESC_GROUPING_RANGE.DISCRETE;
pub const PDGR_ALPHANUMERIC = PROPDESC_GROUPING_RANGE.ALPHANUMERIC;
pub const PDGR_SIZE = PROPDESC_GROUPING_RANGE.SIZE;
pub const PDGR_DYNAMIC = PROPDESC_GROUPING_RANGE.DYNAMIC;
pub const PDGR_DATE = PROPDESC_GROUPING_RANGE.DATE;
pub const PDGR_PERCENT = PROPDESC_GROUPING_RANGE.PERCENT;
pub const PDGR_ENUMERATED = PROPDESC_GROUPING_RANGE.ENUMERATED;

pub const PROPDESC_FORMAT_FLAGS = enum(i32) {
    DEFAULT = 0,
    PREFIXNAME = 1,
    FILENAME = 2,
    ALWAYSKB = 4,
    RESERVED_RIGHTTOLEFT = 8,
    SHORTTIME = 16,
    LONGTIME = 32,
    HIDETIME = 64,
    SHORTDATE = 128,
    LONGDATE = 256,
    HIDEDATE = 512,
    RELATIVEDATE = 1024,
    USEEDITINVITATION = 2048,
    READONLY = 4096,
    NOAUTOREADINGORDER = 8192,
};
pub const PDFF_DEFAULT = PROPDESC_FORMAT_FLAGS.DEFAULT;
pub const PDFF_PREFIXNAME = PROPDESC_FORMAT_FLAGS.PREFIXNAME;
pub const PDFF_FILENAME = PROPDESC_FORMAT_FLAGS.FILENAME;
pub const PDFF_ALWAYSKB = PROPDESC_FORMAT_FLAGS.ALWAYSKB;
pub const PDFF_RESERVED_RIGHTTOLEFT = PROPDESC_FORMAT_FLAGS.RESERVED_RIGHTTOLEFT;
pub const PDFF_SHORTTIME = PROPDESC_FORMAT_FLAGS.SHORTTIME;
pub const PDFF_LONGTIME = PROPDESC_FORMAT_FLAGS.LONGTIME;
pub const PDFF_HIDETIME = PROPDESC_FORMAT_FLAGS.HIDETIME;
pub const PDFF_SHORTDATE = PROPDESC_FORMAT_FLAGS.SHORTDATE;
pub const PDFF_LONGDATE = PROPDESC_FORMAT_FLAGS.LONGDATE;
pub const PDFF_HIDEDATE = PROPDESC_FORMAT_FLAGS.HIDEDATE;
pub const PDFF_RELATIVEDATE = PROPDESC_FORMAT_FLAGS.RELATIVEDATE;
pub const PDFF_USEEDITINVITATION = PROPDESC_FORMAT_FLAGS.USEEDITINVITATION;
pub const PDFF_READONLY = PROPDESC_FORMAT_FLAGS.READONLY;
pub const PDFF_NOAUTOREADINGORDER = PROPDESC_FORMAT_FLAGS.NOAUTOREADINGORDER;

pub const PROPDESC_SORTDESCRIPTION = enum(i32) {
    GENERAL = 0,
    A_Z = 1,
    LOWEST_HIGHEST = 2,
    SMALLEST_BIGGEST = 3,
    OLDEST_NEWEST = 4,
};
pub const PDSD_GENERAL = PROPDESC_SORTDESCRIPTION.GENERAL;
pub const PDSD_A_Z = PROPDESC_SORTDESCRIPTION.A_Z;
pub const PDSD_LOWEST_HIGHEST = PROPDESC_SORTDESCRIPTION.LOWEST_HIGHEST;
pub const PDSD_SMALLEST_BIGGEST = PROPDESC_SORTDESCRIPTION.SMALLEST_BIGGEST;
pub const PDSD_OLDEST_NEWEST = PROPDESC_SORTDESCRIPTION.OLDEST_NEWEST;

pub const PROPDESC_RELATIVEDESCRIPTION_TYPE = enum(i32) {
    GENERAL = 0,
    DATE = 1,
    SIZE = 2,
    COUNT = 3,
    REVISION = 4,
    LENGTH = 5,
    DURATION = 6,
    SPEED = 7,
    RATE = 8,
    RATING = 9,
    PRIORITY = 10,
};
pub const PDRDT_GENERAL = PROPDESC_RELATIVEDESCRIPTION_TYPE.GENERAL;
pub const PDRDT_DATE = PROPDESC_RELATIVEDESCRIPTION_TYPE.DATE;
pub const PDRDT_SIZE = PROPDESC_RELATIVEDESCRIPTION_TYPE.SIZE;
pub const PDRDT_COUNT = PROPDESC_RELATIVEDESCRIPTION_TYPE.COUNT;
pub const PDRDT_REVISION = PROPDESC_RELATIVEDESCRIPTION_TYPE.REVISION;
pub const PDRDT_LENGTH = PROPDESC_RELATIVEDESCRIPTION_TYPE.LENGTH;
pub const PDRDT_DURATION = PROPDESC_RELATIVEDESCRIPTION_TYPE.DURATION;
pub const PDRDT_SPEED = PROPDESC_RELATIVEDESCRIPTION_TYPE.SPEED;
pub const PDRDT_RATE = PROPDESC_RELATIVEDESCRIPTION_TYPE.RATE;
pub const PDRDT_RATING = PROPDESC_RELATIVEDESCRIPTION_TYPE.RATING;
pub const PDRDT_PRIORITY = PROPDESC_RELATIVEDESCRIPTION_TYPE.PRIORITY;

pub const PROPDESC_AGGREGATION_TYPE = enum(i32) {
    DEFAULT = 0,
    FIRST = 1,
    SUM = 2,
    AVERAGE = 3,
    DATERANGE = 4,
    UNION = 5,
    MAX = 6,
    MIN = 7,
};
pub const PDAT_DEFAULT = PROPDESC_AGGREGATION_TYPE.DEFAULT;
pub const PDAT_FIRST = PROPDESC_AGGREGATION_TYPE.FIRST;
pub const PDAT_SUM = PROPDESC_AGGREGATION_TYPE.SUM;
pub const PDAT_AVERAGE = PROPDESC_AGGREGATION_TYPE.AVERAGE;
pub const PDAT_DATERANGE = PROPDESC_AGGREGATION_TYPE.DATERANGE;
pub const PDAT_UNION = PROPDESC_AGGREGATION_TYPE.UNION;
pub const PDAT_MAX = PROPDESC_AGGREGATION_TYPE.MAX;
pub const PDAT_MIN = PROPDESC_AGGREGATION_TYPE.MIN;

pub const PROPDESC_CONDITION_TYPE = enum(i32) {
    NONE = 0,
    STRING = 1,
    SIZE = 2,
    DATETIME = 3,
    BOOLEAN = 4,
    NUMBER = 5,
};
pub const PDCOT_NONE = PROPDESC_CONDITION_TYPE.NONE;
pub const PDCOT_STRING = PROPDESC_CONDITION_TYPE.STRING;
pub const PDCOT_SIZE = PROPDESC_CONDITION_TYPE.SIZE;
pub const PDCOT_DATETIME = PROPDESC_CONDITION_TYPE.DATETIME;
pub const PDCOT_BOOLEAN = PROPDESC_CONDITION_TYPE.BOOLEAN;
pub const PDCOT_NUMBER = PROPDESC_CONDITION_TYPE.NUMBER;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyDescription_Value = @import("../../zig.zig").Guid.initString("6f79d558-3e96-4549-a1d1-7d75d2288814");
pub const IID_IPropertyDescription = &IID_IPropertyDescription_Value;
pub const IPropertyDescription = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPropertyKey: fn(
            self: *const IPropertyDescription,
            pkey: ?*PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCanonicalName: fn(
            self: *const IPropertyDescription,
            ppszName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyType: fn(
            self: *const IPropertyDescription,
            pvartype: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayName: fn(
            self: *const IPropertyDescription,
            ppszName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEditInvitation: fn(
            self: *const IPropertyDescription,
            ppszInvite: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTypeFlags: fn(
            self: *const IPropertyDescription,
            mask: PROPDESC_TYPE_FLAGS,
            ppdtFlags: ?*PROPDESC_TYPE_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewFlags: fn(
            self: *const IPropertyDescription,
            ppdvFlags: ?*PROPDESC_VIEW_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultColumnWidth: fn(
            self: *const IPropertyDescription,
            pcxChars: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayType: fn(
            self: *const IPropertyDescription,
            pdisplaytype: ?*PROPDESC_DISPLAYTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnState: fn(
            self: *const IPropertyDescription,
            pcsFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroupingRange: fn(
            self: *const IPropertyDescription,
            pgr: ?*PROPDESC_GROUPING_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRelativeDescriptionType: fn(
            self: *const IPropertyDescription,
            prdt: ?*PROPDESC_RELATIVEDESCRIPTION_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRelativeDescription: fn(
            self: *const IPropertyDescription,
            propvar1: ?*const PROPVARIANT,
            propvar2: ?*const PROPVARIANT,
            ppszDesc1: ?*?PWSTR,
            ppszDesc2: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSortDescription: fn(
            self: *const IPropertyDescription,
            psd: ?*PROPDESC_SORTDESCRIPTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSortDescriptionLabel: fn(
            self: *const IPropertyDescription,
            fDescending: BOOL,
            ppszDescription: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAggregationType: fn(
            self: *const IPropertyDescription,
            paggtype: ?*PROPDESC_AGGREGATION_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConditionType: fn(
            self: *const IPropertyDescription,
            pcontype: ?*PROPDESC_CONDITION_TYPE,
            popDefault: ?*CONDITION_OPERATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumTypeList: fn(
            self: *const IPropertyDescription,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CoerceToCanonicalValue: fn(
            self: *const IPropertyDescription,
            ppropvar: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FormatForDisplay: fn(
            self: *const IPropertyDescription,
            propvar: ?*const PROPVARIANT,
            pdfFlags: PROPDESC_FORMAT_FLAGS,
            ppszDisplay: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsValueCanonical: fn(
            self: *const IPropertyDescription,
            propvar: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetPropertyKey(self: *const T, pkey: ?*PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetPropertyKey(@ptrCast(*const IPropertyDescription, self), pkey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetCanonicalName(self: *const T, ppszName: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetCanonicalName(@ptrCast(*const IPropertyDescription, self), ppszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetPropertyType(self: *const T, pvartype: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetPropertyType(@ptrCast(*const IPropertyDescription, self), pvartype);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetDisplayName(self: *const T, ppszName: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetDisplayName(@ptrCast(*const IPropertyDescription, self), ppszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetEditInvitation(self: *const T, ppszInvite: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetEditInvitation(@ptrCast(*const IPropertyDescription, self), ppszInvite);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetTypeFlags(self: *const T, mask: PROPDESC_TYPE_FLAGS, ppdtFlags: ?*PROPDESC_TYPE_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetTypeFlags(@ptrCast(*const IPropertyDescription, self), mask, ppdtFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetViewFlags(self: *const T, ppdvFlags: ?*PROPDESC_VIEW_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetViewFlags(@ptrCast(*const IPropertyDescription, self), ppdvFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetDefaultColumnWidth(self: *const T, pcxChars: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetDefaultColumnWidth(@ptrCast(*const IPropertyDescription, self), pcxChars);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetDisplayType(self: *const T, pdisplaytype: ?*PROPDESC_DISPLAYTYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetDisplayType(@ptrCast(*const IPropertyDescription, self), pdisplaytype);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetColumnState(self: *const T, pcsFlags: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetColumnState(@ptrCast(*const IPropertyDescription, self), pcsFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetGroupingRange(self: *const T, pgr: ?*PROPDESC_GROUPING_RANGE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetGroupingRange(@ptrCast(*const IPropertyDescription, self), pgr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetRelativeDescriptionType(self: *const T, prdt: ?*PROPDESC_RELATIVEDESCRIPTION_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetRelativeDescriptionType(@ptrCast(*const IPropertyDescription, self), prdt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetRelativeDescription(self: *const T, propvar1: ?*const PROPVARIANT, propvar2: ?*const PROPVARIANT, ppszDesc1: ?*?PWSTR, ppszDesc2: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetRelativeDescription(@ptrCast(*const IPropertyDescription, self), propvar1, propvar2, ppszDesc1, ppszDesc2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetSortDescription(self: *const T, psd: ?*PROPDESC_SORTDESCRIPTION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetSortDescription(@ptrCast(*const IPropertyDescription, self), psd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetSortDescriptionLabel(self: *const T, fDescending: BOOL, ppszDescription: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetSortDescriptionLabel(@ptrCast(*const IPropertyDescription, self), fDescending, ppszDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetAggregationType(self: *const T, paggtype: ?*PROPDESC_AGGREGATION_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetAggregationType(@ptrCast(*const IPropertyDescription, self), paggtype);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetConditionType(self: *const T, pcontype: ?*PROPDESC_CONDITION_TYPE, popDefault: ?*CONDITION_OPERATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetConditionType(@ptrCast(*const IPropertyDescription, self), pcontype, popDefault);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetEnumTypeList(self: *const T, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetEnumTypeList(@ptrCast(*const IPropertyDescription, self), riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_CoerceToCanonicalValue(self: *const T, ppropvar: ?*PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).CoerceToCanonicalValue(@ptrCast(*const IPropertyDescription, self), ppropvar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_FormatForDisplay(self: *const T, propvar: ?*const PROPVARIANT, pdfFlags: PROPDESC_FORMAT_FLAGS, ppszDisplay: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).FormatForDisplay(@ptrCast(*const IPropertyDescription, self), propvar, pdfFlags, ppszDisplay);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_IsValueCanonical(self: *const T, propvar: ?*const PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).IsValueCanonical(@ptrCast(*const IPropertyDescription, self), propvar);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPropertyDescription2_Value = @import("../../zig.zig").Guid.initString("57d2eded-5062-400e-b107-5dae79fe57a6");
pub const IID_IPropertyDescription2 = &IID_IPropertyDescription2_Value;
pub const IPropertyDescription2 = extern struct {
    pub const VTable = extern struct {
        base: IPropertyDescription.VTable,
        GetImageReferenceForValue: fn(
            self: *const IPropertyDescription2,
            propvar: ?*const PROPVARIANT,
            ppszImageRes: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPropertyDescription.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription2_GetImageReferenceForValue(self: *const T, propvar: ?*const PROPVARIANT, ppszImageRes: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription2.VTable, self.vtable).GetImageReferenceForValue(@ptrCast(*const IPropertyDescription2, self), propvar, ppszImageRes);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyDescriptionAliasInfo_Value = @import("../../zig.zig").Guid.initString("f67104fc-2af9-46fd-b32d-243c1404f3d1");
pub const IID_IPropertyDescriptionAliasInfo = &IID_IPropertyDescriptionAliasInfo_Value;
pub const IPropertyDescriptionAliasInfo = extern struct {
    pub const VTable = extern struct {
        base: IPropertyDescription.VTable,
        GetSortByAlias: fn(
            self: *const IPropertyDescriptionAliasInfo,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAdditionalSortByAliases: fn(
            self: *const IPropertyDescriptionAliasInfo,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPropertyDescription.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescriptionAliasInfo_GetSortByAlias(self: *const T, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescriptionAliasInfo.VTable, self.vtable).GetSortByAlias(@ptrCast(*const IPropertyDescriptionAliasInfo, self), riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescriptionAliasInfo_GetAdditionalSortByAliases(self: *const T, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescriptionAliasInfo.VTable, self.vtable).GetAdditionalSortByAliases(@ptrCast(*const IPropertyDescriptionAliasInfo, self), riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PROPDESC_SEARCHINFO_FLAGS = enum(i32) {
    DEFAULT = 0,
    ININVERTEDINDEX = 1,
    ISCOLUMN = 2,
    ISCOLUMNSPARSE = 4,
    ALWAYSINCLUDE = 8,
    USEFORTYPEAHEAD = 16,
};
pub const PDSIF_DEFAULT = PROPDESC_SEARCHINFO_FLAGS.DEFAULT;
pub const PDSIF_ININVERTEDINDEX = PROPDESC_SEARCHINFO_FLAGS.ININVERTEDINDEX;
pub const PDSIF_ISCOLUMN = PROPDESC_SEARCHINFO_FLAGS.ISCOLUMN;
pub const PDSIF_ISCOLUMNSPARSE = PROPDESC_SEARCHINFO_FLAGS.ISCOLUMNSPARSE;
pub const PDSIF_ALWAYSINCLUDE = PROPDESC_SEARCHINFO_FLAGS.ALWAYSINCLUDE;
pub const PDSIF_USEFORTYPEAHEAD = PROPDESC_SEARCHINFO_FLAGS.USEFORTYPEAHEAD;

pub const PROPDESC_COLUMNINDEX_TYPE = enum(i32) {
    NONE = 0,
    ONDISK = 1,
    INMEMORY = 2,
    ONDEMAND = 3,
    ONDISKALL = 4,
    ONDISKVECTOR = 5,
};
pub const PDCIT_NONE = PROPDESC_COLUMNINDEX_TYPE.NONE;
pub const PDCIT_ONDISK = PROPDESC_COLUMNINDEX_TYPE.ONDISK;
pub const PDCIT_INMEMORY = PROPDESC_COLUMNINDEX_TYPE.INMEMORY;
pub const PDCIT_ONDEMAND = PROPDESC_COLUMNINDEX_TYPE.ONDEMAND;
pub const PDCIT_ONDISKALL = PROPDESC_COLUMNINDEX_TYPE.ONDISKALL;
pub const PDCIT_ONDISKVECTOR = PROPDESC_COLUMNINDEX_TYPE.ONDISKVECTOR;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyDescriptionSearchInfo_Value = @import("../../zig.zig").Guid.initString("078f91bd-29a2-440f-924e-46a291524520");
pub const IID_IPropertyDescriptionSearchInfo = &IID_IPropertyDescriptionSearchInfo_Value;
pub const IPropertyDescriptionSearchInfo = extern struct {
    pub const VTable = extern struct {
        base: IPropertyDescription.VTable,
        GetSearchInfoFlags: fn(
            self: *const IPropertyDescriptionSearchInfo,
            ppdsiFlags: ?*PROPDESC_SEARCHINFO_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnIndexType: fn(
            self: *const IPropertyDescriptionSearchInfo,
            ppdciType: ?*PROPDESC_COLUMNINDEX_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProjectionString: fn(
            self: *const IPropertyDescriptionSearchInfo,
            ppszProjection: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxSize: fn(
            self: *const IPropertyDescriptionSearchInfo,
            pcbMaxSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPropertyDescription.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescriptionSearchInfo_GetSearchInfoFlags(self: *const T, ppdsiFlags: ?*PROPDESC_SEARCHINFO_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescriptionSearchInfo.VTable, self.vtable).GetSearchInfoFlags(@ptrCast(*const IPropertyDescriptionSearchInfo, self), ppdsiFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescriptionSearchInfo_GetColumnIndexType(self: *const T, ppdciType: ?*PROPDESC_COLUMNINDEX_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescriptionSearchInfo.VTable, self.vtable).GetColumnIndexType(@ptrCast(*const IPropertyDescriptionSearchInfo, self), ppdciType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescriptionSearchInfo_GetProjectionString(self: *const T, ppszProjection: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescriptionSearchInfo.VTable, self.vtable).GetProjectionString(@ptrCast(*const IPropertyDescriptionSearchInfo, self), ppszProjection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescriptionSearchInfo_GetMaxSize(self: *const T, pcbMaxSize: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescriptionSearchInfo.VTable, self.vtable).GetMaxSize(@ptrCast(*const IPropertyDescriptionSearchInfo, self), pcbMaxSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPropertyDescriptionRelatedPropertyInfo_Value = @import("../../zig.zig").Guid.initString("507393f4-2a3d-4a60-b59e-d9c75716c2dd");
pub const IID_IPropertyDescriptionRelatedPropertyInfo = &IID_IPropertyDescriptionRelatedPropertyInfo_Value;
pub const IPropertyDescriptionRelatedPropertyInfo = extern struct {
    pub const VTable = extern struct {
        base: IPropertyDescription.VTable,
        GetRelatedProperty: fn(
            self: *const IPropertyDescriptionRelatedPropertyInfo,
            pszRelationshipName: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPropertyDescription.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescriptionRelatedPropertyInfo_GetRelatedProperty(self: *const T, pszRelationshipName: ?[*:0]const u16, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescriptionRelatedPropertyInfo.VTable, self.vtable).GetRelatedProperty(@ptrCast(*const IPropertyDescriptionRelatedPropertyInfo, self), pszRelationshipName, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PROPDESC_ENUMFILTER = enum(i32) {
    ALL = 0,
    SYSTEM = 1,
    NONSYSTEM = 2,
    VIEWABLE = 3,
    QUERYABLE = 4,
    INFULLTEXTQUERY = 5,
    COLUMN = 6,
};
pub const PDEF_ALL = PROPDESC_ENUMFILTER.ALL;
pub const PDEF_SYSTEM = PROPDESC_ENUMFILTER.SYSTEM;
pub const PDEF_NONSYSTEM = PROPDESC_ENUMFILTER.NONSYSTEM;
pub const PDEF_VIEWABLE = PROPDESC_ENUMFILTER.VIEWABLE;
pub const PDEF_QUERYABLE = PROPDESC_ENUMFILTER.QUERYABLE;
pub const PDEF_INFULLTEXTQUERY = PROPDESC_ENUMFILTER.INFULLTEXTQUERY;
pub const PDEF_COLUMN = PROPDESC_ENUMFILTER.COLUMN;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IPropertySystem_Value = @import("../../zig.zig").Guid.initString("ca724e8a-c3e6-442b-88a4-6fb0db8035a3");
pub const IID_IPropertySystem = &IID_IPropertySystem_Value;
pub const IPropertySystem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPropertyDescription: fn(
            self: *const IPropertySystem,
            propkey: ?*const PROPERTYKEY,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyDescriptionByName: fn(
            self: *const IPropertySystem,
            pszCanonicalName: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyDescriptionListFromString: fn(
            self: *const IPropertySystem,
            pszPropList: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumeratePropertyDescriptions: fn(
            self: *const IPropertySystem,
            filterOn: PROPDESC_ENUMFILTER,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FormatForDisplay: fn(
            self: *const IPropertySystem,
            key: ?*const PROPERTYKEY,
            propvar: ?*const PROPVARIANT,
            pdff: PROPDESC_FORMAT_FLAGS,
            pszText: [*:0]u16,
            cchText: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FormatForDisplayAlloc: fn(
            self: *const IPropertySystem,
            key: ?*const PROPERTYKEY,
            propvar: ?*const PROPVARIANT,
            pdff: PROPDESC_FORMAT_FLAGS,
            ppszDisplay: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterPropertySchema: fn(
            self: *const IPropertySystem,
            pszPath: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterPropertySchema: fn(
            self: *const IPropertySystem,
            pszPath: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshPropertySchema: fn(
            self: *const IPropertySystem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystem_GetPropertyDescription(self: *const T, propkey: ?*const PROPERTYKEY, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystem.VTable, self.vtable).GetPropertyDescription(@ptrCast(*const IPropertySystem, self), propkey, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystem_GetPropertyDescriptionByName(self: *const T, pszCanonicalName: ?[*:0]const u16, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystem.VTable, self.vtable).GetPropertyDescriptionByName(@ptrCast(*const IPropertySystem, self), pszCanonicalName, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystem_GetPropertyDescriptionListFromString(self: *const T, pszPropList: ?[*:0]const u16, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystem.VTable, self.vtable).GetPropertyDescriptionListFromString(@ptrCast(*const IPropertySystem, self), pszPropList, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystem_EnumeratePropertyDescriptions(self: *const T, filterOn: PROPDESC_ENUMFILTER, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystem.VTable, self.vtable).EnumeratePropertyDescriptions(@ptrCast(*const IPropertySystem, self), filterOn, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystem_FormatForDisplay(self: *const T, key: ?*const PROPERTYKEY, propvar: ?*const PROPVARIANT, pdff: PROPDESC_FORMAT_FLAGS, pszText: [*:0]u16, cchText: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystem.VTable, self.vtable).FormatForDisplay(@ptrCast(*const IPropertySystem, self), key, propvar, pdff, pszText, cchText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystem_FormatForDisplayAlloc(self: *const T, key: ?*const PROPERTYKEY, propvar: ?*const PROPVARIANT, pdff: PROPDESC_FORMAT_FLAGS, ppszDisplay: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystem.VTable, self.vtable).FormatForDisplayAlloc(@ptrCast(*const IPropertySystem, self), key, propvar, pdff, ppszDisplay);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystem_RegisterPropertySchema(self: *const T, pszPath: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystem.VTable, self.vtable).RegisterPropertySchema(@ptrCast(*const IPropertySystem, self), pszPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystem_UnregisterPropertySchema(self: *const T, pszPath: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystem.VTable, self.vtable).UnregisterPropertySchema(@ptrCast(*const IPropertySystem, self), pszPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystem_RefreshPropertySchema(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystem.VTable, self.vtable).RefreshPropertySchema(@ptrCast(*const IPropertySystem, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyDescriptionList_Value = @import("../../zig.zig").Guid.initString("1f9fc1d0-c39b-4b26-817f-011967d3440e");
pub const IID_IPropertyDescriptionList = &IID_IPropertyDescriptionList_Value;
pub const IPropertyDescriptionList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IPropertyDescriptionList,
            pcElem: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IPropertyDescriptionList,
            iElem: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescriptionList_GetCount(self: *const T, pcElem: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescriptionList.VTable, self.vtable).GetCount(@ptrCast(*const IPropertyDescriptionList, self), pcElem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescriptionList_GetAt(self: *const T, iElem: u32, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescriptionList.VTable, self.vtable).GetAt(@ptrCast(*const IPropertyDescriptionList, self), iElem, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyStoreFactory_Value = @import("../../zig.zig").Guid.initString("bc110b6d-57e8-4148-a9c6-91015ab2f3a5");
pub const IID_IPropertyStoreFactory = &IID_IPropertyStoreFactory_Value;
pub const IPropertyStoreFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPropertyStore: fn(
            self: *const IPropertyStoreFactory,
            flags: GETPROPERTYSTOREFLAGS,
            pUnkFactory: ?*IUnknown,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyStoreForKeys: fn(
            self: *const IPropertyStoreFactory,
            rgKeys: ?*const PROPERTYKEY,
            cKeys: u32,
            flags: GETPROPERTYSTOREFLAGS,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStoreFactory_GetPropertyStore(self: *const T, flags: GETPROPERTYSTOREFLAGS, pUnkFactory: ?*IUnknown, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStoreFactory.VTable, self.vtable).GetPropertyStore(@ptrCast(*const IPropertyStoreFactory, self), flags, pUnkFactory, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStoreFactory_GetPropertyStoreForKeys(self: *const T, rgKeys: ?*const PROPERTYKEY, cKeys: u32, flags: GETPROPERTYSTOREFLAGS, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStoreFactory.VTable, self.vtable).GetPropertyStoreForKeys(@ptrCast(*const IPropertyStoreFactory, self), rgKeys, cKeys, flags, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDelayedPropertyStoreFactory_Value = @import("../../zig.zig").Guid.initString("40d4577f-e237-4bdb-bd69-58f089431b6a");
pub const IID_IDelayedPropertyStoreFactory = &IID_IDelayedPropertyStoreFactory_Value;
pub const IDelayedPropertyStoreFactory = extern struct {
    pub const VTable = extern struct {
        base: IPropertyStoreFactory.VTable,
        GetDelayedPropertyStore: fn(
            self: *const IDelayedPropertyStoreFactory,
            flags: GETPROPERTYSTOREFLAGS,
            dwStoreId: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPropertyStoreFactory.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDelayedPropertyStoreFactory_GetDelayedPropertyStore(self: *const T, flags: GETPROPERTYSTOREFLAGS, dwStoreId: u32, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDelayedPropertyStoreFactory.VTable, self.vtable).GetDelayedPropertyStore(@ptrCast(*const IDelayedPropertyStoreFactory, self), flags, dwStoreId, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _PERSIST_SPROPSTORE_FLAGS = enum(i32) {
    DEFAULT = 0,
    READONLY = 1,
    TREAT_NEW_VALUES_AS_DIRTY = 2,
};
pub const FPSPS_DEFAULT = _PERSIST_SPROPSTORE_FLAGS.DEFAULT;
pub const FPSPS_READONLY = _PERSIST_SPROPSTORE_FLAGS.READONLY;
pub const FPSPS_TREAT_NEW_VALUES_AS_DIRTY = _PERSIST_SPROPSTORE_FLAGS.TREAT_NEW_VALUES_AS_DIRTY;

pub const SERIALIZEDPROPSTORAGE = extern struct {
    placeholder: usize, // TODO: why is this type empty?
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPersistSerializedPropStorage_Value = @import("../../zig.zig").Guid.initString("e318ad57-0aa0-450f-aca5-6fab7103d917");
pub const IID_IPersistSerializedPropStorage = &IID_IPersistSerializedPropStorage_Value;
pub const IPersistSerializedPropStorage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFlags: fn(
            self: *const IPersistSerializedPropStorage,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPropertyStorage: fn(
            self: *const IPersistSerializedPropStorage,
            // TODO: what to do with BytesParamIndex 1?
            psps: ?*SERIALIZEDPROPSTORAGE,
            cb: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyStorage: fn(
            self: *const IPersistSerializedPropStorage,
            ppsps: ?*?*SERIALIZEDPROPSTORAGE,
            pcb: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPersistSerializedPropStorage_SetFlags(self: *const T, flags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPersistSerializedPropStorage.VTable, self.vtable).SetFlags(@ptrCast(*const IPersistSerializedPropStorage, self), flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPersistSerializedPropStorage_SetPropertyStorage(self: *const T, psps: ?*SERIALIZEDPROPSTORAGE, cb: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPersistSerializedPropStorage.VTable, self.vtable).SetPropertyStorage(@ptrCast(*const IPersistSerializedPropStorage, self), psps, cb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPersistSerializedPropStorage_GetPropertyStorage(self: *const T, ppsps: ?*?*SERIALIZEDPROPSTORAGE, pcb: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPersistSerializedPropStorage.VTable, self.vtable).GetPropertyStorage(@ptrCast(*const IPersistSerializedPropStorage, self), ppsps, pcb);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPersistSerializedPropStorage2_Value = @import("../../zig.zig").Guid.initString("77effa68-4f98-4366-ba72-573b3d880571");
pub const IID_IPersistSerializedPropStorage2 = &IID_IPersistSerializedPropStorage2_Value;
pub const IPersistSerializedPropStorage2 = extern struct {
    pub const VTable = extern struct {
        base: IPersistSerializedPropStorage.VTable,
        GetPropertyStorageSize: fn(
            self: *const IPersistSerializedPropStorage2,
            pcb: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyStorageBuffer: fn(
            self: *const IPersistSerializedPropStorage2,
            // TODO: what to do with BytesParamIndex 1?
            psps: ?*SERIALIZEDPROPSTORAGE,
            cb: u32,
            pcbWritten: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPersistSerializedPropStorage.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPersistSerializedPropStorage2_GetPropertyStorageSize(self: *const T, pcb: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPersistSerializedPropStorage2.VTable, self.vtable).GetPropertyStorageSize(@ptrCast(*const IPersistSerializedPropStorage2, self), pcb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPersistSerializedPropStorage2_GetPropertyStorageBuffer(self: *const T, psps: ?*SERIALIZEDPROPSTORAGE, cb: u32, pcbWritten: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPersistSerializedPropStorage2.VTable, self.vtable).GetPropertyStorageBuffer(@ptrCast(*const IPersistSerializedPropStorage2, self), psps, cb, pcbWritten);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPropertySystemChangeNotify_Value = @import("../../zig.zig").Guid.initString("fa955fd9-38be-4879-a6ce-824cf52d609f");
pub const IID_IPropertySystemChangeNotify = &IID_IPropertySystemChangeNotify_Value;
pub const IPropertySystemChangeNotify = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SchemaRefreshed: fn(
            self: *const IPropertySystemChangeNotify,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystemChangeNotify_SchemaRefreshed(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystemChangeNotify.VTable, self.vtable).SchemaRefreshed(@ptrCast(*const IPropertySystemChangeNotify, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICreateObject_Value = @import("../../zig.zig").Guid.initString("75121952-e0d0-43e5-9380-1d80483acf72");
pub const IID_ICreateObject = &IID_ICreateObject_Value;
pub const ICreateObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateObject: fn(
            self: *const ICreateObject,
            clsid: ?*const Guid,
            pUnkOuter: ?*IUnknown,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICreateObject_CreateObject(self: *const T, clsid: ?*const Guid, pUnkOuter: ?*IUnknown, riid: ?*const Guid, ppv: ?*?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICreateObject.VTable, self.vtable).CreateObject(@ptrCast(*const ICreateObject, self), clsid, pUnkOuter, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PSTIME_FLAGS = enum(i32) {
    UTC = 0,
    LOCAL = 1,
};
pub const PSTF_UTC = PSTIME_FLAGS.UTC;
pub const PSTF_LOCAL = PSTIME_FLAGS.LOCAL;

pub const PROPVAR_COMPARE_UNIT = enum(i32) {
    DEFAULT = 0,
    SECOND = 1,
    MINUTE = 2,
    HOUR = 3,
    DAY = 4,
    MONTH = 5,
    YEAR = 6,
};
pub const PVCU_DEFAULT = PROPVAR_COMPARE_UNIT.DEFAULT;
pub const PVCU_SECOND = PROPVAR_COMPARE_UNIT.SECOND;
pub const PVCU_MINUTE = PROPVAR_COMPARE_UNIT.MINUTE;
pub const PVCU_HOUR = PROPVAR_COMPARE_UNIT.HOUR;
pub const PVCU_DAY = PROPVAR_COMPARE_UNIT.DAY;
pub const PVCU_MONTH = PROPVAR_COMPARE_UNIT.MONTH;
pub const PVCU_YEAR = PROPVAR_COMPARE_UNIT.YEAR;

pub const PROPVAR_COMPARE_FLAGS = enum(i32) {
    DEFAULT = 0,
    TREATEMPTYASGREATERTHAN = 1,
    USESTRCMP = 2,
    USESTRCMPC = 4,
    USESTRCMPI = 8,
    USESTRCMPIC = 16,
    DIGITSASNUMBERS_CASESENSITIVE = 32,
};
pub const PVCF_DEFAULT = PROPVAR_COMPARE_FLAGS.DEFAULT;
pub const PVCF_TREATEMPTYASGREATERTHAN = PROPVAR_COMPARE_FLAGS.TREATEMPTYASGREATERTHAN;
pub const PVCF_USESTRCMP = PROPVAR_COMPARE_FLAGS.USESTRCMP;
pub const PVCF_USESTRCMPC = PROPVAR_COMPARE_FLAGS.USESTRCMPC;
pub const PVCF_USESTRCMPI = PROPVAR_COMPARE_FLAGS.USESTRCMPI;
pub const PVCF_USESTRCMPIC = PROPVAR_COMPARE_FLAGS.USESTRCMPIC;
pub const PVCF_DIGITSASNUMBERS_CASESENSITIVE = PROPVAR_COMPARE_FLAGS.DIGITSASNUMBERS_CASESENSITIVE;

pub const PROPVAR_CHANGE_FLAGS = enum(i32) {
    DEFAULT = 0,
    NOVALUEPROP = 1,
    ALPHABOOL = 2,
    NOUSEROVERRIDE = 4,
    LOCALBOOL = 8,
    NOHEXSTRING = 16,
};
pub const PVCHF_DEFAULT = PROPVAR_CHANGE_FLAGS.DEFAULT;
pub const PVCHF_NOVALUEPROP = PROPVAR_CHANGE_FLAGS.NOVALUEPROP;
pub const PVCHF_ALPHABOOL = PROPVAR_CHANGE_FLAGS.ALPHABOOL;
pub const PVCHF_NOUSEROVERRIDE = PROPVAR_CHANGE_FLAGS.NOUSEROVERRIDE;
pub const PVCHF_LOCALBOOL = PROPVAR_CHANGE_FLAGS.LOCALBOOL;
pub const PVCHF_NOHEXSTRING = PROPVAR_CHANGE_FLAGS.NOHEXSTRING;

pub const DRAWPROGRESSFLAGS = enum(i32) {
    NONE = 0,
    MARQUEE = 1,
    MARQUEE_COMPLETE = 2,
    ERROR = 4,
    WARNING = 8,
    STOPPED = 16,
};
pub const DPF_NONE = DRAWPROGRESSFLAGS.NONE;
pub const DPF_MARQUEE = DRAWPROGRESSFLAGS.MARQUEE;
pub const DPF_MARQUEE_COMPLETE = DRAWPROGRESSFLAGS.MARQUEE_COMPLETE;
pub const DPF_ERROR = DRAWPROGRESSFLAGS.ERROR;
pub const DPF_WARNING = DRAWPROGRESSFLAGS.WARNING;
pub const DPF_STOPPED = DRAWPROGRESSFLAGS.STOPPED;

pub const SYNC_TRANSFER_STATUS = enum(i32) {
    NONE = 0,
    NEEDSUPLOAD = 1,
    NEEDSDOWNLOAD = 2,
    TRANSFERRING = 4,
    PAUSED = 8,
    HASERROR = 16,
    FETCHING_METADATA = 32,
    USER_REQUESTED_REFRESH = 64,
    HASWARNING = 128,
    EXCLUDED = 256,
    INCOMPLETE = 512,
    PLACEHOLDER_IFEMPTY = 1024,
};
pub const STS_NONE = SYNC_TRANSFER_STATUS.NONE;
pub const STS_NEEDSUPLOAD = SYNC_TRANSFER_STATUS.NEEDSUPLOAD;
pub const STS_NEEDSDOWNLOAD = SYNC_TRANSFER_STATUS.NEEDSDOWNLOAD;
pub const STS_TRANSFERRING = SYNC_TRANSFER_STATUS.TRANSFERRING;
pub const STS_PAUSED = SYNC_TRANSFER_STATUS.PAUSED;
pub const STS_HASERROR = SYNC_TRANSFER_STATUS.HASERROR;
pub const STS_FETCHING_METADATA = SYNC_TRANSFER_STATUS.FETCHING_METADATA;
pub const STS_USER_REQUESTED_REFRESH = SYNC_TRANSFER_STATUS.USER_REQUESTED_REFRESH;
pub const STS_HASWARNING = SYNC_TRANSFER_STATUS.HASWARNING;
pub const STS_EXCLUDED = SYNC_TRANSFER_STATUS.EXCLUDED;
pub const STS_INCOMPLETE = SYNC_TRANSFER_STATUS.INCOMPLETE;
pub const STS_PLACEHOLDER_IFEMPTY = SYNC_TRANSFER_STATUS.PLACEHOLDER_IFEMPTY;

pub const PLACEHOLDER_STATES = enum(i32) {
    NONE = 0,
    MARKED_FOR_OFFLINE_AVAILABILITY = 1,
    FULL_PRIMARY_STREAM_AVAILABLE = 2,
    CREATE_FILE_ACCESSIBLE = 4,
    CLOUDFILE_PLACEHOLDER = 8,
    DEFAULT = 7,
    ALL = 15,
};
pub const PS_NONE = PLACEHOLDER_STATES.NONE;
pub const PS_MARKED_FOR_OFFLINE_AVAILABILITY = PLACEHOLDER_STATES.MARKED_FOR_OFFLINE_AVAILABILITY;
pub const PS_FULL_PRIMARY_STREAM_AVAILABLE = PLACEHOLDER_STATES.FULL_PRIMARY_STREAM_AVAILABLE;
pub const PS_CREATE_FILE_ACCESSIBLE = PLACEHOLDER_STATES.CREATE_FILE_ACCESSIBLE;
pub const PS_CLOUDFILE_PLACEHOLDER = PLACEHOLDER_STATES.CLOUDFILE_PLACEHOLDER;
pub const PS_DEFAULT = PLACEHOLDER_STATES.DEFAULT;
pub const PS_ALL = PLACEHOLDER_STATES.ALL;

pub const PROPERTYUI_NAME_FLAGS = enum(i32) {
    DEFAULT = 0,
    MNEMONIC = 1,
};
pub const PUIFNF_DEFAULT = PROPERTYUI_NAME_FLAGS.DEFAULT;
pub const PUIFNF_MNEMONIC = PROPERTYUI_NAME_FLAGS.MNEMONIC;

pub const PROPERTYUI_FLAGS = enum(i32) {
    DEFAULT = 0,
    RIGHTALIGN = 1,
    NOLABELININFOTIP = 2,
};
pub const PUIF_DEFAULT = PROPERTYUI_FLAGS.DEFAULT;
pub const PUIF_RIGHTALIGN = PROPERTYUI_FLAGS.RIGHTALIGN;
pub const PUIF_NOLABELININFOTIP = PROPERTYUI_FLAGS.NOLABELININFOTIP;

pub const PROPERTYUI_FORMAT_FLAGS = enum(i32) {
    DEFAULT = 0,
    RIGHTTOLEFT = 1,
    SHORTFORMAT = 2,
    NOTIME = 4,
    FRIENDLYDATE = 8,
};
pub const PUIFFDF_DEFAULT = PROPERTYUI_FORMAT_FLAGS.DEFAULT;
pub const PUIFFDF_RIGHTTOLEFT = PROPERTYUI_FORMAT_FLAGS.RIGHTTOLEFT;
pub const PUIFFDF_SHORTFORMAT = PROPERTYUI_FORMAT_FLAGS.SHORTFORMAT;
pub const PUIFFDF_NOTIME = PROPERTYUI_FORMAT_FLAGS.NOTIME;
pub const PUIFFDF_FRIENDLYDATE = PROPERTYUI_FORMAT_FLAGS.FRIENDLYDATE;

// TODO: this type is limited to platform 'windows5.0'
const IID_IPropertyUI_Value = @import("../../zig.zig").Guid.initString("757a7d9f-919a-4118-99d7-dbb208c8cc66");
pub const IID_IPropertyUI = &IID_IPropertyUI_Value;
pub const IPropertyUI = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ParsePropertyName: fn(
            self: *const IPropertyUI,
            pszName: ?[*:0]const u16,
            pfmtid: ?*Guid,
            ppid: ?*u32,
            pchEaten: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCannonicalName: fn(
            self: *const IPropertyUI,
            fmtid: ?*const Guid,
            pid: u32,
            pwszText: [*:0]u16,
            cchText: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayName: fn(
            self: *const IPropertyUI,
            fmtid: ?*const Guid,
            pid: u32,
            flags: PROPERTYUI_NAME_FLAGS,
            pwszText: [*:0]u16,
            cchText: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyDescription: fn(
            self: *const IPropertyUI,
            fmtid: ?*const Guid,
            pid: u32,
            pwszText: [*:0]u16,
            cchText: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultWidth: fn(
            self: *const IPropertyUI,
            fmtid: ?*const Guid,
            pid: u32,
            pcxChars: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: fn(
            self: *const IPropertyUI,
            fmtid: ?*const Guid,
            pid: u32,
            pflags: ?*PROPERTYUI_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FormatForDisplay: fn(
            self: *const IPropertyUI,
            fmtid: ?*const Guid,
            pid: u32,
            ppropvar: ?*const PROPVARIANT,
            puiff: PROPERTYUI_FORMAT_FLAGS,
            pwszText: [*:0]u16,
            cchText: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHelpInfo: fn(
            self: *const IPropertyUI,
            fmtid: ?*const Guid,
            pid: u32,
            pwszHelpFile: [*:0]u16,
            cch: u32,
            puHelpID: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyUI_ParsePropertyName(self: *const T, pszName: ?[*:0]const u16, pfmtid: ?*Guid, ppid: ?*u32, pchEaten: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyUI.VTable, self.vtable).ParsePropertyName(@ptrCast(*const IPropertyUI, self), pszName, pfmtid, ppid, pchEaten);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyUI_GetCannonicalName(self: *const T, fmtid: ?*const Guid, pid: u32, pwszText: [*:0]u16, cchText: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyUI.VTable, self.vtable).GetCannonicalName(@ptrCast(*const IPropertyUI, self), fmtid, pid, pwszText, cchText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyUI_GetDisplayName(self: *const T, fmtid: ?*const Guid, pid: u32, flags: PROPERTYUI_NAME_FLAGS, pwszText: [*:0]u16, cchText: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyUI.VTable, self.vtable).GetDisplayName(@ptrCast(*const IPropertyUI, self), fmtid, pid, flags, pwszText, cchText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyUI_GetPropertyDescription(self: *const T, fmtid: ?*const Guid, pid: u32, pwszText: [*:0]u16, cchText: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyUI.VTable, self.vtable).GetPropertyDescription(@ptrCast(*const IPropertyUI, self), fmtid, pid, pwszText, cchText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyUI_GetDefaultWidth(self: *const T, fmtid: ?*const Guid, pid: u32, pcxChars: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyUI.VTable, self.vtable).GetDefaultWidth(@ptrCast(*const IPropertyUI, self), fmtid, pid, pcxChars);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyUI_GetFlags(self: *const T, fmtid: ?*const Guid, pid: u32, pflags: ?*PROPERTYUI_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyUI.VTable, self.vtable).GetFlags(@ptrCast(*const IPropertyUI, self), fmtid, pid, pflags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyUI_FormatForDisplay(self: *const T, fmtid: ?*const Guid, pid: u32, ppropvar: ?*const PROPVARIANT, puiff: PROPERTYUI_FORMAT_FLAGS, pwszText: [*:0]u16, cchText: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyUI.VTable, self.vtable).FormatForDisplay(@ptrCast(*const IPropertyUI, self), fmtid, pid, ppropvar, puiff, pwszText, cchText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyUI_GetHelpInfo(self: *const T, fmtid: ?*const Guid, pid: u32, pwszHelpFile: [*:0]u16, cch: u32, puHelpID: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyUI.VTable, self.vtable).GetHelpInfo(@ptrCast(*const IPropertyUI, self), fmtid, pid, pwszHelpFile, cch, puHelpID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PDOPSTATUS = enum(i32) {
    RUNNING = 1,
    PAUSED = 2,
    CANCELLED = 3,
    STOPPED = 4,
    ERRORS = 5,
};
pub const PDOPS_RUNNING = PDOPSTATUS.RUNNING;
pub const PDOPS_PAUSED = PDOPSTATUS.PAUSED;
pub const PDOPS_CANCELLED = PDOPSTATUS.CANCELLED;
pub const PDOPS_STOPPED = PDOPSTATUS.STOPPED;
pub const PDOPS_ERRORS = PDOPSTATUS.ERRORS;

pub const SYNC_ENGINE_STATE_FLAGS = enum(i32) {
    NONE = 0,
    SERVICE_QUOTA_NEARING_LIMIT = 1,
    SERVICE_QUOTA_EXCEEDED_LIMIT = 2,
    AUTHENTICATION_ERROR = 4,
    PAUSED_DUE_TO_METERED_NETWORK = 8,
    PAUSED_DUE_TO_DISK_SPACE_FULL = 16,
    PAUSED_DUE_TO_CLIENT_POLICY = 32,
    PAUSED_DUE_TO_SERVICE_POLICY = 64,
    SERVICE_UNAVAILABLE = 128,
    PAUSED_DUE_TO_USER_REQUEST = 256,
    ALL_FLAGS = 511,
};
pub const SESF_NONE = SYNC_ENGINE_STATE_FLAGS.NONE;
pub const SESF_SERVICE_QUOTA_NEARING_LIMIT = SYNC_ENGINE_STATE_FLAGS.SERVICE_QUOTA_NEARING_LIMIT;
pub const SESF_SERVICE_QUOTA_EXCEEDED_LIMIT = SYNC_ENGINE_STATE_FLAGS.SERVICE_QUOTA_EXCEEDED_LIMIT;
pub const SESF_AUTHENTICATION_ERROR = SYNC_ENGINE_STATE_FLAGS.AUTHENTICATION_ERROR;
pub const SESF_PAUSED_DUE_TO_METERED_NETWORK = SYNC_ENGINE_STATE_FLAGS.PAUSED_DUE_TO_METERED_NETWORK;
pub const SESF_PAUSED_DUE_TO_DISK_SPACE_FULL = SYNC_ENGINE_STATE_FLAGS.PAUSED_DUE_TO_DISK_SPACE_FULL;
pub const SESF_PAUSED_DUE_TO_CLIENT_POLICY = SYNC_ENGINE_STATE_FLAGS.PAUSED_DUE_TO_CLIENT_POLICY;
pub const SESF_PAUSED_DUE_TO_SERVICE_POLICY = SYNC_ENGINE_STATE_FLAGS.PAUSED_DUE_TO_SERVICE_POLICY;
pub const SESF_SERVICE_UNAVAILABLE = SYNC_ENGINE_STATE_FLAGS.SERVICE_UNAVAILABLE;
pub const SESF_PAUSED_DUE_TO_USER_REQUEST = SYNC_ENGINE_STATE_FLAGS.PAUSED_DUE_TO_USER_REQUEST;
pub const SESF_ALL_FLAGS = SYNC_ENGINE_STATE_FLAGS.ALL_FLAGS;

pub const PROPPRG = packed struct {
    flPrg: u16,
    flPrgInit: u16,
    achTitle: [30]CHAR,
    achCmdLine: [128]CHAR,
    achWorkDir: [64]CHAR,
    wHotKey: u16,
    achIconFile: [80]CHAR,
    wIconIndex: u16,
    dwEnhModeFlags: u32,
    dwRealModeFlags: u32,
    achOtherFile: [80]CHAR,
    achPIFFile: [260]CHAR,
};


//--------------------------------------------------------------------------------
// Section: Functions (227)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows8.0'
pub extern "PROPSYS" fn PropVariantToWinRTPropertyValue(
    propvar: ?*const PROPVARIANT,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "PROPSYS" fn WinRTPropertyValueToPropVariant(
    punkPropertyValue: ?*IUnknown,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "PROPSYS" fn PSFormatForDisplay(
    propkey: ?*const PROPERTYKEY,
    propvar: ?*const PROPVARIANT,
    pdfFlags: PROPDESC_FORMAT_FLAGS,
    pwszText: [*:0]u16,
    cchText: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "PROPSYS" fn PSFormatForDisplayAlloc(
    key: ?*const PROPERTYKEY,
    propvar: ?*const PROPVARIANT,
    pdff: PROPDESC_FORMAT_FLAGS,
    ppszDisplay: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "PROPSYS" fn PSFormatPropertyValue(
    pps: ?*IPropertyStore,
    ppd: ?*IPropertyDescription,
    pdff: PROPDESC_FORMAT_FLAGS,
    ppszDisplay: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSGetImageReferenceForValue(
    propkey: ?*const PROPERTYKEY,
    propvar: ?*const PROPVARIANT,
    ppszImageRes: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSStringFromPropertyKey(
    pkey: ?*const PROPERTYKEY,
    psz: [*:0]u16,
    cch: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSPropertyKeyFromString(
    pszString: ?[*:0]const u16,
    pkey: ?*PROPERTYKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSCreateMemoryPropertyStore(
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSCreateDelayedMultiplexPropertyStore(
    flags: GETPROPERTYSTOREFLAGS,
    pdpsf: ?*IDelayedPropertyStoreFactory,
    rgStoreIds: [*]const u32,
    cStores: u32,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSCreateMultiplexPropertyStore(
    prgpunkStores: [*]?*IUnknown,
    cStores: u32,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSCreatePropertyChangeArray(
    rgpropkey: ?[*]const PROPERTYKEY,
    rgflags: ?[*]const PKA_FLAGS,
    rgpropvar: ?[*]const PROPVARIANT,
    cChanges: u32,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSCreateSimplePropertyChange(
    flags: PKA_FLAGS,
    key: ?*const PROPERTYKEY,
    propvar: ?*const PROPVARIANT,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSGetPropertyDescription(
    propkey: ?*const PROPERTYKEY,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSGetPropertyDescriptionByName(
    pszCanonicalName: ?[*:0]const u16,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSLookupPropertyHandlerCLSID(
    pszFilePath: ?[*:0]const u16,
    pclsid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSGetItemPropertyHandler(
    punkItem: ?*IUnknown,
    fReadWrite: BOOL,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSGetItemPropertyHandlerWithCreateObject(
    punkItem: ?*IUnknown,
    fReadWrite: BOOL,
    punkCreateObject: ?*IUnknown,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSGetPropertyValue(
    pps: ?*IPropertyStore,
    ppd: ?*IPropertyDescription,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSSetPropertyValue(
    pps: ?*IPropertyStore,
    ppd: ?*IPropertyDescription,
    propvar: ?*const PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSRegisterPropertySchema(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSUnregisterPropertySchema(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSRefreshPropertySchema(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSEnumeratePropertyDescriptions(
    filterOn: PROPDESC_ENUMFILTER,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSGetPropertyKeyFromName(
    pszName: ?[*:0]const u16,
    ppropkey: ?*PROPERTYKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSGetNameFromPropertyKey(
    propkey: ?*const PROPERTYKEY,
    ppszCanonicalName: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSCoerceToCanonicalValue(
    key: ?*const PROPERTYKEY,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSGetPropertyDescriptionListFromString(
    pszPropList: ?[*:0]const u16,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSCreatePropertyStoreFromPropertySetStorage(
    ppss: ?*IPropertySetStorage,
    grfMode: u32,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSCreatePropertyStoreFromObject(
    punk: ?*IUnknown,
    grfMode: u32,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSCreateAdapterFromPropertyStore(
    pps: ?*IPropertyStore,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSGetPropertySystem(
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSGetPropertyFromPropertyStorage(
    // TODO: what to do with BytesParamIndex 1?
    psps: ?*SERIALIZEDPROPSTORAGE,
    cb: u32,
    rpkey: ?*const PROPERTYKEY,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PSGetNamedPropertyFromPropertyStorage(
    // TODO: what to do with BytesParamIndex 1?
    psps: ?*SERIALIZEDPROPSTORAGE,
    cb: u32,
    pszName: ?[*:0]const u16,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_ReadType(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    @"var": ?*VARIANT,
    type: u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_ReadStr(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: [*:0]u16,
    characterCount: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_ReadStrAlloc(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_ReadBSTR(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_WriteStr(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_WriteBSTR(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_ReadInt(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_WriteInt(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_ReadSHORT(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_WriteSHORT(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_ReadLONG(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_WriteLONG(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_ReadDWORD(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_WriteDWORD(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_ReadBOOL(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_WriteBOOL(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_ReadPOINTL(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*POINTL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_WritePOINTL(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*const POINTL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_ReadPOINTS(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*POINTS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_WritePOINTS(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*const POINTS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_ReadRECTL(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*RECTL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_WriteRECTL(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*const RECTL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_ReadStream(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*?*IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_WriteStream(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_Delete(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_ReadULONGLONG(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_WriteULONGLONG(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_ReadUnknown(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_WriteUnknown(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    punk: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_ReadGUID(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_WriteGUID(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*const Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_ReadPropertyKey(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*PROPERTYKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "PROPSYS" fn PSPropertyBag_WritePropertyKey(
    propBag: ?*IPropertyBag,
    propName: ?[*:0]const u16,
    value: ?*const PROPERTYKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitPropVariantFromResource(
    hinst: ?HINSTANCE,
    id: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitPropVariantFromBuffer(
    // TODO: what to do with BytesParamIndex 1?
    pv: ?*const anyopaque,
    cb: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitPropVariantFromCLSID(
    clsid: ?*const Guid,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitPropVariantFromGUIDAsString(
    guid: ?*const Guid,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitPropVariantFromFileTime(
    pftIn: ?*const FILETIME,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitPropVariantFromPropVariantVectorElem(
    propvarIn: ?*const PROPVARIANT,
    iElem: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitPropVariantVectorFromPropVariant(
    propvarSingle: ?*const PROPVARIANT,
    ppropvarVector: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitPropVariantFromStrRet(
    pstrret: ?*STRRET,
    pidl: ?*ITEMIDLIST,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitPropVariantFromBooleanVector(
    prgf: ?[*]const BOOL,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitPropVariantFromInt16Vector(
    prgn: ?[*]const i16,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitPropVariantFromUInt16Vector(
    prgn: ?[*:0]const u16,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitPropVariantFromInt32Vector(
    prgn: ?[*]const i32,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitPropVariantFromUInt32Vector(
    prgn: ?[*]const u32,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitPropVariantFromInt64Vector(
    prgn: ?[*]const i64,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitPropVariantFromUInt64Vector(
    prgn: ?[*]const u64,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitPropVariantFromDoubleVector(
    prgn: ?[*]const f64,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitPropVariantFromFileTimeVector(
    prgft: ?[*]const FILETIME,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitPropVariantFromStringVector(
    prgsz: ?[*]?PWSTR,
    cElems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitPropVariantFromStringAsVector(
    psz: ?[*:0]const u16,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToBooleanWithDefault(
    propvarIn: ?*const PROPVARIANT,
    fDefault: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToInt16WithDefault(
    propvarIn: ?*const PROPVARIANT,
    iDefault: i16,
) callconv(@import("std").os.windows.WINAPI) i16;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToUInt16WithDefault(
    propvarIn: ?*const PROPVARIANT,
    uiDefault: u16,
) callconv(@import("std").os.windows.WINAPI) u16;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToInt32WithDefault(
    propvarIn: ?*const PROPVARIANT,
    lDefault: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToUInt32WithDefault(
    propvarIn: ?*const PROPVARIANT,
    ulDefault: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToInt64WithDefault(
    propvarIn: ?*const PROPVARIANT,
    llDefault: i64,
) callconv(@import("std").os.windows.WINAPI) i64;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToUInt64WithDefault(
    propvarIn: ?*const PROPVARIANT,
    ullDefault: u64,
) callconv(@import("std").os.windows.WINAPI) u64;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToDoubleWithDefault(
    propvarIn: ?*const PROPVARIANT,
    dblDefault: f64,
) callconv(@import("std").os.windows.WINAPI) f64;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToStringWithDefault(
    propvarIn: ?*const PROPVARIANT,
    pszDefault: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToBoolean(
    propvarIn: ?*const PROPVARIANT,
    pfRet: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToInt16(
    propvarIn: ?*const PROPVARIANT,
    piRet: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToUInt16(
    propvarIn: ?*const PROPVARIANT,
    puiRet: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToInt32(
    propvarIn: ?*const PROPVARIANT,
    plRet: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToUInt32(
    propvarIn: ?*const PROPVARIANT,
    pulRet: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToInt64(
    propvarIn: ?*const PROPVARIANT,
    pllRet: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToUInt64(
    propvarIn: ?*const PROPVARIANT,
    pullRet: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToDouble(
    propvarIn: ?*const PROPVARIANT,
    pdblRet: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToBuffer(
    propvar: ?*const PROPVARIANT,
    // TODO: what to do with BytesParamIndex 2?
    pv: ?*anyopaque,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToString(
    propvar: ?*const PROPVARIANT,
    psz: [*:0]u16,
    cch: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToGUID(
    propvar: ?*const PROPVARIANT,
    pguid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToStringAlloc(
    propvar: ?*const PROPVARIANT,
    ppszOut: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToBSTR(
    propvar: ?*const PROPVARIANT,
    pbstrOut: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToStrRet(
    propvar: ?*const PROPVARIANT,
    pstrret: ?*STRRET,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToFileTime(
    propvar: ?*const PROPVARIANT,
    pstfOut: PSTIME_FLAGS,
    pftOut: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantGetElementCount(
    propvar: ?*const PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToBooleanVector(
    propvar: ?*const PROPVARIANT,
    prgf: [*]BOOL,
    crgf: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToInt16Vector(
    propvar: ?*const PROPVARIANT,
    prgn: [*]i16,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToUInt16Vector(
    propvar: ?*const PROPVARIANT,
    prgn: [*:0]u16,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToInt32Vector(
    propvar: ?*const PROPVARIANT,
    prgn: [*]i32,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToUInt32Vector(
    propvar: ?*const PROPVARIANT,
    prgn: [*]u32,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToInt64Vector(
    propvar: ?*const PROPVARIANT,
    prgn: [*]i64,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToUInt64Vector(
    propvar: ?*const PROPVARIANT,
    prgn: [*]u64,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToDoubleVector(
    propvar: ?*const PROPVARIANT,
    prgn: [*]f64,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToFileTimeVector(
    propvar: ?*const PROPVARIANT,
    prgft: [*]FILETIME,
    crgft: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToStringVector(
    propvar: ?*const PROPVARIANT,
    prgsz: [*]?PWSTR,
    crgsz: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToBooleanVectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgf: ?*?*BOOL,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToInt16VectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgn: ?*?*i16,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToUInt16VectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgn: ?*?*u16,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToInt32VectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgn: ?*?*i32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToUInt32VectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgn: ?*?*u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToInt64VectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgn: ?*?*i64,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToUInt64VectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgn: ?*?*u64,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToDoubleVectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgn: ?*?*f64,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToFileTimeVectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgft: ?*?*FILETIME,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantToStringVectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgsz: ?*?*?PWSTR,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantGetBooleanElem(
    propvar: ?*const PROPVARIANT,
    iElem: u32,
    pfVal: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantGetInt16Elem(
    propvar: ?*const PROPVARIANT,
    iElem: u32,
    pnVal: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantGetUInt16Elem(
    propvar: ?*const PROPVARIANT,
    iElem: u32,
    pnVal: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantGetInt32Elem(
    propvar: ?*const PROPVARIANT,
    iElem: u32,
    pnVal: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantGetUInt32Elem(
    propvar: ?*const PROPVARIANT,
    iElem: u32,
    pnVal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantGetInt64Elem(
    propvar: ?*const PROPVARIANT,
    iElem: u32,
    pnVal: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantGetUInt64Elem(
    propvar: ?*const PROPVARIANT,
    iElem: u32,
    pnVal: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantGetDoubleElem(
    propvar: ?*const PROPVARIANT,
    iElem: u32,
    pnVal: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantGetFileTimeElem(
    propvar: ?*const PROPVARIANT,
    iElem: u32,
    pftVal: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantGetStringElem(
    propvar: ?*const PROPVARIANT,
    iElem: u32,
    ppszVal: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn ClearPropVariantArray(
    rgPropVar: [*]PROPVARIANT,
    cVars: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantCompareEx(
    propvar1: ?*const PROPVARIANT,
    propvar2: ?*const PROPVARIANT,
    unit: PROPVAR_COMPARE_UNIT,
    flags: PROPVAR_COMPARE_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn PropVariantChangeType(
    ppropvarDest: ?*PROPVARIANT,
    propvarSrc: ?*const PROPVARIANT,
    flags: PROPVAR_CHANGE_FLAGS,
    vt: u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "PROPSYS" fn PropVariantToVariant(
    pPropVar: ?*const PROPVARIANT,
    pVar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "PROPSYS" fn VariantToPropVariant(
    pVar: ?*const VARIANT,
    pPropVar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitVariantFromResource(
    hinst: ?HINSTANCE,
    id: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitVariantFromBuffer(
    // TODO: what to do with BytesParamIndex 1?
    pv: ?*const anyopaque,
    cb: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitVariantFromGUIDAsString(
    guid: ?*const Guid,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitVariantFromFileTime(
    pft: ?*const FILETIME,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitVariantFromFileTimeArray(
    prgft: ?[*]const FILETIME,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitVariantFromStrRet(
    pstrret: ?*STRRET,
    pidl: ?*ITEMIDLIST,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitVariantFromVariantArrayElem(
    varIn: ?*const VARIANT,
    iElem: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitVariantFromBooleanArray(
    prgf: [*]const BOOL,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitVariantFromInt16Array(
    prgn: [*]const i16,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitVariantFromUInt16Array(
    prgn: [*:0]const u16,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitVariantFromInt32Array(
    prgn: [*]const i32,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitVariantFromUInt32Array(
    prgn: [*]const u32,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitVariantFromInt64Array(
    prgn: [*]const i64,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitVariantFromUInt64Array(
    prgn: [*]const u64,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitVariantFromDoubleArray(
    prgn: [*]const f64,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn InitVariantFromStringArray(
    prgsz: [*]?PWSTR,
    cElems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToBooleanWithDefault(
    varIn: ?*const VARIANT,
    fDefault: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToInt16WithDefault(
    varIn: ?*const VARIANT,
    iDefault: i16,
) callconv(@import("std").os.windows.WINAPI) i16;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToUInt16WithDefault(
    varIn: ?*const VARIANT,
    uiDefault: u16,
) callconv(@import("std").os.windows.WINAPI) u16;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToInt32WithDefault(
    varIn: ?*const VARIANT,
    lDefault: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToUInt32WithDefault(
    varIn: ?*const VARIANT,
    ulDefault: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToInt64WithDefault(
    varIn: ?*const VARIANT,
    llDefault: i64,
) callconv(@import("std").os.windows.WINAPI) i64;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToUInt64WithDefault(
    varIn: ?*const VARIANT,
    ullDefault: u64,
) callconv(@import("std").os.windows.WINAPI) u64;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToDoubleWithDefault(
    varIn: ?*const VARIANT,
    dblDefault: f64,
) callconv(@import("std").os.windows.WINAPI) f64;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToStringWithDefault(
    varIn: ?*const VARIANT,
    pszDefault: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToBoolean(
    varIn: ?*const VARIANT,
    pfRet: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToInt16(
    varIn: ?*const VARIANT,
    piRet: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToUInt16(
    varIn: ?*const VARIANT,
    puiRet: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToInt32(
    varIn: ?*const VARIANT,
    plRet: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToUInt32(
    varIn: ?*const VARIANT,
    pulRet: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToInt64(
    varIn: ?*const VARIANT,
    pllRet: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToUInt64(
    varIn: ?*const VARIANT,
    pullRet: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToDouble(
    varIn: ?*const VARIANT,
    pdblRet: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToBuffer(
    varIn: ?*const VARIANT,
    // TODO: what to do with BytesParamIndex 2?
    pv: ?*anyopaque,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToGUID(
    varIn: ?*const VARIANT,
    pguid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToString(
    varIn: ?*const VARIANT,
    pszBuf: [*:0]u16,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToStringAlloc(
    varIn: ?*const VARIANT,
    ppszBuf: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToDosDateTime(
    varIn: ?*const VARIANT,
    pwDate: ?*u16,
    pwTime: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToStrRet(
    varIn: ?*const VARIANT,
    pstrret: ?*STRRET,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToFileTime(
    varIn: ?*const VARIANT,
    stfOut: PSTIME_FLAGS,
    pftOut: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantGetElementCount(
    varIn: ?*const VARIANT,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToBooleanArray(
    @"var": ?*const VARIANT,
    prgf: [*]BOOL,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToInt16Array(
    @"var": ?*const VARIANT,
    prgn: [*]i16,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToUInt16Array(
    @"var": ?*const VARIANT,
    prgn: [*:0]u16,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToInt32Array(
    @"var": ?*const VARIANT,
    prgn: [*]i32,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToUInt32Array(
    @"var": ?*const VARIANT,
    prgn: [*]u32,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToInt64Array(
    @"var": ?*const VARIANT,
    prgn: [*]i64,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToUInt64Array(
    @"var": ?*const VARIANT,
    prgn: [*]u64,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToDoubleArray(
    @"var": ?*const VARIANT,
    prgn: [*]f64,
    crgn: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToStringArray(
    @"var": ?*const VARIANT,
    prgsz: [*]?PWSTR,
    crgsz: u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToBooleanArrayAlloc(
    @"var": ?*const VARIANT,
    pprgf: ?*?*BOOL,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToInt16ArrayAlloc(
    @"var": ?*const VARIANT,
    pprgn: ?*?*i16,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToUInt16ArrayAlloc(
    @"var": ?*const VARIANT,
    pprgn: ?*?*u16,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToInt32ArrayAlloc(
    @"var": ?*const VARIANT,
    pprgn: ?*?*i32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToUInt32ArrayAlloc(
    @"var": ?*const VARIANT,
    pprgn: ?*?*u32,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToInt64ArrayAlloc(
    @"var": ?*const VARIANT,
    pprgn: ?*?*i64,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToUInt64ArrayAlloc(
    @"var": ?*const VARIANT,
    pprgn: ?*?*u64,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToDoubleArrayAlloc(
    @"var": ?*const VARIANT,
    pprgn: ?*?*f64,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantToStringArrayAlloc(
    @"var": ?*const VARIANT,
    pprgsz: ?*?*?PWSTR,
    pcElem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantGetBooleanElem(
    @"var": ?*const VARIANT,
    iElem: u32,
    pfVal: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantGetInt16Elem(
    @"var": ?*const VARIANT,
    iElem: u32,
    pnVal: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantGetUInt16Elem(
    @"var": ?*const VARIANT,
    iElem: u32,
    pnVal: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantGetInt32Elem(
    @"var": ?*const VARIANT,
    iElem: u32,
    pnVal: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantGetUInt32Elem(
    @"var": ?*const VARIANT,
    iElem: u32,
    pnVal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantGetInt64Elem(
    @"var": ?*const VARIANT,
    iElem: u32,
    pnVal: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantGetUInt64Elem(
    @"var": ?*const VARIANT,
    iElem: u32,
    pnVal: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantGetDoubleElem(
    @"var": ?*const VARIANT,
    iElem: u32,
    pnVal: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantGetStringElem(
    @"var": ?*const VARIANT,
    iElem: u32,
    ppszVal: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn ClearVariantArray(
    pvars: [*]VARIANT,
    cvars: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "PROPSYS" fn VariantCompare(
    var1: ?*const VARIANT,
    var2: ?*const VARIANT,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SHELL32" fn SHGetPropertyStoreFromIDList(
    pidl: ?*ITEMIDLIST,
    flags: GETPROPERTYSTOREFLAGS,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SHELL32" fn SHGetPropertyStoreFromParsingName(
    pszPath: ?[*:0]const u16,
    pbc: ?*IBindCtx,
    flags: GETPROPERTYSTOREFLAGS,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "SHELL32" fn SHAddDefaultPropertiesByExt(
    pszExt: ?[*:0]const u16,
    pPropStore: ?*IPropertyStore,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SHELL32" fn PifMgr_OpenProperties(
    pszApp: ?[*:0]const u16,
    pszPIF: ?[*:0]const u16,
    hInf: u32,
    flOpt: u32,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SHELL32" fn PifMgr_GetProperties(
    hProps: ?HANDLE,
    pszGroup: ?[*:0]const u8,
    // TODO: what to do with BytesParamIndex 3?
    lpProps: ?*anyopaque,
    cbProps: i32,
    flOpt: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SHELL32" fn PifMgr_SetProperties(
    hProps: ?HANDLE,
    pszGroup: ?[*:0]const u8,
    // TODO: what to do with BytesParamIndex 3?
    lpProps: ?*const anyopaque,
    cbProps: i32,
    flOpt: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SHELL32" fn PifMgr_CloseProperties(
    hProps: ?HANDLE,
    flOpt: u32,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "SHELL32" fn SHPropStgCreate(
    psstg: ?*IPropertySetStorage,
    fmtid: ?*const Guid,
    pclsid: ?*const Guid,
    grfFlags: u32,
    grfMode: u32,
    dwDisposition: u32,
    ppstg: ?*?*IPropertyStorage,
    puCodePage: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "SHELL32" fn SHPropStgReadMultiple(
    pps: ?*IPropertyStorage,
    uCodePage: u32,
    cpspec: u32,
    rgpspec: [*]const PROPSPEC,
    rgvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "SHELL32" fn SHPropStgWriteMultiple(
    pps: ?*IPropertyStorage,
    puCodePage: ?*u32,
    cpspec: u32,
    rgpspec: [*]const PROPSPEC,
    rgvar: [*]PROPVARIANT,
    propidNameFirst: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "SHELL32" fn SHGetPropertyStoreForWindow(
    hwnd: ?HWND,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (26)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOL = @import("../../foundation.zig").BOOL;
const BSTR = @import("../../foundation.zig").BSTR;
const CHAR = @import("../../foundation.zig").CHAR;
const CONDITION_OPERATION = @import("../../system/search/common.zig").CONDITION_OPERATION;
const FILETIME = @import("../../foundation.zig").FILETIME;
const HANDLE = @import("../../foundation.zig").HANDLE;
const HINSTANCE = @import("../../foundation.zig").HINSTANCE;
const HRESULT = @import("../../foundation.zig").HRESULT;
const HWND = @import("../../foundation.zig").HWND;
const IBindCtx = @import("../../system/com.zig").IBindCtx;
const IPropertyBag = @import("../../system/com/structured_storage.zig").IPropertyBag;
const IPropertySetStorage = @import("../../system/com/structured_storage.zig").IPropertySetStorage;
const IPropertyStorage = @import("../../system/com/structured_storage.zig").IPropertyStorage;
const IStream = @import("../../system/com.zig").IStream;
const ITEMIDLIST = @import("../../ui/shell/common.zig").ITEMIDLIST;
const IUnknown = @import("../../system/com.zig").IUnknown;
const POINTL = @import("../../foundation.zig").POINTL;
const POINTS = @import("../../foundation.zig").POINTS;
const PROPSPEC = @import("../../system/com/structured_storage.zig").PROPSPEC;
const PROPVARIANT = @import("../../system/com/structured_storage.zig").PROPVARIANT;
const PSTR = @import("../../foundation.zig").PSTR;
const PWSTR = @import("../../foundation.zig").PWSTR;
const RECTL = @import("../../foundation.zig").RECTL;
const STRRET = @import("../../ui/shell/common.zig").STRRET;
const VARIANT = @import("../../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
