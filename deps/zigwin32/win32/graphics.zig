//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (1)
//--------------------------------------------------------------------------------
pub const D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE = enum(u32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    CUBIC = 2,
    MULTI_SAMPLE_LINEAR = 3,
    ANISOTROPIC = 4,
    HIGH_QUALITY_CUBIC = 5,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR = D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE.NEAREST_NEIGHBOR;
pub const D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_LINEAR = D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE.LINEAR;
pub const D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_CUBIC = D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE.CUBIC;
pub const D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE.MULTI_SAMPLE_LINEAR;
pub const D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC = D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE.ANISOTROPIC;
pub const D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE.HIGH_QUALITY_CUBIC;
pub const D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_FORCE_DWORD = D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE.FORCE_DWORD;


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (0)
//--------------------------------------------------------------------------------

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
//--------------------------------------------------------------------------------
// Section: SubModules (20)
//--------------------------------------------------------------------------------
pub const composition_swapchain = @import("graphics/composition_swapchain.zig");
pub const direct2d = @import("graphics/direct2d.zig");
pub const direct3d = @import("graphics/direct3d.zig");
pub const direct3d10 = @import("graphics/direct3d10.zig");
pub const direct3d11 = @import("graphics/direct3d11.zig");
pub const direct3d11on12 = @import("graphics/direct3d11on12.zig");
pub const direct3d12 = @import("graphics/direct3d12.zig");
pub const direct3d9 = @import("graphics/direct3d9.zig");
pub const direct_composition = @import("graphics/direct_composition.zig");
pub const direct_draw = @import("graphics/direct_draw.zig");
pub const direct_manipulation = @import("graphics/direct_manipulation.zig");
pub const direct_write = @import("graphics/direct_write.zig");
pub const dwm = @import("graphics/dwm.zig");
pub const dxcore = @import("graphics/dxcore.zig");
pub const dxgi = @import("graphics/dxgi.zig");
pub const gdi = @import("graphics/gdi.zig");
pub const hlsl = @import("graphics/hlsl.zig");
pub const imaging = @import("graphics/imaging.zig");
pub const open_gl = @import("graphics/open_gl.zig");
pub const printing = @import("graphics/printing.zig");
