//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (1)
//--------------------------------------------------------------------------------
pub const CLSID_XMLGraphBuilder = Guid.initString("1bb05961-5fbf-11d2-a521-44df07c10000");

//--------------------------------------------------------------------------------
// Section: Types (1)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
const IID_IXMLGraphBuilder_Value = @import("../../zig.zig").Guid.initString("1bb05960-5fbf-11d2-a521-44df07c10000");
pub const IID_IXMLGraphBuilder = &IID_IXMLGraphBuilder_Value;
pub const IXMLGraphBuilder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BuildFromXML: fn(
            self: *const IXMLGraphBuilder,
            pGraph: ?*IGraphBuilder,
            pxml: ?*IXMLElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveToXML: fn(
            self: *const IXMLGraphBuilder,
            pGraph: ?*IGraphBuilder,
            pbstrxml: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BuildFromXMLFile: fn(
            self: *const IXMLGraphBuilder,
            pGraph: ?*IGraphBuilder,
            wszFileName: ?[*:0]const u16,
            wszBaseURL: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXMLGraphBuilder_BuildFromXML(self: *const T, pGraph: ?*IGraphBuilder, pxml: ?*IXMLElement) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXMLGraphBuilder.VTable, self.vtable).BuildFromXML(@ptrCast(*const IXMLGraphBuilder, self), pGraph, pxml);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXMLGraphBuilder_SaveToXML(self: *const T, pGraph: ?*IGraphBuilder, pbstrxml: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXMLGraphBuilder.VTable, self.vtable).SaveToXML(@ptrCast(*const IXMLGraphBuilder, self), pGraph, pbstrxml);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXMLGraphBuilder_BuildFromXMLFile(self: *const T, pGraph: ?*IGraphBuilder, wszFileName: ?[*:0]const u16, wszBaseURL: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXMLGraphBuilder.VTable, self.vtable).BuildFromXMLFile(@ptrCast(*const IXMLGraphBuilder, self), pGraph, wszFileName, wszBaseURL);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (7)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BSTR = @import("../../foundation.zig").BSTR;
const HRESULT = @import("../../foundation.zig").HRESULT;
const IGraphBuilder = @import("../../media/direct_show.zig").IGraphBuilder;
const IUnknown = @import("../../system/com.zig").IUnknown;
const IXMLElement = @import("../../data/xml/ms_xml.zig").IXMLElement;
const PWSTR = @import("../../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
