//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (342)
//--------------------------------------------------------------------------------
pub const WMT_VIDEOIMAGE_SAMPLE_INPUT_FRAME = @as(u32, 1);
pub const WMT_VIDEOIMAGE_SAMPLE_OUTPUT_FRAME = @as(u32, 2);
pub const WMT_VIDEOIMAGE_SAMPLE_USES_CURRENT_INPUT_FRAME = @as(u32, 4);
pub const WMT_VIDEOIMAGE_SAMPLE_USES_PREVIOUS_INPUT_FRAME = @as(u32, 8);
pub const WMT_VIDEOIMAGE_SAMPLE_MOTION = @as(u32, 1);
pub const WMT_VIDEOIMAGE_SAMPLE_ROTATION = @as(u32, 2);
pub const WMT_VIDEOIMAGE_SAMPLE_BLENDING = @as(u32, 4);
pub const WMT_VIDEOIMAGE_SAMPLE_ADV_BLENDING = @as(u32, 8);
pub const WMT_VIDEOIMAGE_INTEGER_DENOMINATOR = @as(i32, 65536);
pub const WMT_VIDEOIMAGE_MAGIC_NUMBER = @as(u32, 491406834);
pub const WMT_VIDEOIMAGE_MAGIC_NUMBER_2 = @as(u32, 491406835);
pub const WMT_VIDEOIMAGE_TRANSITION_BOW_TIE = @as(u32, 11);
pub const WMT_VIDEOIMAGE_TRANSITION_CIRCLE = @as(u32, 12);
pub const WMT_VIDEOIMAGE_TRANSITION_CROSS_FADE = @as(u32, 13);
pub const WMT_VIDEOIMAGE_TRANSITION_DIAGONAL = @as(u32, 14);
pub const WMT_VIDEOIMAGE_TRANSITION_DIAMOND = @as(u32, 15);
pub const WMT_VIDEOIMAGE_TRANSITION_FADE_TO_COLOR = @as(u32, 16);
pub const WMT_VIDEOIMAGE_TRANSITION_FILLED_V = @as(u32, 17);
pub const WMT_VIDEOIMAGE_TRANSITION_FLIP = @as(u32, 18);
pub const WMT_VIDEOIMAGE_TRANSITION_INSET = @as(u32, 19);
pub const WMT_VIDEOIMAGE_TRANSITION_IRIS = @as(u32, 20);
pub const WMT_VIDEOIMAGE_TRANSITION_PAGE_ROLL = @as(u32, 21);
pub const WMT_VIDEOIMAGE_TRANSITION_RECTANGLE = @as(u32, 23);
pub const WMT_VIDEOIMAGE_TRANSITION_REVEAL = @as(u32, 24);
pub const WMT_VIDEOIMAGE_TRANSITION_SLIDE = @as(u32, 27);
pub const WMT_VIDEOIMAGE_TRANSITION_SPLIT = @as(u32, 29);
pub const WMT_VIDEOIMAGE_TRANSITION_STAR = @as(u32, 30);
pub const WMT_VIDEOIMAGE_TRANSITION_WHEEL = @as(u32, 31);
pub const WM_SampleExtension_ContentType_Size = @as(u32, 1);
pub const WM_SampleExtension_PixelAspectRatio_Size = @as(u32, 2);
pub const WM_SampleExtension_Timecode_Size = @as(u32, 14);
pub const WM_SampleExtension_SampleDuration_Size = @as(u32, 2);
pub const WM_SampleExtension_ChromaLocation_Size = @as(u32, 1);
pub const WM_SampleExtension_ColorSpaceInfo_Size = @as(u32, 3);
pub const WM_CT_REPEAT_FIRST_FIELD = @as(u32, 16);
pub const WM_CT_BOTTOM_FIELD_FIRST = @as(u32, 32);
pub const WM_CT_TOP_FIELD_FIRST = @as(u32, 64);
pub const WM_CT_INTERLACED = @as(u32, 128);
pub const WM_CL_INTERLACED420 = @as(u32, 0);
pub const WM_CL_PROGRESSIVE420 = @as(u32, 1);
pub const WM_MAX_VIDEO_STREAMS = @as(u32, 63);
pub const WM_MAX_STREAMS = @as(u32, 63);
pub const WMDRM_IMPORT_INIT_STRUCT_DEFINED = @as(u32, 1);
pub const DRM_OPL_TYPES = @as(u32, 1);
pub const g_dwWMSpecialAttributes = @as(u32, 20);
pub const g_wszWMDuration = "Duration";
pub const g_wszWMBitrate = "Bitrate";
pub const g_wszWMSeekable = "Seekable";
pub const g_wszWMStridable = "Stridable";
pub const g_wszWMBroadcast = "Broadcast";
pub const g_wszWMProtected = "Is_Protected";
pub const g_wszWMTrusted = "Is_Trusted";
pub const g_wszWMSignature_Name = "Signature_Name";
pub const g_wszWMHasAudio = "HasAudio";
pub const g_wszWMHasImage = "HasImage";
pub const g_wszWMHasScript = "HasScript";
pub const g_wszWMHasVideo = "HasVideo";
pub const g_wszWMCurrentBitrate = "CurrentBitrate";
pub const g_wszWMOptimalBitrate = "OptimalBitrate";
pub const g_wszWMHasAttachedImages = "HasAttachedImages";
pub const g_wszWMSkipBackward = "Can_Skip_Backward";
pub const g_wszWMSkipForward = "Can_Skip_Forward";
pub const g_wszWMNumberOfFrames = "NumberOfFrames";
pub const g_wszWMFileSize = "FileSize";
pub const g_wszWMHasArbitraryDataStream = "HasArbitraryDataStream";
pub const g_wszWMHasFileTransferStream = "HasFileTransferStream";
pub const g_wszWMContainerFormat = "WM/ContainerFormat";
pub const g_dwWMContentAttributes = @as(u32, 5);
pub const g_wszWMTitle = "Title";
pub const g_wszWMTitleSort = "TitleSort";
pub const g_wszWMAuthor = "Author";
pub const g_wszWMAuthorSort = "AuthorSort";
pub const g_wszWMDescription = "Description";
pub const g_wszWMRating = "Rating";
pub const g_wszWMCopyright = "Copyright";
pub const g_wszWMUse_DRM = "Use_DRM";
pub const g_wszWMDRM_Flags = "DRM_Flags";
pub const g_wszWMDRM_Level = "DRM_Level";
pub const g_wszWMUse_Advanced_DRM = "Use_Advanced_DRM";
pub const g_wszWMDRM_KeySeed = "DRM_KeySeed";
pub const g_wszWMDRM_KeyID = "DRM_KeyID";
pub const g_wszWMDRM_ContentID = "DRM_ContentID";
pub const g_wszWMDRM_SourceID = "DRM_SourceID";
pub const g_wszWMDRM_IndividualizedVersion = "DRM_IndividualizedVersion";
pub const g_wszWMDRM_LicenseAcqURL = "DRM_LicenseAcqURL";
pub const g_wszWMDRM_V1LicenseAcqURL = "DRM_V1LicenseAcqURL";
pub const g_wszWMDRM_HeaderSignPrivKey = "DRM_HeaderSignPrivKey";
pub const g_wszWMDRM_LASignaturePrivKey = "DRM_LASignaturePrivKey";
pub const g_wszWMDRM_LASignatureCert = "DRM_LASignatureCert";
pub const g_wszWMDRM_LASignatureLicSrvCert = "DRM_LASignatureLicSrvCert";
pub const g_wszWMDRM_LASignatureRootCert = "DRM_LASignatureRootCert";
pub const g_wszWMAlbumTitle = "WM/AlbumTitle";
pub const g_wszWMAlbumTitleSort = "WM/AlbumTitleSort";
pub const g_wszWMTrack = "WM/Track";
pub const g_wszWMPromotionURL = "WM/PromotionURL";
pub const g_wszWMAlbumCoverURL = "WM/AlbumCoverURL";
pub const g_wszWMGenre = "WM/Genre";
pub const g_wszWMYear = "WM/Year";
pub const g_wszWMGenreID = "WM/GenreID";
pub const g_wszWMMCDI = "WM/MCDI";
pub const g_wszWMComposer = "WM/Composer";
pub const g_wszWMComposerSort = "WM/ComposerSort";
pub const g_wszWMLyrics = "WM/Lyrics";
pub const g_wszWMTrackNumber = "WM/TrackNumber";
pub const g_wszWMToolName = "WM/ToolName";
pub const g_wszWMToolVersion = "WM/ToolVersion";
pub const g_wszWMIsVBR = "IsVBR";
pub const g_wszWMAlbumArtist = "WM/AlbumArtist";
pub const g_wszWMAlbumArtistSort = "WM/AlbumArtistSort";
pub const g_wszWMBannerImageType = "BannerImageType";
pub const g_wszWMBannerImageData = "BannerImageData";
pub const g_wszWMBannerImageURL = "BannerImageURL";
pub const g_wszWMCopyrightURL = "CopyrightURL";
pub const g_wszWMAspectRatioX = "AspectRatioX";
pub const g_wszWMAspectRatioY = "AspectRatioY";
pub const g_wszASFLeakyBucketPairs = "ASFLeakyBucketPairs";
pub const g_dwWMNSCAttributes = @as(u32, 5);
pub const g_wszWMNSCName = "NSC_Name";
pub const g_wszWMNSCAddress = "NSC_Address";
pub const g_wszWMNSCPhone = "NSC_Phone";
pub const g_wszWMNSCEmail = "NSC_Email";
pub const g_wszWMNSCDescription = "NSC_Description";
pub const g_wszWMWriter = "WM/Writer";
pub const g_wszWMConductor = "WM/Conductor";
pub const g_wszWMProducer = "WM/Producer";
pub const g_wszWMDirector = "WM/Director";
pub const g_wszWMContentGroupDescription = "WM/ContentGroupDescription";
pub const g_wszWMSubTitle = "WM/SubTitle";
pub const g_wszWMPartOfSet = "WM/PartOfSet";
pub const g_wszWMProtectionType = "WM/ProtectionType";
pub const g_wszWMVideoHeight = "WM/VideoHeight";
pub const g_wszWMVideoWidth = "WM/VideoWidth";
pub const g_wszWMVideoFrameRate = "WM/VideoFrameRate";
pub const g_wszWMMediaClassPrimaryID = "WM/MediaClassPrimaryID";
pub const g_wszWMMediaClassSecondaryID = "WM/MediaClassSecondaryID";
pub const g_wszWMPeriod = "WM/Period";
pub const g_wszWMCategory = "WM/Category";
pub const g_wszWMPicture = "WM/Picture";
pub const g_wszWMLyrics_Synchronised = "WM/Lyrics_Synchronised";
pub const g_wszWMOriginalLyricist = "WM/OriginalLyricist";
pub const g_wszWMOriginalArtist = "WM/OriginalArtist";
pub const g_wszWMOriginalAlbumTitle = "WM/OriginalAlbumTitle";
pub const g_wszWMOriginalReleaseYear = "WM/OriginalReleaseYear";
pub const g_wszWMOriginalFilename = "WM/OriginalFilename";
pub const g_wszWMPublisher = "WM/Publisher";
pub const g_wszWMEncodedBy = "WM/EncodedBy";
pub const g_wszWMEncodingSettings = "WM/EncodingSettings";
pub const g_wszWMEncodingTime = "WM/EncodingTime";
pub const g_wszWMAuthorURL = "WM/AuthorURL";
pub const g_wszWMUserWebURL = "WM/UserWebURL";
pub const g_wszWMAudioFileURL = "WM/AudioFileURL";
pub const g_wszWMAudioSourceURL = "WM/AudioSourceURL";
pub const g_wszWMLanguage = "WM/Language";
pub const g_wszWMParentalRating = "WM/ParentalRating";
pub const g_wszWMBeatsPerMinute = "WM/BeatsPerMinute";
pub const g_wszWMInitialKey = "WM/InitialKey";
pub const g_wszWMMood = "WM/Mood";
pub const g_wszWMText = "WM/Text";
pub const g_wszWMDVDID = "WM/DVDID";
pub const g_wszWMWMContentID = "WM/WMContentID";
pub const g_wszWMWMCollectionID = "WM/WMCollectionID";
pub const g_wszWMWMCollectionGroupID = "WM/WMCollectionGroupID";
pub const g_wszWMUniqueFileIdentifier = "WM/UniqueFileIdentifier";
pub const g_wszWMModifiedBy = "WM/ModifiedBy";
pub const g_wszWMRadioStationName = "WM/RadioStationName";
pub const g_wszWMRadioStationOwner = "WM/RadioStationOwner";
pub const g_wszWMPlaylistDelay = "WM/PlaylistDelay";
pub const g_wszWMCodec = "WM/Codec";
pub const g_wszWMDRM = "WM/DRM";
pub const g_wszWMISRC = "WM/ISRC";
pub const g_wszWMProvider = "WM/Provider";
pub const g_wszWMProviderRating = "WM/ProviderRating";
pub const g_wszWMProviderStyle = "WM/ProviderStyle";
pub const g_wszWMContentDistributor = "WM/ContentDistributor";
pub const g_wszWMSubscriptionContentID = "WM/SubscriptionContentID";
pub const g_wszWMWMADRCPeakReference = "WM/WMADRCPeakReference";
pub const g_wszWMWMADRCPeakTarget = "WM/WMADRCPeakTarget";
pub const g_wszWMWMADRCAverageReference = "WM/WMADRCAverageReference";
pub const g_wszWMWMADRCAverageTarget = "WM/WMADRCAverageTarget";
pub const g_wszWMStreamTypeInfo = "WM/StreamTypeInfo";
pub const g_wszWMPeakBitrate = "WM/PeakBitrate";
pub const g_wszWMASFPacketCount = "WM/ASFPacketCount";
pub const g_wszWMASFSecurityObjectsSize = "WM/ASFSecurityObjectsSize";
pub const g_wszWMSharedUserRating = "WM/SharedUserRating";
pub const g_wszWMSubTitleDescription = "WM/SubTitleDescription";
pub const g_wszWMMediaCredits = "WM/MediaCredits";
pub const g_wszWMParentalRatingReason = "WM/ParentalRatingReason";
pub const g_wszWMOriginalReleaseTime = "WM/OriginalReleaseTime";
pub const g_wszWMMediaStationCallSign = "WM/MediaStationCallSign";
pub const g_wszWMMediaStationName = "WM/MediaStationName";
pub const g_wszWMMediaNetworkAffiliation = "WM/MediaNetworkAffiliation";
pub const g_wszWMMediaOriginalChannel = "WM/MediaOriginalChannel";
pub const g_wszWMMediaOriginalBroadcastDateTime = "WM/MediaOriginalBroadcastDateTime";
pub const g_wszWMMediaIsStereo = "WM/MediaIsStereo";
pub const g_wszWMVideoClosedCaptioning = "WM/VideoClosedCaptioning";
pub const g_wszWMMediaIsRepeat = "WM/MediaIsRepeat";
pub const g_wszWMMediaIsLive = "WM/MediaIsLive";
pub const g_wszWMMediaIsTape = "WM/MediaIsTape";
pub const g_wszWMMediaIsDelay = "WM/MediaIsDelay";
pub const g_wszWMMediaIsSubtitled = "WM/MediaIsSubtitled";
pub const g_wszWMMediaIsPremiere = "WM/MediaIsPremiere";
pub const g_wszWMMediaIsFinale = "WM/MediaIsFinale";
pub const g_wszWMMediaIsSAP = "WM/MediaIsSAP";
pub const g_wszWMProviderCopyright = "WM/ProviderCopyright";
pub const g_wszWMISAN = "WM/ISAN";
pub const g_wszWMADID = "WM/ADID";
pub const g_wszWMWMShadowFileSourceFileType = "WM/WMShadowFileSourceFileType";
pub const g_wszWMWMShadowFileSourceDRMType = "WM/WMShadowFileSourceDRMType";
pub const g_wszWMWMCPDistributor = "WM/WMCPDistributor";
pub const g_wszWMWMCPDistributorID = "WM/WMCPDistributorID";
pub const g_wszWMSeasonNumber = "WM/SeasonNumber";
pub const g_wszWMEpisodeNumber = "WM/EpisodeNumber";
pub const g_wszEarlyDataDelivery = "EarlyDataDelivery";
pub const g_wszJustInTimeDecode = "JustInTimeDecode";
pub const g_wszSingleOutputBuffer = "SingleOutputBuffer";
pub const g_wszSoftwareScaling = "SoftwareScaling";
pub const g_wszDeliverOnReceive = "DeliverOnReceive";
pub const g_wszScrambledAudio = "ScrambledAudio";
pub const g_wszDedicatedDeliveryThread = "DedicatedDeliveryThread";
pub const g_wszEnableDiscreteOutput = "EnableDiscreteOutput";
pub const g_wszSpeakerConfig = "SpeakerConfig";
pub const g_wszDynamicRangeControl = "DynamicRangeControl";
pub const g_wszAllowInterlacedOutput = "AllowInterlacedOutput";
pub const g_wszVideoSampleDurations = "VideoSampleDurations";
pub const g_wszStreamLanguage = "StreamLanguage";
pub const g_wszEnableWMAProSPDIFOutput = "EnableWMAProSPDIFOutput";
pub const g_wszDeinterlaceMode = "DeinterlaceMode";
pub const g_wszInitialPatternForInverseTelecine = "InitialPatternForInverseTelecine";
pub const g_wszJPEGCompressionQuality = "JPEGCompressionQuality";
pub const g_wszWatermarkCLSID = "WatermarkCLSID";
pub const g_wszWatermarkConfig = "WatermarkConfig";
pub const g_wszInterlacedCoding = "InterlacedCoding";
pub const g_wszFixedFrameRate = "FixedFrameRate";
pub const g_wszOriginalSourceFormatTag = "_SOURCEFORMATTAG";
pub const g_wszOriginalWaveFormat = "_ORIGINALWAVEFORMAT";
pub const g_wszEDL = "_EDL";
pub const g_wszComplexity = "_COMPLEXITYEX";
pub const g_wszDecoderComplexityRequested = "_DECODERCOMPLEXITYPROFILE";
pub const g_wszReloadIndexOnSeek = "ReloadIndexOnSeek";
pub const g_wszStreamNumIndexObjects = "StreamNumIndexObjects";
pub const g_wszFailSeekOnError = "FailSeekOnError";
pub const g_wszPermitSeeksBeyondEndOfStream = "PermitSeeksBeyondEndOfStream";
pub const g_wszUsePacketAtSeekPoint = "UsePacketAtSeekPoint";
pub const g_wszSourceBufferTime = "SourceBufferTime";
pub const g_wszSourceMaxBytesAtOnce = "SourceMaxBytesAtOnce";
pub const g_wszVBREnabled = "_VBRENABLED";
pub const g_wszVBRQuality = "_VBRQUALITY";
pub const g_wszVBRBitrateMax = "_RMAX";
pub const g_wszVBRBufferWindowMax = "_BMAX";
pub const g_wszVBRPeak = "VBR Peak";
pub const g_wszBufferAverage = "Buffer Average";
pub const g_wszComplexityMax = "_COMPLEXITYEXMAX";
pub const g_wszComplexityOffline = "_COMPLEXITYEXOFFLINE";
pub const g_wszComplexityLive = "_COMPLEXITYEXLIVE";
pub const g_wszIsVBRSupported = "_ISVBRSUPPORTED";
pub const g_wszNumPasses = "_PASSESUSED";
pub const g_wszMusicSpeechClassMode = "MusicSpeechClassMode";
pub const g_wszMusicClassMode = "MusicClassMode";
pub const g_wszSpeechClassMode = "SpeechClassMode";
pub const g_wszMixedClassMode = "MixedClassMode";
pub const g_wszSpeechCaps = "SpeechFormatCap";
pub const g_wszPeakValue = "PeakValue";
pub const g_wszAverageLevel = "AverageLevel";
pub const g_wszFold6To2Channels3 = "Fold6To2Channels3";
pub const g_wszFoldToChannelsTemplate = "Fold%luTo%luChannels%lu";
pub const g_wszDeviceConformanceTemplate = "DeviceConformanceTemplate";
pub const g_wszEnableFrameInterpolation = "EnableFrameInterpolation";
pub const g_wszNeedsPreviousSample = "NeedsPreviousSample";
pub const g_wszWMIsCompilation = "WM/IsCompilation";
pub const WMMEDIASUBTYPE_Base = Guid.initString("00000000-0000-0010-8000-00aa00389b71");
pub const WMMEDIATYPE_Video = Guid.initString("73646976-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_RGB1 = Guid.initString("e436eb78-524f-11ce-9f53-0020af0ba770");
pub const WMMEDIASUBTYPE_RGB4 = Guid.initString("e436eb79-524f-11ce-9f53-0020af0ba770");
pub const WMMEDIASUBTYPE_RGB8 = Guid.initString("e436eb7a-524f-11ce-9f53-0020af0ba770");
pub const WMMEDIASUBTYPE_RGB565 = Guid.initString("e436eb7b-524f-11ce-9f53-0020af0ba770");
pub const WMMEDIASUBTYPE_RGB555 = Guid.initString("e436eb7c-524f-11ce-9f53-0020af0ba770");
pub const WMMEDIASUBTYPE_RGB24 = Guid.initString("e436eb7d-524f-11ce-9f53-0020af0ba770");
pub const WMMEDIASUBTYPE_RGB32 = Guid.initString("e436eb7e-524f-11ce-9f53-0020af0ba770");
pub const WMMEDIASUBTYPE_I420 = Guid.initString("30323449-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_IYUV = Guid.initString("56555949-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_YV12 = Guid.initString("32315659-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_YUY2 = Guid.initString("32595559-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_P422 = Guid.initString("32323450-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_UYVY = Guid.initString("59565955-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_YVYU = Guid.initString("55595659-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_YVU9 = Guid.initString("39555659-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_VIDEOIMAGE = Guid.initString("1d4a45f2-e5f6-4b44-8388-f0ae5c0e0c37");
pub const WMMEDIASUBTYPE_MP43 = Guid.initString("3334504d-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_MP4S = Guid.initString("5334504d-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_M4S2 = Guid.initString("3253344d-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMV1 = Guid.initString("31564d57-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMV2 = Guid.initString("32564d57-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_MSS1 = Guid.initString("3153534d-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_MPEG2_VIDEO = Guid.initString("e06d8026-db46-11cf-b4d1-00805f6cbbea");
pub const WMMEDIATYPE_Audio = Guid.initString("73647561-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_PCM = Guid.initString("00000001-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_DRM = Guid.initString("00000009-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMAudioV9 = Guid.initString("00000162-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMAudio_Lossless = Guid.initString("00000163-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_MSS2 = Guid.initString("3253534d-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMSP1 = Guid.initString("0000000a-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMSP2 = Guid.initString("0000000b-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMV3 = Guid.initString("33564d57-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMVP = Guid.initString("50564d57-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WVP2 = Guid.initString("32505657-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMVA = Guid.initString("41564d57-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WVC1 = Guid.initString("31435657-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMAudioV8 = Guid.initString("00000161-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMAudioV7 = Guid.initString("00000161-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMAudioV2 = Guid.initString("00000161-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_ACELPnet = Guid.initString("00000130-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_MP3 = Guid.initString("00000055-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WebStream = Guid.initString("776257d4-c627-41cb-8f81-7ac7ff1c40cc");
pub const WMMEDIATYPE_Script = Guid.initString("73636d64-0000-0010-8000-00aa00389b71");
pub const WMMEDIATYPE_Image = Guid.initString("34a50fd8-8aa5-4386-81fe-a0efe0488e31");
pub const WMMEDIATYPE_FileTransfer = Guid.initString("d9e47579-930e-4427-adfc-ad80f290e470");
pub const WMMEDIATYPE_Text = Guid.initString("9bba1ea7-5ab2-4829-ba57-0940209bcf3e");
pub const WMFORMAT_VideoInfo = Guid.initString("05589f80-c356-11ce-bf01-00aa0055595a");
pub const WMFORMAT_MPEG2Video = Guid.initString("e06d80e3-db46-11cf-b4d1-00805f6cbbea");
pub const WMFORMAT_WaveFormatEx = Guid.initString("05589f81-c356-11ce-bf01-00aa0055595a");
pub const WMFORMAT_Script = Guid.initString("5c8510f2-debe-4ca7-bba5-f07a104f8dff");
pub const WMFORMAT_WebStream = Guid.initString("da1e6b13-8359-4050-b398-388e965bf00c");
pub const WMSCRIPTTYPE_TwoStrings = Guid.initString("82f38a70-c29f-11d1-97ad-00a0c95ea850");
pub const WM_SampleExtensionGUID_OutputCleanPoint = Guid.initString("f72a3c6f-6eb4-4ebc-b192-09ad9759e828");
pub const WM_SampleExtensionGUID_Timecode = Guid.initString("399595ec-8667-4e2d-8fdb-98814ce76c1e");
pub const WM_SampleExtensionGUID_ChromaLocation = Guid.initString("4c5acca0-9276-4b2c-9e4c-a0edefdd217e");
pub const WM_SampleExtensionGUID_ColorSpaceInfo = Guid.initString("f79ada56-30eb-4f2b-9f7a-f24b139a1157");
pub const WM_SampleExtensionGUID_UserDataInfo = Guid.initString("732bb4fa-78be-4549-99bd-02db1a55b7a8");
pub const WM_SampleExtensionGUID_FileName = Guid.initString("e165ec0e-19ed-45d7-b4a7-25cbd1e28e9b");
pub const WM_SampleExtensionGUID_ContentType = Guid.initString("d590dc20-07bc-436c-9cf7-f3bbfbf1a4dc");
pub const WM_SampleExtensionGUID_PixelAspectRatio = Guid.initString("1b1ee554-f9ea-4bc8-821a-376b74e4c4b8");
pub const WM_SampleExtensionGUID_SampleDuration = Guid.initString("c6bd9450-867f-4907-83a3-c77921b733ad");
pub const WM_SampleExtensionGUID_SampleProtectionSalt = Guid.initString("5403deee-b9ee-438f-aa83-3804997e569d");
pub const CLSID_WMMUTEX_Language = Guid.initString("d6e22a00-35da-11d1-9034-00a0c90349be");
pub const CLSID_WMMUTEX_Bitrate = Guid.initString("d6e22a01-35da-11d1-9034-00a0c90349be");
pub const CLSID_WMMUTEX_Presentation = Guid.initString("d6e22a02-35da-11d1-9034-00a0c90349be");
pub const CLSID_WMMUTEX_Unknown = Guid.initString("d6e22a03-35da-11d1-9034-00a0c90349be");
pub const CLSID_WMBandwidthSharing_Exclusive = Guid.initString("af6060aa-5197-11d2-b6af-00c04fd908e9");
pub const CLSID_WMBandwidthSharing_Partial = Guid.initString("af6060ab-5197-11d2-b6af-00c04fd908e9");
pub const WMT_DMOCATEGORY_AUDIO_WATERMARK = Guid.initString("65221c5a-fa75-4b39-b50c-06c336b6a3ef");
pub const WMT_DMOCATEGORY_VIDEO_WATERMARK = Guid.initString("187cc922-8efc-4404-9daf-63f4830df1bc");
pub const CLSID_ClientNetManager = Guid.initString("cd12a3ce-9c42-11d2-beed-0060082f2054");

//--------------------------------------------------------------------------------
// Section: Types (180)
//--------------------------------------------------------------------------------
const IID_IAMWMBufferPass_Value = @import("../zig.zig").Guid.initString("6dd816d7-e740-4123-9e24-2444412644d8");
pub const IID_IAMWMBufferPass = &IID_IAMWMBufferPass_Value;
pub const IAMWMBufferPass = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetNotify: fn(
            self: *const IAMWMBufferPass,
            pCallback: ?*IAMWMBufferPassCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAMWMBufferPass_SetNotify(self: *const T, pCallback: ?*IAMWMBufferPassCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAMWMBufferPass.VTable, self.vtable).SetNotify(@ptrCast(*const IAMWMBufferPass, self), pCallback);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAMWMBufferPassCallback_Value = @import("../zig.zig").Guid.initString("b25b8372-d2d2-44b2-8653-1b8dae332489");
pub const IID_IAMWMBufferPassCallback = &IID_IAMWMBufferPassCallback_Value;
pub const IAMWMBufferPassCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Notify: fn(
            self: *const IAMWMBufferPassCallback,
            pNSSBuffer3: ?*INSSBuffer3,
            pPin: ?*IPin,
            prtStart: ?*i64,
            prtEnd: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAMWMBufferPassCallback_Notify(self: *const T, pNSSBuffer3: ?*INSSBuffer3, pPin: ?*IPin, prtStart: ?*i64, prtEnd: ?*i64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAMWMBufferPassCallback.VTable, self.vtable).Notify(@ptrCast(*const IAMWMBufferPassCallback, self), pNSSBuffer3, pPin, prtStart, prtEnd);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _AM_ASFWRITERCONFIG_PARAM = enum(i32) {
    AUTOINDEX = 1,
    MULTIPASS = 2,
    DONTCOMPRESS = 3,
};
pub const AM_CONFIGASFWRITER_PARAM_AUTOINDEX = _AM_ASFWRITERCONFIG_PARAM.AUTOINDEX;
pub const AM_CONFIGASFWRITER_PARAM_MULTIPASS = _AM_ASFWRITERCONFIG_PARAM.MULTIPASS;
pub const AM_CONFIGASFWRITER_PARAM_DONTCOMPRESS = _AM_ASFWRITERCONFIG_PARAM.DONTCOMPRESS;

pub const AM_WMT_EVENT_DATA = extern struct {
    hrStatus: HRESULT,
    pData: ?*anyopaque,
};

const IID_INSSBuffer_Value = @import("../zig.zig").Guid.initString("e1cd3524-03d7-11d2-9eed-006097d2d7cf");
pub const IID_INSSBuffer = &IID_INSSBuffer_Value;
pub const INSSBuffer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLength: fn(
            self: *const INSSBuffer,
            pdwLength: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLength: fn(
            self: *const INSSBuffer,
            dwLength: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxLength: fn(
            self: *const INSSBuffer,
            pdwLength: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBuffer: fn(
            self: *const INSSBuffer,
            ppdwBuffer: ?*?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBufferAndLength: fn(
            self: *const INSSBuffer,
            ppdwBuffer: ?*?*u8,
            pdwLength: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INSSBuffer_GetLength(self: *const T, pdwLength: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INSSBuffer.VTable, self.vtable).GetLength(@ptrCast(*const INSSBuffer, self), pdwLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INSSBuffer_SetLength(self: *const T, dwLength: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INSSBuffer.VTable, self.vtable).SetLength(@ptrCast(*const INSSBuffer, self), dwLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INSSBuffer_GetMaxLength(self: *const T, pdwLength: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INSSBuffer.VTable, self.vtable).GetMaxLength(@ptrCast(*const INSSBuffer, self), pdwLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INSSBuffer_GetBuffer(self: *const T, ppdwBuffer: ?*?*u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const INSSBuffer.VTable, self.vtable).GetBuffer(@ptrCast(*const INSSBuffer, self), ppdwBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INSSBuffer_GetBufferAndLength(self: *const T, ppdwBuffer: ?*?*u8, pdwLength: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INSSBuffer.VTable, self.vtable).GetBufferAndLength(@ptrCast(*const INSSBuffer, self), ppdwBuffer, pdwLength);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_INSSBuffer2_Value = @import("../zig.zig").Guid.initString("4f528693-1035-43fe-b428-757561ad3a68");
pub const IID_INSSBuffer2 = &IID_INSSBuffer2_Value;
pub const INSSBuffer2 = extern struct {
    pub const VTable = extern struct {
        base: INSSBuffer.VTable,
        GetSampleProperties: fn(
            self: *const INSSBuffer2,
            cbProperties: u32,
            pbProperties: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSampleProperties: fn(
            self: *const INSSBuffer2,
            cbProperties: u32,
            pbProperties: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace INSSBuffer.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INSSBuffer2_GetSampleProperties(self: *const T, cbProperties: u32, pbProperties: ?*u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const INSSBuffer2.VTable, self.vtable).GetSampleProperties(@ptrCast(*const INSSBuffer2, self), cbProperties, pbProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INSSBuffer2_SetSampleProperties(self: *const T, cbProperties: u32, pbProperties: ?*u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const INSSBuffer2.VTable, self.vtable).SetSampleProperties(@ptrCast(*const INSSBuffer2, self), cbProperties, pbProperties);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_INSSBuffer3_Value = @import("../zig.zig").Guid.initString("c87ceaaf-75be-4bc4-84eb-ac2798507672");
pub const IID_INSSBuffer3 = &IID_INSSBuffer3_Value;
pub const INSSBuffer3 = extern struct {
    pub const VTable = extern struct {
        base: INSSBuffer2.VTable,
        SetProperty: fn(
            self: *const INSSBuffer3,
            guidBufferProperty: Guid,
            pvBufferProperty: ?*anyopaque,
            dwBufferPropertySize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const INSSBuffer3,
            guidBufferProperty: Guid,
            pvBufferProperty: ?*anyopaque,
            pdwBufferPropertySize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace INSSBuffer2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INSSBuffer3_SetProperty(self: *const T, guidBufferProperty: Guid, pvBufferProperty: ?*anyopaque, dwBufferPropertySize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INSSBuffer3.VTable, self.vtable).SetProperty(@ptrCast(*const INSSBuffer3, self), guidBufferProperty, pvBufferProperty, dwBufferPropertySize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INSSBuffer3_GetProperty(self: *const T, guidBufferProperty: Guid, pvBufferProperty: ?*anyopaque, pdwBufferPropertySize: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INSSBuffer3.VTable, self.vtable).GetProperty(@ptrCast(*const INSSBuffer3, self), guidBufferProperty, pvBufferProperty, pdwBufferPropertySize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_INSSBuffer4_Value = @import("../zig.zig").Guid.initString("b6b8fd5a-32e2-49d4-a910-c26cc85465ed");
pub const IID_INSSBuffer4 = &IID_INSSBuffer4_Value;
pub const INSSBuffer4 = extern struct {
    pub const VTable = extern struct {
        base: INSSBuffer3.VTable,
        GetPropertyCount: fn(
            self: *const INSSBuffer4,
            pcBufferProperties: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyByIndex: fn(
            self: *const INSSBuffer4,
            dwBufferPropertyIndex: u32,
            pguidBufferProperty: ?*Guid,
            pvBufferProperty: ?*anyopaque,
            pdwBufferPropertySize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace INSSBuffer3.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INSSBuffer4_GetPropertyCount(self: *const T, pcBufferProperties: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INSSBuffer4.VTable, self.vtable).GetPropertyCount(@ptrCast(*const INSSBuffer4, self), pcBufferProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INSSBuffer4_GetPropertyByIndex(self: *const T, dwBufferPropertyIndex: u32, pguidBufferProperty: ?*Guid, pvBufferProperty: ?*anyopaque, pdwBufferPropertySize: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INSSBuffer4.VTable, self.vtable).GetPropertyByIndex(@ptrCast(*const INSSBuffer4, self), dwBufferPropertyIndex, pguidBufferProperty, pvBufferProperty, pdwBufferPropertySize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMSBufferAllocator_Value = @import("../zig.zig").Guid.initString("61103ca4-2033-11d2-9ef1-006097d2d7cf");
pub const IID_IWMSBufferAllocator = &IID_IWMSBufferAllocator_Value;
pub const IWMSBufferAllocator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AllocateBuffer: fn(
            self: *const IWMSBufferAllocator,
            dwMaxBufferSize: u32,
            ppBuffer: ?*?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AllocatePageSizeBuffer: fn(
            self: *const IWMSBufferAllocator,
            dwMaxBufferSize: u32,
            ppBuffer: ?*?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSBufferAllocator_AllocateBuffer(self: *const T, dwMaxBufferSize: u32, ppBuffer: ?*?*INSSBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSBufferAllocator.VTable, self.vtable).AllocateBuffer(@ptrCast(*const IWMSBufferAllocator, self), dwMaxBufferSize, ppBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSBufferAllocator_AllocatePageSizeBuffer(self: *const T, dwMaxBufferSize: u32, ppBuffer: ?*?*INSSBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSBufferAllocator.VTable, self.vtable).AllocatePageSizeBuffer(@ptrCast(*const IWMSBufferAllocator, self), dwMaxBufferSize, ppBuffer);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const WEBSTREAM_SAMPLE_TYPE = enum(i32) {
    FILE = 1,
    RENDER = 2,
};
pub const WEBSTREAM_SAMPLE_TYPE_FILE = WEBSTREAM_SAMPLE_TYPE.FILE;
pub const WEBSTREAM_SAMPLE_TYPE_RENDER = WEBSTREAM_SAMPLE_TYPE.RENDER;

pub const WM_SF_TYPE = enum(i32) {
    CLEANPOINT = 1,
    DISCONTINUITY = 2,
    DATALOSS = 4,
};
pub const WM_SF_CLEANPOINT = WM_SF_TYPE.CLEANPOINT;
pub const WM_SF_DISCONTINUITY = WM_SF_TYPE.DISCONTINUITY;
pub const WM_SF_DATALOSS = WM_SF_TYPE.DATALOSS;

pub const WM_SFEX_TYPE = enum(i32) {
    NOTASYNCPOINT = 2,
    DATALOSS = 4,
};
pub const WM_SFEX_NOTASYNCPOINT = WM_SFEX_TYPE.NOTASYNCPOINT;
pub const WM_SFEX_DATALOSS = WM_SFEX_TYPE.DATALOSS;

pub const WMT_STATUS = enum(i32) {
    ERROR = 0,
    OPENED = 1,
    BUFFERING_START = 2,
    BUFFERING_STOP = 3,
    EOF = 4,
    // END_OF_FILE = 4, this enum value conflicts with EOF
    END_OF_SEGMENT = 5,
    END_OF_STREAMING = 6,
    LOCATING = 7,
    CONNECTING = 8,
    NO_RIGHTS = 9,
    MISSING_CODEC = 10,
    STARTED = 11,
    STOPPED = 12,
    CLOSED = 13,
    STRIDING = 14,
    TIMER = 15,
    INDEX_PROGRESS = 16,
    SAVEAS_START = 17,
    SAVEAS_STOP = 18,
    NEW_SOURCEFLAGS = 19,
    NEW_METADATA = 20,
    BACKUPRESTORE_BEGIN = 21,
    SOURCE_SWITCH = 22,
    ACQUIRE_LICENSE = 23,
    INDIVIDUALIZE = 24,
    NEEDS_INDIVIDUALIZATION = 25,
    NO_RIGHTS_EX = 26,
    BACKUPRESTORE_END = 27,
    BACKUPRESTORE_CONNECTING = 28,
    BACKUPRESTORE_DISCONNECTING = 29,
    ERROR_WITHURL = 30,
    RESTRICTED_LICENSE = 31,
    CLIENT_CONNECT = 32,
    CLIENT_DISCONNECT = 33,
    NATIVE_OUTPUT_PROPS_CHANGED = 34,
    RECONNECT_START = 35,
    RECONNECT_END = 36,
    CLIENT_CONNECT_EX = 37,
    CLIENT_DISCONNECT_EX = 38,
    SET_FEC_SPAN = 39,
    PREROLL_READY = 40,
    PREROLL_COMPLETE = 41,
    CLIENT_PROPERTIES = 42,
    LICENSEURL_SIGNATURE_STATE = 43,
    INIT_PLAYLIST_BURN = 44,
    TRANSCRYPTOR_INIT = 45,
    TRANSCRYPTOR_SEEKED = 46,
    TRANSCRYPTOR_READ = 47,
    TRANSCRYPTOR_CLOSED = 48,
    PROXIMITY_RESULT = 49,
    PROXIMITY_COMPLETED = 50,
    CONTENT_ENABLER = 51,
};
pub const WMT_ERROR = WMT_STATUS.ERROR;
pub const WMT_OPENED = WMT_STATUS.OPENED;
pub const WMT_BUFFERING_START = WMT_STATUS.BUFFERING_START;
pub const WMT_BUFFERING_STOP = WMT_STATUS.BUFFERING_STOP;
pub const WMT_EOF = WMT_STATUS.EOF;
pub const WMT_END_OF_FILE = WMT_STATUS.EOF;
pub const WMT_END_OF_SEGMENT = WMT_STATUS.END_OF_SEGMENT;
pub const WMT_END_OF_STREAMING = WMT_STATUS.END_OF_STREAMING;
pub const WMT_LOCATING = WMT_STATUS.LOCATING;
pub const WMT_CONNECTING = WMT_STATUS.CONNECTING;
pub const WMT_NO_RIGHTS = WMT_STATUS.NO_RIGHTS;
pub const WMT_MISSING_CODEC = WMT_STATUS.MISSING_CODEC;
pub const WMT_STARTED = WMT_STATUS.STARTED;
pub const WMT_STOPPED = WMT_STATUS.STOPPED;
pub const WMT_CLOSED = WMT_STATUS.CLOSED;
pub const WMT_STRIDING = WMT_STATUS.STRIDING;
pub const WMT_TIMER = WMT_STATUS.TIMER;
pub const WMT_INDEX_PROGRESS = WMT_STATUS.INDEX_PROGRESS;
pub const WMT_SAVEAS_START = WMT_STATUS.SAVEAS_START;
pub const WMT_SAVEAS_STOP = WMT_STATUS.SAVEAS_STOP;
pub const WMT_NEW_SOURCEFLAGS = WMT_STATUS.NEW_SOURCEFLAGS;
pub const WMT_NEW_METADATA = WMT_STATUS.NEW_METADATA;
pub const WMT_BACKUPRESTORE_BEGIN = WMT_STATUS.BACKUPRESTORE_BEGIN;
pub const WMT_SOURCE_SWITCH = WMT_STATUS.SOURCE_SWITCH;
pub const WMT_ACQUIRE_LICENSE = WMT_STATUS.ACQUIRE_LICENSE;
pub const WMT_INDIVIDUALIZE = WMT_STATUS.INDIVIDUALIZE;
pub const WMT_NEEDS_INDIVIDUALIZATION = WMT_STATUS.NEEDS_INDIVIDUALIZATION;
pub const WMT_NO_RIGHTS_EX = WMT_STATUS.NO_RIGHTS_EX;
pub const WMT_BACKUPRESTORE_END = WMT_STATUS.BACKUPRESTORE_END;
pub const WMT_BACKUPRESTORE_CONNECTING = WMT_STATUS.BACKUPRESTORE_CONNECTING;
pub const WMT_BACKUPRESTORE_DISCONNECTING = WMT_STATUS.BACKUPRESTORE_DISCONNECTING;
pub const WMT_ERROR_WITHURL = WMT_STATUS.ERROR_WITHURL;
pub const WMT_RESTRICTED_LICENSE = WMT_STATUS.RESTRICTED_LICENSE;
pub const WMT_CLIENT_CONNECT = WMT_STATUS.CLIENT_CONNECT;
pub const WMT_CLIENT_DISCONNECT = WMT_STATUS.CLIENT_DISCONNECT;
pub const WMT_NATIVE_OUTPUT_PROPS_CHANGED = WMT_STATUS.NATIVE_OUTPUT_PROPS_CHANGED;
pub const WMT_RECONNECT_START = WMT_STATUS.RECONNECT_START;
pub const WMT_RECONNECT_END = WMT_STATUS.RECONNECT_END;
pub const WMT_CLIENT_CONNECT_EX = WMT_STATUS.CLIENT_CONNECT_EX;
pub const WMT_CLIENT_DISCONNECT_EX = WMT_STATUS.CLIENT_DISCONNECT_EX;
pub const WMT_SET_FEC_SPAN = WMT_STATUS.SET_FEC_SPAN;
pub const WMT_PREROLL_READY = WMT_STATUS.PREROLL_READY;
pub const WMT_PREROLL_COMPLETE = WMT_STATUS.PREROLL_COMPLETE;
pub const WMT_CLIENT_PROPERTIES = WMT_STATUS.CLIENT_PROPERTIES;
pub const WMT_LICENSEURL_SIGNATURE_STATE = WMT_STATUS.LICENSEURL_SIGNATURE_STATE;
pub const WMT_INIT_PLAYLIST_BURN = WMT_STATUS.INIT_PLAYLIST_BURN;
pub const WMT_TRANSCRYPTOR_INIT = WMT_STATUS.TRANSCRYPTOR_INIT;
pub const WMT_TRANSCRYPTOR_SEEKED = WMT_STATUS.TRANSCRYPTOR_SEEKED;
pub const WMT_TRANSCRYPTOR_READ = WMT_STATUS.TRANSCRYPTOR_READ;
pub const WMT_TRANSCRYPTOR_CLOSED = WMT_STATUS.TRANSCRYPTOR_CLOSED;
pub const WMT_PROXIMITY_RESULT = WMT_STATUS.PROXIMITY_RESULT;
pub const WMT_PROXIMITY_COMPLETED = WMT_STATUS.PROXIMITY_COMPLETED;
pub const WMT_CONTENT_ENABLER = WMT_STATUS.CONTENT_ENABLER;

pub const WMT_STREAM_SELECTION = enum(i32) {
    OFF = 0,
    CLEANPOINT_ONLY = 1,
    ON = 2,
};
pub const WMT_OFF = WMT_STREAM_SELECTION.OFF;
pub const WMT_CLEANPOINT_ONLY = WMT_STREAM_SELECTION.CLEANPOINT_ONLY;
pub const WMT_ON = WMT_STREAM_SELECTION.ON;

pub const WMT_IMAGE_TYPE = enum(i32) {
    NONE = 0,
    BITMAP = 1,
    JPEG = 2,
    GIF = 3,
};
pub const WMT_IT_NONE = WMT_IMAGE_TYPE.NONE;
pub const WMT_IT_BITMAP = WMT_IMAGE_TYPE.BITMAP;
pub const WMT_IT_JPEG = WMT_IMAGE_TYPE.JPEG;
pub const WMT_IT_GIF = WMT_IMAGE_TYPE.GIF;

pub const WMT_ATTR_DATATYPE = enum(i32) {
    DWORD = 0,
    STRING = 1,
    BINARY = 2,
    BOOL = 3,
    QWORD = 4,
    WORD = 5,
    GUID = 6,
};
pub const WMT_TYPE_DWORD = WMT_ATTR_DATATYPE.DWORD;
pub const WMT_TYPE_STRING = WMT_ATTR_DATATYPE.STRING;
pub const WMT_TYPE_BINARY = WMT_ATTR_DATATYPE.BINARY;
pub const WMT_TYPE_BOOL = WMT_ATTR_DATATYPE.BOOL;
pub const WMT_TYPE_QWORD = WMT_ATTR_DATATYPE.QWORD;
pub const WMT_TYPE_WORD = WMT_ATTR_DATATYPE.WORD;
pub const WMT_TYPE_GUID = WMT_ATTR_DATATYPE.GUID;

pub const WMT_ATTR_IMAGETYPE = enum(i32) {
    BITMAP = 1,
    JPEG = 2,
    GIF = 3,
};
pub const WMT_IMAGETYPE_BITMAP = WMT_ATTR_IMAGETYPE.BITMAP;
pub const WMT_IMAGETYPE_JPEG = WMT_ATTR_IMAGETYPE.JPEG;
pub const WMT_IMAGETYPE_GIF = WMT_ATTR_IMAGETYPE.GIF;

pub const WMT_VERSION = enum(i32) {
    @"4_0" = 262144,
    @"7_0" = 458752,
    @"8_0" = 524288,
    @"9_0" = 589824,
};
pub const WMT_VER_4_0 = WMT_VERSION.@"4_0";
pub const WMT_VER_7_0 = WMT_VERSION.@"7_0";
pub const WMT_VER_8_0 = WMT_VERSION.@"8_0";
pub const WMT_VER_9_0 = WMT_VERSION.@"9_0";

pub const WMT_STORAGE_FORMAT = enum(i32) {
    MP3 = 0,
    V1 = 1,
};
pub const WMT_Storage_Format_MP3 = WMT_STORAGE_FORMAT.MP3;
pub const WMT_Storage_Format_V1 = WMT_STORAGE_FORMAT.V1;

pub const WMT_DRMLA_TRUST = enum(i32) {
    UNTRUSTED = 0,
    TRUSTED = 1,
    TAMPERED = 2,
};
pub const WMT_DRMLA_UNTRUSTED = WMT_DRMLA_TRUST.UNTRUSTED;
pub const WMT_DRMLA_TRUSTED = WMT_DRMLA_TRUST.TRUSTED;
pub const WMT_DRMLA_TAMPERED = WMT_DRMLA_TRUST.TAMPERED;

pub const WMT_TRANSPORT_TYPE = enum(i32) {
    Unreliable = 0,
    Reliable = 1,
};
pub const WMT_Transport_Type_Unreliable = WMT_TRANSPORT_TYPE.Unreliable;
pub const WMT_Transport_Type_Reliable = WMT_TRANSPORT_TYPE.Reliable;

pub const WMT_NET_PROTOCOL = enum(i32) {
    P = 0,
};
pub const WMT_PROTOCOL_HTTP = WMT_NET_PROTOCOL.P;

pub const WMT_PLAY_MODE = enum(i32) {
    AUTOSELECT = 0,
    LOCAL = 1,
    DOWNLOAD = 2,
    STREAMING = 3,
};
pub const WMT_PLAY_MODE_AUTOSELECT = WMT_PLAY_MODE.AUTOSELECT;
pub const WMT_PLAY_MODE_LOCAL = WMT_PLAY_MODE.LOCAL;
pub const WMT_PLAY_MODE_DOWNLOAD = WMT_PLAY_MODE.DOWNLOAD;
pub const WMT_PLAY_MODE_STREAMING = WMT_PLAY_MODE.STREAMING;

pub const WMT_PROXY_SETTINGS = enum(i32) {
    NONE = 0,
    MANUAL = 1,
    AUTO = 2,
    BROWSER = 3,
    MAX = 4,
};
pub const WMT_PROXY_SETTING_NONE = WMT_PROXY_SETTINGS.NONE;
pub const WMT_PROXY_SETTING_MANUAL = WMT_PROXY_SETTINGS.MANUAL;
pub const WMT_PROXY_SETTING_AUTO = WMT_PROXY_SETTINGS.AUTO;
pub const WMT_PROXY_SETTING_BROWSER = WMT_PROXY_SETTINGS.BROWSER;
pub const WMT_PROXY_SETTING_MAX = WMT_PROXY_SETTINGS.MAX;

pub const WMT_CODEC_INFO_TYPE = enum(i32) {
    AUDIO = 0,
    VIDEO = 1,
    UNKNOWN = -1,
};
pub const WMT_CODECINFO_AUDIO = WMT_CODEC_INFO_TYPE.AUDIO;
pub const WMT_CODECINFO_VIDEO = WMT_CODEC_INFO_TYPE.VIDEO;
pub const WMT_CODECINFO_UNKNOWN = WMT_CODEC_INFO_TYPE.UNKNOWN;

pub const WM_DM_INTERLACED_TYPE = enum(i32) {
    NOTINTERLACED = 0,
    DEINTERLACE_NORMAL = 1,
    DEINTERLACE_HALFSIZE = 2,
    DEINTERLACE_HALFSIZEDOUBLERATE = 3,
    DEINTERLACE_INVERSETELECINE = 4,
    DEINTERLACE_VERTICALHALFSIZEDOUBLERATE = 5,
};
pub const WM_DM_NOTINTERLACED = WM_DM_INTERLACED_TYPE.NOTINTERLACED;
pub const WM_DM_DEINTERLACE_NORMAL = WM_DM_INTERLACED_TYPE.DEINTERLACE_NORMAL;
pub const WM_DM_DEINTERLACE_HALFSIZE = WM_DM_INTERLACED_TYPE.DEINTERLACE_HALFSIZE;
pub const WM_DM_DEINTERLACE_HALFSIZEDOUBLERATE = WM_DM_INTERLACED_TYPE.DEINTERLACE_HALFSIZEDOUBLERATE;
pub const WM_DM_DEINTERLACE_INVERSETELECINE = WM_DM_INTERLACED_TYPE.DEINTERLACE_INVERSETELECINE;
pub const WM_DM_DEINTERLACE_VERTICALHALFSIZEDOUBLERATE = WM_DM_INTERLACED_TYPE.DEINTERLACE_VERTICALHALFSIZEDOUBLERATE;

pub const WM_DM_IT_FIRST_FRAME_COHERENCY = enum(i32) {
    DISABLE_COHERENT_MODE = 0,
    FIRST_FRAME_IN_CLIP_IS_AA_TOP = 1,
    FIRST_FRAME_IN_CLIP_IS_BB_TOP = 2,
    FIRST_FRAME_IN_CLIP_IS_BC_TOP = 3,
    FIRST_FRAME_IN_CLIP_IS_CD_TOP = 4,
    FIRST_FRAME_IN_CLIP_IS_DD_TOP = 5,
    FIRST_FRAME_IN_CLIP_IS_AA_BOTTOM = 6,
    FIRST_FRAME_IN_CLIP_IS_BB_BOTTOM = 7,
    FIRST_FRAME_IN_CLIP_IS_BC_BOTTOM = 8,
    FIRST_FRAME_IN_CLIP_IS_CD_BOTTOM = 9,
    FIRST_FRAME_IN_CLIP_IS_DD_BOTTOM = 10,
};
pub const WM_DM_IT_DISABLE_COHERENT_MODE = WM_DM_IT_FIRST_FRAME_COHERENCY.DISABLE_COHERENT_MODE;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_AA_TOP = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_AA_TOP;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BB_TOP = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_BB_TOP;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BC_TOP = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_BC_TOP;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_CD_TOP = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_CD_TOP;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_DD_TOP = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_DD_TOP;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_AA_BOTTOM = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_AA_BOTTOM;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BB_BOTTOM = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_BB_BOTTOM;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BC_BOTTOM = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_BC_BOTTOM;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_CD_BOTTOM = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_CD_BOTTOM;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_DD_BOTTOM = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_DD_BOTTOM;

pub const WMT_OFFSET_FORMAT = enum(i32) {
    @"100NS" = 0,
    FRAME_NUMBERS = 1,
    PLAYLIST_OFFSET = 2,
    TIMECODE = 3,
    @"100NS_APPROXIMATE" = 4,
};
pub const WMT_OFFSET_FORMAT_100NS = WMT_OFFSET_FORMAT.@"100NS";
pub const WMT_OFFSET_FORMAT_FRAME_NUMBERS = WMT_OFFSET_FORMAT.FRAME_NUMBERS;
pub const WMT_OFFSET_FORMAT_PLAYLIST_OFFSET = WMT_OFFSET_FORMAT.PLAYLIST_OFFSET;
pub const WMT_OFFSET_FORMAT_TIMECODE = WMT_OFFSET_FORMAT.TIMECODE;
pub const WMT_OFFSET_FORMAT_100NS_APPROXIMATE = WMT_OFFSET_FORMAT.@"100NS_APPROXIMATE";

pub const WMT_INDEXER_TYPE = enum(i32) {
    PRESENTATION_TIME = 0,
    FRAME_NUMBERS = 1,
    TIMECODE = 2,
};
pub const WMT_IT_PRESENTATION_TIME = WMT_INDEXER_TYPE.PRESENTATION_TIME;
pub const WMT_IT_FRAME_NUMBERS = WMT_INDEXER_TYPE.FRAME_NUMBERS;
pub const WMT_IT_TIMECODE = WMT_INDEXER_TYPE.TIMECODE;

pub const WMT_INDEX_TYPE = enum(i32) {
    DATA_UNIT = 1,
    OBJECT = 2,
    CLEAN_POINT = 3,
};
pub const WMT_IT_NEAREST_DATA_UNIT = WMT_INDEX_TYPE.DATA_UNIT;
pub const WMT_IT_NEAREST_OBJECT = WMT_INDEX_TYPE.OBJECT;
pub const WMT_IT_NEAREST_CLEAN_POINT = WMT_INDEX_TYPE.CLEAN_POINT;

pub const WMT_FILESINK_MODE = enum(i32) {
    SINGLE_BUFFERS = 1,
    FILESINK_DATA_UNITS = 2,
    FILESINK_UNBUFFERED = 4,
};
pub const WMT_FM_SINGLE_BUFFERS = WMT_FILESINK_MODE.SINGLE_BUFFERS;
pub const WMT_FM_FILESINK_DATA_UNITS = WMT_FILESINK_MODE.FILESINK_DATA_UNITS;
pub const WMT_FM_FILESINK_UNBUFFERED = WMT_FILESINK_MODE.FILESINK_UNBUFFERED;

pub const WMT_MUSICSPEECH_CLASS_MODE = enum(i32) {
    MUSIC = 0,
    SPEECH = 1,
    MIXED = 2,
};
pub const WMT_MS_CLASS_MUSIC = WMT_MUSICSPEECH_CLASS_MODE.MUSIC;
pub const WMT_MS_CLASS_SPEECH = WMT_MUSICSPEECH_CLASS_MODE.SPEECH;
pub const WMT_MS_CLASS_MIXED = WMT_MUSICSPEECH_CLASS_MODE.MIXED;

pub const WMT_WATERMARK_ENTRY_TYPE = enum(i32) {
    AUDIO = 1,
    VIDEO = 2,
};
pub const WMT_WMETYPE_AUDIO = WMT_WATERMARK_ENTRY_TYPE.AUDIO;
pub const WMT_WMETYPE_VIDEO = WMT_WATERMARK_ENTRY_TYPE.VIDEO;

pub const WM_PLAYBACK_DRC_LEVEL = enum(i32) {
    HIGH = 0,
    MEDIUM = 1,
    LOW = 2,
};
pub const WM_PLAYBACK_DRC_HIGH = WM_PLAYBACK_DRC_LEVEL.HIGH;
pub const WM_PLAYBACK_DRC_MEDIUM = WM_PLAYBACK_DRC_LEVEL.MEDIUM;
pub const WM_PLAYBACK_DRC_LOW = WM_PLAYBACK_DRC_LEVEL.LOW;

pub const WMT_TIMECODE_FRAMERATE = enum(i32) {
    @"30" = 0,
    @"30DROP" = 1,
    @"25" = 2,
    @"24" = 3,
};
pub const WMT_TIMECODE_FRAMERATE_30 = WMT_TIMECODE_FRAMERATE.@"30";
pub const WMT_TIMECODE_FRAMERATE_30DROP = WMT_TIMECODE_FRAMERATE.@"30DROP";
pub const WMT_TIMECODE_FRAMERATE_25 = WMT_TIMECODE_FRAMERATE.@"25";
pub const WMT_TIMECODE_FRAMERATE_24 = WMT_TIMECODE_FRAMERATE.@"24";

pub const WMT_CREDENTIAL_FLAGS = enum(i32) {
    SAVE = 1,
    DONT_CACHE = 2,
    CLEAR_TEXT = 4,
    PROXY = 8,
    ENCRYPT = 16,
};
pub const WMT_CREDENTIAL_SAVE = WMT_CREDENTIAL_FLAGS.SAVE;
pub const WMT_CREDENTIAL_DONT_CACHE = WMT_CREDENTIAL_FLAGS.DONT_CACHE;
pub const WMT_CREDENTIAL_CLEAR_TEXT = WMT_CREDENTIAL_FLAGS.CLEAR_TEXT;
pub const WMT_CREDENTIAL_PROXY = WMT_CREDENTIAL_FLAGS.PROXY;
pub const WMT_CREDENTIAL_ENCRYPT = WMT_CREDENTIAL_FLAGS.ENCRYPT;

pub const WM_AETYPE = enum(i32) {
    INCLUDE = 105,
    EXCLUDE = 101,
};
pub const WM_AETYPE_INCLUDE = WM_AETYPE.INCLUDE;
pub const WM_AETYPE_EXCLUDE = WM_AETYPE.EXCLUDE;

pub const WMT_RIGHTS = enum(i32) {
    PLAYBACK = 1,
    COPY_TO_NON_SDMI_DEVICE = 2,
    COPY_TO_CD = 8,
    COPY_TO_SDMI_DEVICE = 16,
    ONE_TIME = 32,
    SAVE_STREAM_PROTECTED = 64,
    COPY = 128,
    COLLABORATIVE_PLAY = 256,
    SDMI_TRIGGER = 65536,
    SDMI_NOMORECOPIES = 131072,
};
pub const WMT_RIGHT_PLAYBACK = WMT_RIGHTS.PLAYBACK;
pub const WMT_RIGHT_COPY_TO_NON_SDMI_DEVICE = WMT_RIGHTS.COPY_TO_NON_SDMI_DEVICE;
pub const WMT_RIGHT_COPY_TO_CD = WMT_RIGHTS.COPY_TO_CD;
pub const WMT_RIGHT_COPY_TO_SDMI_DEVICE = WMT_RIGHTS.COPY_TO_SDMI_DEVICE;
pub const WMT_RIGHT_ONE_TIME = WMT_RIGHTS.ONE_TIME;
pub const WMT_RIGHT_SAVE_STREAM_PROTECTED = WMT_RIGHTS.SAVE_STREAM_PROTECTED;
pub const WMT_RIGHT_COPY = WMT_RIGHTS.COPY;
pub const WMT_RIGHT_COLLABORATIVE_PLAY = WMT_RIGHTS.COLLABORATIVE_PLAY;
pub const WMT_RIGHT_SDMI_TRIGGER = WMT_RIGHTS.SDMI_TRIGGER;
pub const WMT_RIGHT_SDMI_NOMORECOPIES = WMT_RIGHTS.SDMI_NOMORECOPIES;

pub const WM_STREAM_PRIORITY_RECORD = extern struct {
    // WARNING: unable to add field alignment because it's causing a compiler bug
    wStreamNumber: u16,
    fMandatory: BOOL,
};

pub const WM_WRITER_STATISTICS = extern struct {
    qwSampleCount: u64,
    qwByteCount: u64,
    qwDroppedSampleCount: u64,
    qwDroppedByteCount: u64,
    dwCurrentBitrate: u32,
    dwAverageBitrate: u32,
    dwExpectedBitrate: u32,
    dwCurrentSampleRate: u32,
    dwAverageSampleRate: u32,
    dwExpectedSampleRate: u32,
};

pub const WM_WRITER_STATISTICS_EX = extern struct {
    dwBitratePlusOverhead: u32,
    dwCurrentSampleDropRateInQueue: u32,
    dwCurrentSampleDropRateInCodec: u32,
    dwCurrentSampleDropRateInMultiplexer: u32,
    dwTotalSampleDropsInQueue: u32,
    dwTotalSampleDropsInCodec: u32,
    dwTotalSampleDropsInMultiplexer: u32,
};

pub const WM_READER_STATISTICS = extern struct {
    cbSize: u32,
    dwBandwidth: u32,
    cPacketsReceived: u32,
    cPacketsRecovered: u32,
    cPacketsLost: u32,
    wQuality: u16,
};

pub const WM_READER_CLIENTINFO = extern struct {
    cbSize: u32,
    wszLang: ?PWSTR,
    wszBrowserUserAgent: ?PWSTR,
    wszBrowserWebPage: ?PWSTR,
    qwReserved: u64,
    pReserved: ?*LPARAM,
    wszHostExe: ?PWSTR,
    qwHostVersion: u64,
    wszPlayerUserAgent: ?PWSTR,
};

pub const WM_CLIENT_PROPERTIES = extern struct {
    dwIPAddress: u32,
    dwPort: u32,
};

pub const WM_CLIENT_PROPERTIES_EX = extern struct {
    cbSize: u32,
    pwszIPAddress: ?[*:0]const u16,
    pwszPort: ?[*:0]const u16,
    pwszDNSName: ?[*:0]const u16,
};

pub const WM_PORT_NUMBER_RANGE = extern struct {
    wPortBegin: u16,
    wPortEnd: u16,
};

pub const WMT_BUFFER_SEGMENT = extern struct {
    pBuffer: ?*INSSBuffer,
    cbOffset: u32,
    cbLength: u32,
};

pub const WMT_PAYLOAD_FRAGMENT = extern struct {
    dwPayloadIndex: u32,
    segmentData: WMT_BUFFER_SEGMENT,
};

pub const WMT_FILESINK_DATA_UNIT = extern struct {
    packetHeaderBuffer: WMT_BUFFER_SEGMENT,
    cPayloads: u32,
    pPayloadHeaderBuffers: ?*WMT_BUFFER_SEGMENT,
    cPayloadDataFragments: u32,
    pPayloadDataFragments: ?*WMT_PAYLOAD_FRAGMENT,
};

pub const WMT_WEBSTREAM_FORMAT = extern struct {
    cbSize: u16,
    cbSampleHeaderFixedData: u16,
    wVersion: u16,
    wReserved: u16,
};

pub const WMT_WEBSTREAM_SAMPLE_HEADER = extern struct {
    cbLength: u16,
    wPart: u16,
    cTotalParts: u16,
    wSampleType: u16,
    wszURL: [1]u16,
};

pub const WM_ADDRESS_ACCESSENTRY = extern struct {
    dwIPAddress: u32,
    dwMask: u32,
};

pub const WM_PICTURE = packed struct {
    pwszMIMEType: ?PWSTR,
    bPictureType: u8,
    pwszDescription: ?PWSTR,
    dwDataLen: u32,
    pbData: ?*u8,
};

pub const WM_SYNCHRONISED_LYRICS = packed struct {
    bTimeStampFormat: u8,
    bContentType: u8,
    pwszContentDescriptor: ?PWSTR,
    dwLyricsLen: u32,
    pbLyrics: ?*u8,
};

pub const WM_USER_WEB_URL = packed struct {
    pwszDescription: ?PWSTR,
    pwszURL: ?PWSTR,
};

pub const WM_USER_TEXT = packed struct {
    pwszDescription: ?PWSTR,
    pwszText: ?PWSTR,
};

pub const WM_LEAKY_BUCKET_PAIR = packed struct {
    dwBitrate: u32,
    msBufferWindow: u32,
};

pub const WM_STREAM_TYPE_INFO = packed struct {
    guidMajorType: Guid,
    cbFormat: u32,
};

pub const WMT_WATERMARK_ENTRY = extern struct {
    wmetType: WMT_WATERMARK_ENTRY_TYPE,
    clsid: Guid,
    cbDisplayName: u32,
    pwszDisplayName: ?PWSTR,
};

pub const WMT_VIDEOIMAGE_SAMPLE = extern struct {
    dwMagic: u32,
    cbStruct: u32,
    dwControlFlags: u32,
    dwInputFlagsCur: u32,
    lCurMotionXtoX: i32,
    lCurMotionYtoX: i32,
    lCurMotionXoffset: i32,
    lCurMotionXtoY: i32,
    lCurMotionYtoY: i32,
    lCurMotionYoffset: i32,
    lCurBlendCoef1: i32,
    lCurBlendCoef2: i32,
    dwInputFlagsPrev: u32,
    lPrevMotionXtoX: i32,
    lPrevMotionYtoX: i32,
    lPrevMotionXoffset: i32,
    lPrevMotionXtoY: i32,
    lPrevMotionYtoY: i32,
    lPrevMotionYoffset: i32,
    lPrevBlendCoef1: i32,
    lPrevBlendCoef2: i32,
};

pub const WMT_VIDEOIMAGE_SAMPLE2 = extern struct {
    dwMagic: u32,
    dwStructSize: u32,
    dwControlFlags: u32,
    dwViewportWidth: u32,
    dwViewportHeight: u32,
    dwCurrImageWidth: u32,
    dwCurrImageHeight: u32,
    fCurrRegionX0: f32,
    fCurrRegionY0: f32,
    fCurrRegionWidth: f32,
    fCurrRegionHeight: f32,
    fCurrBlendCoef: f32,
    dwPrevImageWidth: u32,
    dwPrevImageHeight: u32,
    fPrevRegionX0: f32,
    fPrevRegionY0: f32,
    fPrevRegionWidth: f32,
    fPrevRegionHeight: f32,
    fPrevBlendCoef: f32,
    dwEffectType: u32,
    dwNumEffectParas: u32,
    fEffectPara0: f32,
    fEffectPara1: f32,
    fEffectPara2: f32,
    fEffectPara3: f32,
    fEffectPara4: f32,
    bKeepPrevImage: BOOL,
};

pub const WM_MEDIA_TYPE = extern struct {
    majortype: Guid,
    subtype: Guid,
    bFixedSizeSamples: BOOL,
    bTemporalCompression: BOOL,
    lSampleSize: u32,
    formattype: Guid,
    pUnk: ?*IUnknown,
    cbFormat: u32,
    pbFormat: ?*u8,
};

pub const WMVIDEOINFOHEADER = extern struct {
    rcSource: RECT,
    rcTarget: RECT,
    dwBitRate: u32,
    dwBitErrorRate: u32,
    AvgTimePerFrame: i64,
    bmiHeader: BITMAPINFOHEADER,
};

pub const WMVIDEOINFOHEADER2 = extern struct {
    rcSource: RECT,
    rcTarget: RECT,
    dwBitRate: u32,
    dwBitErrorRate: u32,
    AvgTimePerFrame: i64,
    dwInterlaceFlags: u32,
    dwCopyProtectFlags: u32,
    dwPictAspectRatioX: u32,
    dwPictAspectRatioY: u32,
    dwReserved1: u32,
    dwReserved2: u32,
    bmiHeader: BITMAPINFOHEADER,
};

pub const WMMPEG2VIDEOINFO = extern struct {
    hdr: WMVIDEOINFOHEADER2,
    dwStartTimeCode: u32,
    cbSequenceHeader: u32,
    dwProfile: u32,
    dwLevel: u32,
    dwFlags: u32,
    dwSequenceHeader: [1]u32,
};

pub const WMSCRIPTFORMAT = extern struct {
    scriptType: Guid,
};

pub const WMT_COLORSPACEINFO_EXTENSION_DATA = extern struct {
    ucColorPrimaries: u8,
    ucColorTransferChar: u8,
    ucColorMatrixCoef: u8,
};

pub const WMT_TIMECODE_EXTENSION_DATA = extern struct {
    // WARNING: unable to add field alignment because it's causing a compiler bug
    wRange: u16,
    dwTimecode: u32,
    dwUserbits: u32,
    dwAmFlags: u32,
};

pub const DRM_VAL16 = extern struct {
    val: [16]u8,
};

const IID_IWMMediaProps_Value = @import("../zig.zig").Guid.initString("96406bce-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMMediaProps = &IID_IWMMediaProps_Value;
pub const IWMMediaProps = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetType: fn(
            self: *const IWMMediaProps,
            pguidType: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMediaType: fn(
            self: *const IWMMediaProps,
            pType: ?*WM_MEDIA_TYPE,
            pcbType: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMediaType: fn(
            self: *const IWMMediaProps,
            pType: ?*WM_MEDIA_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMMediaProps_GetType(self: *const T, pguidType: ?*Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMMediaProps.VTable, self.vtable).GetType(@ptrCast(*const IWMMediaProps, self), pguidType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMMediaProps_GetMediaType(self: *const T, pType: ?*WM_MEDIA_TYPE, pcbType: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMMediaProps.VTable, self.vtable).GetMediaType(@ptrCast(*const IWMMediaProps, self), pType, pcbType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMMediaProps_SetMediaType(self: *const T, pType: ?*WM_MEDIA_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMMediaProps.VTable, self.vtable).SetMediaType(@ptrCast(*const IWMMediaProps, self), pType);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMVideoMediaProps_Value = @import("../zig.zig").Guid.initString("96406bcf-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMVideoMediaProps = &IID_IWMVideoMediaProps_Value;
pub const IWMVideoMediaProps = extern struct {
    pub const VTable = extern struct {
        base: IWMMediaProps.VTable,
        GetMaxKeyFrameSpacing: fn(
            self: *const IWMVideoMediaProps,
            pllTime: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxKeyFrameSpacing: fn(
            self: *const IWMVideoMediaProps,
            llTime: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetQuality: fn(
            self: *const IWMVideoMediaProps,
            pdwQuality: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetQuality: fn(
            self: *const IWMVideoMediaProps,
            dwQuality: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMMediaProps.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMVideoMediaProps_GetMaxKeyFrameSpacing(self: *const T, pllTime: ?*i64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMVideoMediaProps.VTable, self.vtable).GetMaxKeyFrameSpacing(@ptrCast(*const IWMVideoMediaProps, self), pllTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMVideoMediaProps_SetMaxKeyFrameSpacing(self: *const T, llTime: i64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMVideoMediaProps.VTable, self.vtable).SetMaxKeyFrameSpacing(@ptrCast(*const IWMVideoMediaProps, self), llTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMVideoMediaProps_GetQuality(self: *const T, pdwQuality: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMVideoMediaProps.VTable, self.vtable).GetQuality(@ptrCast(*const IWMVideoMediaProps, self), pdwQuality);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMVideoMediaProps_SetQuality(self: *const T, dwQuality: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMVideoMediaProps.VTable, self.vtable).SetQuality(@ptrCast(*const IWMVideoMediaProps, self), dwQuality);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriter_Value = @import("../zig.zig").Guid.initString("96406bd4-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMWriter = &IID_IWMWriter_Value;
pub const IWMWriter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetProfileByID: fn(
            self: *const IWMWriter,
            guidProfile: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProfile: fn(
            self: *const IWMWriter,
            pProfile: ?*IWMProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputFilename: fn(
            self: *const IWMWriter,
            pwszFilename: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputCount: fn(
            self: *const IWMWriter,
            pcInputs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputProps: fn(
            self: *const IWMWriter,
            dwInputNum: u32,
            ppInput: ?*?*IWMInputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInputProps: fn(
            self: *const IWMWriter,
            dwInputNum: u32,
            pInput: ?*IWMInputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputFormatCount: fn(
            self: *const IWMWriter,
            dwInputNumber: u32,
            pcFormats: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputFormat: fn(
            self: *const IWMWriter,
            dwInputNumber: u32,
            dwFormatNumber: u32,
            pProps: ?*?*IWMInputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginWriting: fn(
            self: *const IWMWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndWriting: fn(
            self: *const IWMWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AllocateSample: fn(
            self: *const IWMWriter,
            dwSampleSize: u32,
            ppSample: ?*?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteSample: fn(
            self: *const IWMWriter,
            dwInputNum: u32,
            cnsSampleTime: u64,
            dwFlags: u32,
            pSample: ?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Flush: fn(
            self: *const IWMWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriter_SetProfileByID(self: *const T, guidProfile: ?*const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriter.VTable, self.vtable).SetProfileByID(@ptrCast(*const IWMWriter, self), guidProfile);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriter_SetProfile(self: *const T, pProfile: ?*IWMProfile) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriter.VTable, self.vtable).SetProfile(@ptrCast(*const IWMWriter, self), pProfile);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriter_SetOutputFilename(self: *const T, pwszFilename: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriter.VTable, self.vtable).SetOutputFilename(@ptrCast(*const IWMWriter, self), pwszFilename);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriter_GetInputCount(self: *const T, pcInputs: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriter.VTable, self.vtable).GetInputCount(@ptrCast(*const IWMWriter, self), pcInputs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriter_GetInputProps(self: *const T, dwInputNum: u32, ppInput: ?*?*IWMInputMediaProps) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriter.VTable, self.vtable).GetInputProps(@ptrCast(*const IWMWriter, self), dwInputNum, ppInput);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriter_SetInputProps(self: *const T, dwInputNum: u32, pInput: ?*IWMInputMediaProps) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriter.VTable, self.vtable).SetInputProps(@ptrCast(*const IWMWriter, self), dwInputNum, pInput);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriter_GetInputFormatCount(self: *const T, dwInputNumber: u32, pcFormats: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriter.VTable, self.vtable).GetInputFormatCount(@ptrCast(*const IWMWriter, self), dwInputNumber, pcFormats);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriter_GetInputFormat(self: *const T, dwInputNumber: u32, dwFormatNumber: u32, pProps: ?*?*IWMInputMediaProps) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriter.VTable, self.vtable).GetInputFormat(@ptrCast(*const IWMWriter, self), dwInputNumber, dwFormatNumber, pProps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriter_BeginWriting(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriter.VTable, self.vtable).BeginWriting(@ptrCast(*const IWMWriter, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriter_EndWriting(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriter.VTable, self.vtable).EndWriting(@ptrCast(*const IWMWriter, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriter_AllocateSample(self: *const T, dwSampleSize: u32, ppSample: ?*?*INSSBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriter.VTable, self.vtable).AllocateSample(@ptrCast(*const IWMWriter, self), dwSampleSize, ppSample);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriter_WriteSample(self: *const T, dwInputNum: u32, cnsSampleTime: u64, dwFlags: u32, pSample: ?*INSSBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriter.VTable, self.vtable).WriteSample(@ptrCast(*const IWMWriter, self), dwInputNum, cnsSampleTime, dwFlags, pSample);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriter_Flush(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriter.VTable, self.vtable).Flush(@ptrCast(*const IWMWriter, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWMDRMWriter_Value = @import("../zig.zig").Guid.initString("d6ea5dd0-12a0-43f4-90ab-a3fd451e6a07");
pub const IID_IWMDRMWriter = &IID_IWMDRMWriter_Value;
pub const IWMDRMWriter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GenerateKeySeed: fn(
            self: *const IWMDRMWriter,
            pwszKeySeed: [*:0]u16,
            pcwchLength: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateKeyID: fn(
            self: *const IWMDRMWriter,
            pwszKeyID: [*:0]u16,
            pcwchLength: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateSigningKeyPair: fn(
            self: *const IWMDRMWriter,
            pwszPrivKey: [*:0]u16,
            pcwchPrivKeyLength: ?*u32,
            pwszPubKey: [*:0]u16,
            pcwchPubKeyLength: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDRMAttribute: fn(
            self: *const IWMDRMWriter,
            wStreamNum: u16,
            pszName: ?[*:0]const u16,
            Type: WMT_ATTR_DATATYPE,
            pValue: [*:0]const u8,
            cbLength: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMWriter_GenerateKeySeed(self: *const T, pwszKeySeed: [*:0]u16, pcwchLength: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMWriter.VTable, self.vtable).GenerateKeySeed(@ptrCast(*const IWMDRMWriter, self), pwszKeySeed, pcwchLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMWriter_GenerateKeyID(self: *const T, pwszKeyID: [*:0]u16, pcwchLength: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMWriter.VTable, self.vtable).GenerateKeyID(@ptrCast(*const IWMDRMWriter, self), pwszKeyID, pcwchLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMWriter_GenerateSigningKeyPair(self: *const T, pwszPrivKey: [*:0]u16, pcwchPrivKeyLength: ?*u32, pwszPubKey: [*:0]u16, pcwchPubKeyLength: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMWriter.VTable, self.vtable).GenerateSigningKeyPair(@ptrCast(*const IWMDRMWriter, self), pwszPrivKey, pcwchPrivKeyLength, pwszPubKey, pcwchPubKeyLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMWriter_SetDRMAttribute(self: *const T, wStreamNum: u16, pszName: ?[*:0]const u16, Type: WMT_ATTR_DATATYPE, pValue: [*:0]const u8, cbLength: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMWriter.VTable, self.vtable).SetDRMAttribute(@ptrCast(*const IWMDRMWriter, self), wStreamNum, pszName, Type, pValue, cbLength);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const WMDRM_IMPORT_INIT_STRUCT = extern struct {
    dwVersion: u32,
    cbEncryptedSessionKeyMessage: u32,
    pbEncryptedSessionKeyMessage: ?*u8,
    cbEncryptedKeyMessage: u32,
    pbEncryptedKeyMessage: ?*u8,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWMDRMWriter2_Value = @import("../zig.zig").Guid.initString("38ee7a94-40e2-4e10-aa3f-33fd3210ed5b");
pub const IID_IWMDRMWriter2 = &IID_IWMDRMWriter2_Value;
pub const IWMDRMWriter2 = extern struct {
    pub const VTable = extern struct {
        base: IWMDRMWriter.VTable,
        SetWMDRMNetEncryption: fn(
            self: *const IWMDRMWriter2,
            fSamplesEncrypted: BOOL,
            pbKeyID: ?*u8,
            cbKeyID: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMDRMWriter.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMWriter2_SetWMDRMNetEncryption(self: *const T, fSamplesEncrypted: BOOL, pbKeyID: ?*u8, cbKeyID: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMWriter2.VTable, self.vtable).SetWMDRMNetEncryption(@ptrCast(*const IWMDRMWriter2, self), fSamplesEncrypted, pbKeyID, cbKeyID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWMDRMWriter3_Value = @import("../zig.zig").Guid.initString("a7184082-a4aa-4dde-ac9c-e75dbd1117ce");
pub const IID_IWMDRMWriter3 = &IID_IWMDRMWriter3_Value;
pub const IWMDRMWriter3 = extern struct {
    pub const VTable = extern struct {
        base: IWMDRMWriter2.VTable,
        SetProtectStreamSamples: fn(
            self: *const IWMDRMWriter3,
            pImportInitStruct: ?*WMDRM_IMPORT_INIT_STRUCT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMDRMWriter2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMWriter3_SetProtectStreamSamples(self: *const T, pImportInitStruct: ?*WMDRM_IMPORT_INIT_STRUCT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMWriter3.VTable, self.vtable).SetProtectStreamSamples(@ptrCast(*const IWMDRMWriter3, self), pImportInitStruct);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMInputMediaProps_Value = @import("../zig.zig").Guid.initString("96406bd5-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMInputMediaProps = &IID_IWMInputMediaProps_Value;
pub const IWMInputMediaProps = extern struct {
    pub const VTable = extern struct {
        base: IWMMediaProps.VTable,
        GetConnectionName: fn(
            self: *const IWMInputMediaProps,
            pwszName: [*:0]u16,
            pcchName: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroupName: fn(
            self: *const IWMInputMediaProps,
            pwszName: [*:0]u16,
            pcchName: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMMediaProps.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMInputMediaProps_GetConnectionName(self: *const T, pwszName: [*:0]u16, pcchName: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMInputMediaProps.VTable, self.vtable).GetConnectionName(@ptrCast(*const IWMInputMediaProps, self), pwszName, pcchName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMInputMediaProps_GetGroupName(self: *const T, pwszName: [*:0]u16, pcchName: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMInputMediaProps.VTable, self.vtable).GetGroupName(@ptrCast(*const IWMInputMediaProps, self), pwszName, pcchName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPropertyVault_Value = @import("../zig.zig").Guid.initString("72995a79-5090-42a4-9c8c-d9d0b6d34be5");
pub const IID_IWMPropertyVault = &IID_IWMPropertyVault_Value;
pub const IWMPropertyVault = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPropertyCount: fn(
            self: *const IWMPropertyVault,
            pdwCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyByName: fn(
            self: *const IWMPropertyVault,
            pszName: ?[*:0]const u16,
            pType: ?*WMT_ATTR_DATATYPE,
            pValue: [*:0]u8,
            pdwSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IWMPropertyVault,
            pszName: ?[*:0]const u16,
            pType: WMT_ATTR_DATATYPE,
            pValue: ?*u8,
            dwSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyByIndex: fn(
            self: *const IWMPropertyVault,
            dwIndex: u32,
            pszName: [*:0]u16,
            pdwNameLen: ?*u32,
            pType: ?*WMT_ATTR_DATATYPE,
            pValue: [*:0]u8,
            pdwSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyPropertiesFrom: fn(
            self: *const IWMPropertyVault,
            pIWMPropertyVault: ?*IWMPropertyVault,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IWMPropertyVault,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMPropertyVault_GetPropertyCount(self: *const T, pdwCount: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMPropertyVault.VTable, self.vtable).GetPropertyCount(@ptrCast(*const IWMPropertyVault, self), pdwCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMPropertyVault_GetPropertyByName(self: *const T, pszName: ?[*:0]const u16, pType: ?*WMT_ATTR_DATATYPE, pValue: [*:0]u8, pdwSize: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMPropertyVault.VTable, self.vtable).GetPropertyByName(@ptrCast(*const IWMPropertyVault, self), pszName, pType, pValue, pdwSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMPropertyVault_SetProperty(self: *const T, pszName: ?[*:0]const u16, pType: WMT_ATTR_DATATYPE, pValue: ?*u8, dwSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMPropertyVault.VTable, self.vtable).SetProperty(@ptrCast(*const IWMPropertyVault, self), pszName, pType, pValue, dwSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMPropertyVault_GetPropertyByIndex(self: *const T, dwIndex: u32, pszName: [*:0]u16, pdwNameLen: ?*u32, pType: ?*WMT_ATTR_DATATYPE, pValue: [*:0]u8, pdwSize: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMPropertyVault.VTable, self.vtable).GetPropertyByIndex(@ptrCast(*const IWMPropertyVault, self), dwIndex, pszName, pdwNameLen, pType, pValue, pdwSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMPropertyVault_CopyPropertiesFrom(self: *const T, pIWMPropertyVault: ?*IWMPropertyVault) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMPropertyVault.VTable, self.vtable).CopyPropertiesFrom(@ptrCast(*const IWMPropertyVault, self), pIWMPropertyVault);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMPropertyVault_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMPropertyVault.VTable, self.vtable).Clear(@ptrCast(*const IWMPropertyVault, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMIStreamProps_Value = @import("../zig.zig").Guid.initString("6816dad3-2b4b-4c8e-8149-874c3483a753");
pub const IID_IWMIStreamProps = &IID_IWMIStreamProps_Value;
pub const IWMIStreamProps = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetProperty: fn(
            self: *const IWMIStreamProps,
            pszName: ?[*:0]const u16,
            pType: ?*WMT_ATTR_DATATYPE,
            pValue: [*:0]u8,
            pdwSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMIStreamProps_GetProperty(self: *const T, pszName: ?[*:0]const u16, pType: ?*WMT_ATTR_DATATYPE, pValue: [*:0]u8, pdwSize: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMIStreamProps.VTable, self.vtable).GetProperty(@ptrCast(*const IWMIStreamProps, self), pszName, pType, pValue, pdwSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReader_Value = @import("../zig.zig").Guid.initString("96406bd6-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMReader = &IID_IWMReader_Value;
pub const IWMReader = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: fn(
            self: *const IWMReader,
            pwszURL: ?[*:0]const u16,
            pCallback: ?*IWMReaderCallback,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IWMReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputCount: fn(
            self: *const IWMReader,
            pcOutputs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputProps: fn(
            self: *const IWMReader,
            dwOutputNum: u32,
            ppOutput: ?*?*IWMOutputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputProps: fn(
            self: *const IWMReader,
            dwOutputNum: u32,
            pOutput: ?*IWMOutputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputFormatCount: fn(
            self: *const IWMReader,
            dwOutputNumber: u32,
            pcFormats: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputFormat: fn(
            self: *const IWMReader,
            dwOutputNumber: u32,
            dwFormatNumber: u32,
            ppProps: ?*?*IWMOutputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Start: fn(
            self: *const IWMReader,
            cnsStart: u64,
            cnsDuration: u64,
            fRate: f32,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: fn(
            self: *const IWMReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: fn(
            self: *const IWMReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: fn(
            self: *const IWMReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReader_Open(self: *const T, pwszURL: ?[*:0]const u16, pCallback: ?*IWMReaderCallback, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReader.VTable, self.vtable).Open(@ptrCast(*const IWMReader, self), pwszURL, pCallback, pvContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReader_Close(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReader.VTable, self.vtable).Close(@ptrCast(*const IWMReader, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReader_GetOutputCount(self: *const T, pcOutputs: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReader.VTable, self.vtable).GetOutputCount(@ptrCast(*const IWMReader, self), pcOutputs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReader_GetOutputProps(self: *const T, dwOutputNum: u32, ppOutput: ?*?*IWMOutputMediaProps) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReader.VTable, self.vtable).GetOutputProps(@ptrCast(*const IWMReader, self), dwOutputNum, ppOutput);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReader_SetOutputProps(self: *const T, dwOutputNum: u32, pOutput: ?*IWMOutputMediaProps) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReader.VTable, self.vtable).SetOutputProps(@ptrCast(*const IWMReader, self), dwOutputNum, pOutput);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReader_GetOutputFormatCount(self: *const T, dwOutputNumber: u32, pcFormats: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReader.VTable, self.vtable).GetOutputFormatCount(@ptrCast(*const IWMReader, self), dwOutputNumber, pcFormats);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReader_GetOutputFormat(self: *const T, dwOutputNumber: u32, dwFormatNumber: u32, ppProps: ?*?*IWMOutputMediaProps) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReader.VTable, self.vtable).GetOutputFormat(@ptrCast(*const IWMReader, self), dwOutputNumber, dwFormatNumber, ppProps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReader_Start(self: *const T, cnsStart: u64, cnsDuration: u64, fRate: f32, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReader.VTable, self.vtable).Start(@ptrCast(*const IWMReader, self), cnsStart, cnsDuration, fRate, pvContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReader_Stop(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReader.VTable, self.vtable).Stop(@ptrCast(*const IWMReader, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReader_Pause(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReader.VTable, self.vtable).Pause(@ptrCast(*const IWMReader, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReader_Resume(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReader.VTable, self.vtable).Resume(@ptrCast(*const IWMReader, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMSyncReader_Value = @import("../zig.zig").Guid.initString("9397f121-7705-4dc9-b049-98b698188414");
pub const IID_IWMSyncReader = &IID_IWMSyncReader_Value;
pub const IWMSyncReader = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: fn(
            self: *const IWMSyncReader,
            pwszFilename: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IWMSyncReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRange: fn(
            self: *const IWMSyncReader,
            cnsStartTime: u64,
            cnsDuration: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRangeByFrame: fn(
            self: *const IWMSyncReader,
            wStreamNum: u16,
            qwFrameNumber: u64,
            cFramesToRead: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextSample: fn(
            self: *const IWMSyncReader,
            wStreamNum: u16,
            ppSample: ?*?*INSSBuffer,
            pcnsSampleTime: ?*u64,
            pcnsDuration: ?*u64,
            pdwFlags: ?*u32,
            pdwOutputNum: ?*u32,
            pwStreamNum: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStreamsSelected: fn(
            self: *const IWMSyncReader,
            cStreamCount: u16,
            pwStreamNumbers: ?*u16,
            pSelections: ?*WMT_STREAM_SELECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamSelected: fn(
            self: *const IWMSyncReader,
            wStreamNum: u16,
            pSelection: ?*WMT_STREAM_SELECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReadStreamSamples: fn(
            self: *const IWMSyncReader,
            wStreamNum: u16,
            fCompressed: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReadStreamSamples: fn(
            self: *const IWMSyncReader,
            wStreamNum: u16,
            pfCompressed: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputSetting: fn(
            self: *const IWMSyncReader,
            dwOutputNum: u32,
            pszName: ?[*:0]const u16,
            pType: ?*WMT_ATTR_DATATYPE,
            pValue: [*:0]u8,
            pcbLength: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputSetting: fn(
            self: *const IWMSyncReader,
            dwOutputNum: u32,
            pszName: ?[*:0]const u16,
            Type: WMT_ATTR_DATATYPE,
            pValue: [*:0]const u8,
            cbLength: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputCount: fn(
            self: *const IWMSyncReader,
            pcOutputs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputProps: fn(
            self: *const IWMSyncReader,
            dwOutputNum: u32,
            ppOutput: ?*?*IWMOutputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputProps: fn(
            self: *const IWMSyncReader,
            dwOutputNum: u32,
            pOutput: ?*IWMOutputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputFormatCount: fn(
            self: *const IWMSyncReader,
            dwOutputNum: u32,
            pcFormats: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputFormat: fn(
            self: *const IWMSyncReader,
            dwOutputNum: u32,
            dwFormatNum: u32,
            ppProps: ?*?*IWMOutputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputNumberForStream: fn(
            self: *const IWMSyncReader,
            wStreamNum: u16,
            pdwOutputNum: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamNumberForOutput: fn(
            self: *const IWMSyncReader,
            dwOutputNum: u32,
            pwStreamNum: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxOutputSampleSize: fn(
            self: *const IWMSyncReader,
            dwOutput: u32,
            pcbMax: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxStreamSampleSize: fn(
            self: *const IWMSyncReader,
            wStream: u16,
            pcbMax: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenStream: fn(
            self: *const IWMSyncReader,
            pStream: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_Open(self: *const T, pwszFilename: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).Open(@ptrCast(*const IWMSyncReader, self), pwszFilename);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_Close(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).Close(@ptrCast(*const IWMSyncReader, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_SetRange(self: *const T, cnsStartTime: u64, cnsDuration: i64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).SetRange(@ptrCast(*const IWMSyncReader, self), cnsStartTime, cnsDuration);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_SetRangeByFrame(self: *const T, wStreamNum: u16, qwFrameNumber: u64, cFramesToRead: i64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).SetRangeByFrame(@ptrCast(*const IWMSyncReader, self), wStreamNum, qwFrameNumber, cFramesToRead);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_GetNextSample(self: *const T, wStreamNum: u16, ppSample: ?*?*INSSBuffer, pcnsSampleTime: ?*u64, pcnsDuration: ?*u64, pdwFlags: ?*u32, pdwOutputNum: ?*u32, pwStreamNum: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).GetNextSample(@ptrCast(*const IWMSyncReader, self), wStreamNum, ppSample, pcnsSampleTime, pcnsDuration, pdwFlags, pdwOutputNum, pwStreamNum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_SetStreamsSelected(self: *const T, cStreamCount: u16, pwStreamNumbers: ?*u16, pSelections: ?*WMT_STREAM_SELECTION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).SetStreamsSelected(@ptrCast(*const IWMSyncReader, self), cStreamCount, pwStreamNumbers, pSelections);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_GetStreamSelected(self: *const T, wStreamNum: u16, pSelection: ?*WMT_STREAM_SELECTION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).GetStreamSelected(@ptrCast(*const IWMSyncReader, self), wStreamNum, pSelection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_SetReadStreamSamples(self: *const T, wStreamNum: u16, fCompressed: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).SetReadStreamSamples(@ptrCast(*const IWMSyncReader, self), wStreamNum, fCompressed);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_GetReadStreamSamples(self: *const T, wStreamNum: u16, pfCompressed: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).GetReadStreamSamples(@ptrCast(*const IWMSyncReader, self), wStreamNum, pfCompressed);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_GetOutputSetting(self: *const T, dwOutputNum: u32, pszName: ?[*:0]const u16, pType: ?*WMT_ATTR_DATATYPE, pValue: [*:0]u8, pcbLength: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).GetOutputSetting(@ptrCast(*const IWMSyncReader, self), dwOutputNum, pszName, pType, pValue, pcbLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_SetOutputSetting(self: *const T, dwOutputNum: u32, pszName: ?[*:0]const u16, Type: WMT_ATTR_DATATYPE, pValue: [*:0]const u8, cbLength: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).SetOutputSetting(@ptrCast(*const IWMSyncReader, self), dwOutputNum, pszName, Type, pValue, cbLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_GetOutputCount(self: *const T, pcOutputs: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).GetOutputCount(@ptrCast(*const IWMSyncReader, self), pcOutputs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_GetOutputProps(self: *const T, dwOutputNum: u32, ppOutput: ?*?*IWMOutputMediaProps) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).GetOutputProps(@ptrCast(*const IWMSyncReader, self), dwOutputNum, ppOutput);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_SetOutputProps(self: *const T, dwOutputNum: u32, pOutput: ?*IWMOutputMediaProps) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).SetOutputProps(@ptrCast(*const IWMSyncReader, self), dwOutputNum, pOutput);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_GetOutputFormatCount(self: *const T, dwOutputNum: u32, pcFormats: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).GetOutputFormatCount(@ptrCast(*const IWMSyncReader, self), dwOutputNum, pcFormats);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_GetOutputFormat(self: *const T, dwOutputNum: u32, dwFormatNum: u32, ppProps: ?*?*IWMOutputMediaProps) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).GetOutputFormat(@ptrCast(*const IWMSyncReader, self), dwOutputNum, dwFormatNum, ppProps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_GetOutputNumberForStream(self: *const T, wStreamNum: u16, pdwOutputNum: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).GetOutputNumberForStream(@ptrCast(*const IWMSyncReader, self), wStreamNum, pdwOutputNum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_GetStreamNumberForOutput(self: *const T, dwOutputNum: u32, pwStreamNum: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).GetStreamNumberForOutput(@ptrCast(*const IWMSyncReader, self), dwOutputNum, pwStreamNum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_GetMaxOutputSampleSize(self: *const T, dwOutput: u32, pcbMax: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).GetMaxOutputSampleSize(@ptrCast(*const IWMSyncReader, self), dwOutput, pcbMax);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_GetMaxStreamSampleSize(self: *const T, wStream: u16, pcbMax: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).GetMaxStreamSampleSize(@ptrCast(*const IWMSyncReader, self), wStream, pcbMax);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader_OpenStream(self: *const T, pStream: ?*IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader.VTable, self.vtable).OpenStream(@ptrCast(*const IWMSyncReader, self), pStream);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMSyncReader2_Value = @import("../zig.zig").Guid.initString("faed3d21-1b6b-4af7-8cb6-3e189bbc187b");
pub const IID_IWMSyncReader2 = &IID_IWMSyncReader2_Value;
pub const IWMSyncReader2 = extern struct {
    pub const VTable = extern struct {
        base: IWMSyncReader.VTable,
        SetRangeByTimecode: fn(
            self: *const IWMSyncReader2,
            wStreamNum: u16,
            pStart: ?*WMT_TIMECODE_EXTENSION_DATA,
            pEnd: ?*WMT_TIMECODE_EXTENSION_DATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRangeByFrameEx: fn(
            self: *const IWMSyncReader2,
            wStreamNum: u16,
            qwFrameNumber: u64,
            cFramesToRead: i64,
            pcnsStartTime: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllocateForOutput: fn(
            self: *const IWMSyncReader2,
            dwOutputNum: u32,
            pAllocator: ?*IWMReaderAllocatorEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllocateForOutput: fn(
            self: *const IWMSyncReader2,
            dwOutputNum: u32,
            ppAllocator: ?*?*IWMReaderAllocatorEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllocateForStream: fn(
            self: *const IWMSyncReader2,
            wStreamNum: u16,
            pAllocator: ?*IWMReaderAllocatorEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllocateForStream: fn(
            self: *const IWMSyncReader2,
            dwSreamNum: u16,
            ppAllocator: ?*?*IWMReaderAllocatorEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMSyncReader.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader2_SetRangeByTimecode(self: *const T, wStreamNum: u16, pStart: ?*WMT_TIMECODE_EXTENSION_DATA, pEnd: ?*WMT_TIMECODE_EXTENSION_DATA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader2.VTable, self.vtable).SetRangeByTimecode(@ptrCast(*const IWMSyncReader2, self), wStreamNum, pStart, pEnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader2_SetRangeByFrameEx(self: *const T, wStreamNum: u16, qwFrameNumber: u64, cFramesToRead: i64, pcnsStartTime: ?*u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader2.VTable, self.vtable).SetRangeByFrameEx(@ptrCast(*const IWMSyncReader2, self), wStreamNum, qwFrameNumber, cFramesToRead, pcnsStartTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader2_SetAllocateForOutput(self: *const T, dwOutputNum: u32, pAllocator: ?*IWMReaderAllocatorEx) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader2.VTable, self.vtable).SetAllocateForOutput(@ptrCast(*const IWMSyncReader2, self), dwOutputNum, pAllocator);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader2_GetAllocateForOutput(self: *const T, dwOutputNum: u32, ppAllocator: ?*?*IWMReaderAllocatorEx) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader2.VTable, self.vtable).GetAllocateForOutput(@ptrCast(*const IWMSyncReader2, self), dwOutputNum, ppAllocator);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader2_SetAllocateForStream(self: *const T, wStreamNum: u16, pAllocator: ?*IWMReaderAllocatorEx) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader2.VTable, self.vtable).SetAllocateForStream(@ptrCast(*const IWMSyncReader2, self), wStreamNum, pAllocator);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSyncReader2_GetAllocateForStream(self: *const T, dwSreamNum: u16, ppAllocator: ?*?*IWMReaderAllocatorEx) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSyncReader2.VTable, self.vtable).GetAllocateForStream(@ptrCast(*const IWMSyncReader2, self), dwSreamNum, ppAllocator);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMOutputMediaProps_Value = @import("../zig.zig").Guid.initString("96406bd7-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMOutputMediaProps = &IID_IWMOutputMediaProps_Value;
pub const IWMOutputMediaProps = extern struct {
    pub const VTable = extern struct {
        base: IWMMediaProps.VTable,
        GetStreamGroupName: fn(
            self: *const IWMOutputMediaProps,
            pwszName: [*:0]u16,
            pcchName: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnectionName: fn(
            self: *const IWMOutputMediaProps,
            pwszName: [*:0]u16,
            pcchName: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMMediaProps.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMOutputMediaProps_GetStreamGroupName(self: *const T, pwszName: [*:0]u16, pcchName: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMOutputMediaProps.VTable, self.vtable).GetStreamGroupName(@ptrCast(*const IWMOutputMediaProps, self), pwszName, pcchName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMOutputMediaProps_GetConnectionName(self: *const T, pwszName: [*:0]u16, pcchName: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMOutputMediaProps.VTable, self.vtable).GetConnectionName(@ptrCast(*const IWMOutputMediaProps, self), pwszName, pcchName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMStatusCallback_Value = @import("../zig.zig").Guid.initString("6d7cdc70-9888-11d3-8edc-00c04f6109cf");
pub const IID_IWMStatusCallback = &IID_IWMStatusCallback_Value;
pub const IWMStatusCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnStatus: fn(
            self: *const IWMStatusCallback,
            Status: WMT_STATUS,
            hr: HRESULT,
            dwType: WMT_ATTR_DATATYPE,
            pValue: ?*u8,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStatusCallback_OnStatus(self: *const T, Status: WMT_STATUS, hr: HRESULT, dwType: WMT_ATTR_DATATYPE, pValue: ?*u8, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStatusCallback.VTable, self.vtable).OnStatus(@ptrCast(*const IWMStatusCallback, self), Status, hr, dwType, pValue, pvContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderCallback_Value = @import("../zig.zig").Guid.initString("96406bd8-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMReaderCallback = &IID_IWMReaderCallback_Value;
pub const IWMReaderCallback = extern struct {
    pub const VTable = extern struct {
        base: IWMStatusCallback.VTable,
        OnSample: fn(
            self: *const IWMReaderCallback,
            dwOutputNum: u32,
            cnsSampleTime: u64,
            cnsSampleDuration: u64,
            dwFlags: u32,
            pSample: ?*INSSBuffer,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMStatusCallback.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderCallback_OnSample(self: *const T, dwOutputNum: u32, cnsSampleTime: u64, cnsSampleDuration: u64, dwFlags: u32, pSample: ?*INSSBuffer, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderCallback.VTable, self.vtable).OnSample(@ptrCast(*const IWMReaderCallback, self), dwOutputNum, cnsSampleTime, cnsSampleDuration, dwFlags, pSample, pvContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMCredentialCallback_Value = @import("../zig.zig").Guid.initString("342e0eb7-e651-450c-975b-2ace2c90c48e");
pub const IID_IWMCredentialCallback = &IID_IWMCredentialCallback_Value;
pub const IWMCredentialCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AcquireCredentials: fn(
            self: *const IWMCredentialCallback,
            pwszRealm: ?PWSTR,
            pwszSite: ?PWSTR,
            pwszUser: [*:0]u16,
            cchUser: u32,
            pwszPassword: [*:0]u16,
            cchPassword: u32,
            hrStatus: HRESULT,
            pdwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMCredentialCallback_AcquireCredentials(self: *const T, pwszRealm: ?PWSTR, pwszSite: ?PWSTR, pwszUser: [*:0]u16, cchUser: u32, pwszPassword: [*:0]u16, cchPassword: u32, hrStatus: HRESULT, pdwFlags: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMCredentialCallback.VTable, self.vtable).AcquireCredentials(@ptrCast(*const IWMCredentialCallback, self), pwszRealm, pwszSite, pwszUser, cchUser, pwszPassword, cchPassword, hrStatus, pdwFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMMetadataEditor_Value = @import("../zig.zig").Guid.initString("96406bd9-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMMetadataEditor = &IID_IWMMetadataEditor_Value;
pub const IWMMetadataEditor = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: fn(
            self: *const IWMMetadataEditor,
            pwszFilename: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IWMMetadataEditor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Flush: fn(
            self: *const IWMMetadataEditor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMMetadataEditor_Open(self: *const T, pwszFilename: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMMetadataEditor.VTable, self.vtable).Open(@ptrCast(*const IWMMetadataEditor, self), pwszFilename);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMMetadataEditor_Close(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMMetadataEditor.VTable, self.vtable).Close(@ptrCast(*const IWMMetadataEditor, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMMetadataEditor_Flush(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMMetadataEditor.VTable, self.vtable).Flush(@ptrCast(*const IWMMetadataEditor, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMMetadataEditor2_Value = @import("../zig.zig").Guid.initString("203cffe3-2e18-4fdf-b59d-6e71530534cf");
pub const IID_IWMMetadataEditor2 = &IID_IWMMetadataEditor2_Value;
pub const IWMMetadataEditor2 = extern struct {
    pub const VTable = extern struct {
        base: IWMMetadataEditor.VTable,
        OpenEx: fn(
            self: *const IWMMetadataEditor2,
            pwszFilename: ?[*:0]const u16,
            dwDesiredAccess: u32,
            dwShareMode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMMetadataEditor.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMMetadataEditor2_OpenEx(self: *const T, pwszFilename: ?[*:0]const u16, dwDesiredAccess: u32, dwShareMode: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMMetadataEditor2.VTable, self.vtable).OpenEx(@ptrCast(*const IWMMetadataEditor2, self), pwszFilename, dwDesiredAccess, dwShareMode);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWMDRMEditor_Value = @import("../zig.zig").Guid.initString("ff130ebc-a6c3-42a6-b401-c3382c3e08b3");
pub const IID_IWMDRMEditor = &IID_IWMDRMEditor_Value;
pub const IWMDRMEditor = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDRMProperty: fn(
            self: *const IWMDRMEditor,
            pwstrName: ?[*:0]const u16,
            pdwType: ?*WMT_ATTR_DATATYPE,
            pValue: [*:0]u8,
            pcbLength: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMEditor_GetDRMProperty(self: *const T, pwstrName: ?[*:0]const u16, pdwType: ?*WMT_ATTR_DATATYPE, pValue: [*:0]u8, pcbLength: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMEditor.VTable, self.vtable).GetDRMProperty(@ptrCast(*const IWMDRMEditor, self), pwstrName, pdwType, pValue, pcbLength);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMHeaderInfo_Value = @import("../zig.zig").Guid.initString("96406bda-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMHeaderInfo = &IID_IWMHeaderInfo_Value;
pub const IWMHeaderInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAttributeCount: fn(
            self: *const IWMHeaderInfo,
            wStreamNum: u16,
            pcAttributes: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeByIndex: fn(
            self: *const IWMHeaderInfo,
            wIndex: u16,
            pwStreamNum: ?*u16,
            pwszName: [*:0]u16,
            pcchNameLen: ?*u16,
            pType: ?*WMT_ATTR_DATATYPE,
            pValue: [*:0]u8,
            pcbLength: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeByName: fn(
            self: *const IWMHeaderInfo,
            pwStreamNum: ?*u16,
            pszName: ?[*:0]const u16,
            pType: ?*WMT_ATTR_DATATYPE,
            pValue: [*:0]u8,
            pcbLength: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAttribute: fn(
            self: *const IWMHeaderInfo,
            wStreamNum: u16,
            pszName: ?[*:0]const u16,
            Type: WMT_ATTR_DATATYPE,
            pValue: [*:0]const u8,
            cbLength: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMarkerCount: fn(
            self: *const IWMHeaderInfo,
            pcMarkers: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMarker: fn(
            self: *const IWMHeaderInfo,
            wIndex: u16,
            pwszMarkerName: [*:0]u16,
            pcchMarkerNameLen: ?*u16,
            pcnsMarkerTime: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMarker: fn(
            self: *const IWMHeaderInfo,
            pwszMarkerName: ?PWSTR,
            cnsMarkerTime: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveMarker: fn(
            self: *const IWMHeaderInfo,
            wIndex: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScriptCount: fn(
            self: *const IWMHeaderInfo,
            pcScripts: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScript: fn(
            self: *const IWMHeaderInfo,
            wIndex: u16,
            pwszType: [*:0]u16,
            pcchTypeLen: ?*u16,
            pwszCommand: [*:0]u16,
            pcchCommandLen: ?*u16,
            pcnsScriptTime: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddScript: fn(
            self: *const IWMHeaderInfo,
            pwszType: ?PWSTR,
            pwszCommand: ?PWSTR,
            cnsScriptTime: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveScript: fn(
            self: *const IWMHeaderInfo,
            wIndex: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo_GetAttributeCount(self: *const T, wStreamNum: u16, pcAttributes: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo.VTable, self.vtable).GetAttributeCount(@ptrCast(*const IWMHeaderInfo, self), wStreamNum, pcAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo_GetAttributeByIndex(self: *const T, wIndex: u16, pwStreamNum: ?*u16, pwszName: [*:0]u16, pcchNameLen: ?*u16, pType: ?*WMT_ATTR_DATATYPE, pValue: [*:0]u8, pcbLength: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo.VTable, self.vtable).GetAttributeByIndex(@ptrCast(*const IWMHeaderInfo, self), wIndex, pwStreamNum, pwszName, pcchNameLen, pType, pValue, pcbLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo_GetAttributeByName(self: *const T, pwStreamNum: ?*u16, pszName: ?[*:0]const u16, pType: ?*WMT_ATTR_DATATYPE, pValue: [*:0]u8, pcbLength: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo.VTable, self.vtable).GetAttributeByName(@ptrCast(*const IWMHeaderInfo, self), pwStreamNum, pszName, pType, pValue, pcbLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo_SetAttribute(self: *const T, wStreamNum: u16, pszName: ?[*:0]const u16, Type: WMT_ATTR_DATATYPE, pValue: [*:0]const u8, cbLength: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo.VTable, self.vtable).SetAttribute(@ptrCast(*const IWMHeaderInfo, self), wStreamNum, pszName, Type, pValue, cbLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo_GetMarkerCount(self: *const T, pcMarkers: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo.VTable, self.vtable).GetMarkerCount(@ptrCast(*const IWMHeaderInfo, self), pcMarkers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo_GetMarker(self: *const T, wIndex: u16, pwszMarkerName: [*:0]u16, pcchMarkerNameLen: ?*u16, pcnsMarkerTime: ?*u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo.VTable, self.vtable).GetMarker(@ptrCast(*const IWMHeaderInfo, self), wIndex, pwszMarkerName, pcchMarkerNameLen, pcnsMarkerTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo_AddMarker(self: *const T, pwszMarkerName: ?PWSTR, cnsMarkerTime: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo.VTable, self.vtable).AddMarker(@ptrCast(*const IWMHeaderInfo, self), pwszMarkerName, cnsMarkerTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo_RemoveMarker(self: *const T, wIndex: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo.VTable, self.vtable).RemoveMarker(@ptrCast(*const IWMHeaderInfo, self), wIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo_GetScriptCount(self: *const T, pcScripts: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo.VTable, self.vtable).GetScriptCount(@ptrCast(*const IWMHeaderInfo, self), pcScripts);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo_GetScript(self: *const T, wIndex: u16, pwszType: [*:0]u16, pcchTypeLen: ?*u16, pwszCommand: [*:0]u16, pcchCommandLen: ?*u16, pcnsScriptTime: ?*u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo.VTable, self.vtable).GetScript(@ptrCast(*const IWMHeaderInfo, self), wIndex, pwszType, pcchTypeLen, pwszCommand, pcchCommandLen, pcnsScriptTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo_AddScript(self: *const T, pwszType: ?PWSTR, pwszCommand: ?PWSTR, cnsScriptTime: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo.VTable, self.vtable).AddScript(@ptrCast(*const IWMHeaderInfo, self), pwszType, pwszCommand, cnsScriptTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo_RemoveScript(self: *const T, wIndex: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo.VTable, self.vtable).RemoveScript(@ptrCast(*const IWMHeaderInfo, self), wIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMHeaderInfo2_Value = @import("../zig.zig").Guid.initString("15cf9781-454e-482e-b393-85fae487a810");
pub const IID_IWMHeaderInfo2 = &IID_IWMHeaderInfo2_Value;
pub const IWMHeaderInfo2 = extern struct {
    pub const VTable = extern struct {
        base: IWMHeaderInfo.VTable,
        GetCodecInfoCount: fn(
            self: *const IWMHeaderInfo2,
            pcCodecInfos: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCodecInfo: fn(
            self: *const IWMHeaderInfo2,
            wIndex: u32,
            pcchName: ?*u16,
            pwszName: [*:0]u16,
            pcchDescription: ?*u16,
            pwszDescription: [*:0]u16,
            pCodecType: ?*WMT_CODEC_INFO_TYPE,
            pcbCodecInfo: ?*u16,
            pbCodecInfo: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMHeaderInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo2_GetCodecInfoCount(self: *const T, pcCodecInfos: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo2.VTable, self.vtable).GetCodecInfoCount(@ptrCast(*const IWMHeaderInfo2, self), pcCodecInfos);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo2_GetCodecInfo(self: *const T, wIndex: u32, pcchName: ?*u16, pwszName: [*:0]u16, pcchDescription: ?*u16, pwszDescription: [*:0]u16, pCodecType: ?*WMT_CODEC_INFO_TYPE, pcbCodecInfo: ?*u16, pbCodecInfo: [*:0]u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo2.VTable, self.vtable).GetCodecInfo(@ptrCast(*const IWMHeaderInfo2, self), wIndex, pcchName, pwszName, pcchDescription, pwszDescription, pCodecType, pcbCodecInfo, pbCodecInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMHeaderInfo3_Value = @import("../zig.zig").Guid.initString("15cc68e3-27cc-4ecd-b222-3f5d02d80bd5");
pub const IID_IWMHeaderInfo3 = &IID_IWMHeaderInfo3_Value;
pub const IWMHeaderInfo3 = extern struct {
    pub const VTable = extern struct {
        base: IWMHeaderInfo2.VTable,
        GetAttributeCountEx: fn(
            self: *const IWMHeaderInfo3,
            wStreamNum: u16,
            pcAttributes: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeIndices: fn(
            self: *const IWMHeaderInfo3,
            wStreamNum: u16,
            pwszName: ?[*:0]const u16,
            pwLangIndex: ?*u16,
            pwIndices: [*:0]u16,
            pwCount: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeByIndexEx: fn(
            self: *const IWMHeaderInfo3,
            wStreamNum: u16,
            wIndex: u16,
            pwszName: [*:0]u16,
            pwNameLen: ?*u16,
            pType: ?*WMT_ATTR_DATATYPE,
            pwLangIndex: ?*u16,
            pValue: [*:0]u8,
            pdwDataLength: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ModifyAttribute: fn(
            self: *const IWMHeaderInfo3,
            wStreamNum: u16,
            wIndex: u16,
            Type: WMT_ATTR_DATATYPE,
            wLangIndex: u16,
            pValue: [*:0]const u8,
            dwLength: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAttribute: fn(
            self: *const IWMHeaderInfo3,
            wStreamNum: u16,
            pszName: ?[*:0]const u16,
            pwIndex: ?*u16,
            Type: WMT_ATTR_DATATYPE,
            wLangIndex: u16,
            pValue: [*:0]const u8,
            dwLength: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAttribute: fn(
            self: *const IWMHeaderInfo3,
            wStreamNum: u16,
            wIndex: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCodecInfo: fn(
            self: *const IWMHeaderInfo3,
            pwszName: ?PWSTR,
            pwszDescription: ?PWSTR,
            codecType: WMT_CODEC_INFO_TYPE,
            cbCodecInfo: u16,
            pbCodecInfo: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMHeaderInfo2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo3_GetAttributeCountEx(self: *const T, wStreamNum: u16, pcAttributes: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo3.VTable, self.vtable).GetAttributeCountEx(@ptrCast(*const IWMHeaderInfo3, self), wStreamNum, pcAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo3_GetAttributeIndices(self: *const T, wStreamNum: u16, pwszName: ?[*:0]const u16, pwLangIndex: ?*u16, pwIndices: [*:0]u16, pwCount: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo3.VTable, self.vtable).GetAttributeIndices(@ptrCast(*const IWMHeaderInfo3, self), wStreamNum, pwszName, pwLangIndex, pwIndices, pwCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo3_GetAttributeByIndexEx(self: *const T, wStreamNum: u16, wIndex: u16, pwszName: [*:0]u16, pwNameLen: ?*u16, pType: ?*WMT_ATTR_DATATYPE, pwLangIndex: ?*u16, pValue: [*:0]u8, pdwDataLength: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo3.VTable, self.vtable).GetAttributeByIndexEx(@ptrCast(*const IWMHeaderInfo3, self), wStreamNum, wIndex, pwszName, pwNameLen, pType, pwLangIndex, pValue, pdwDataLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo3_ModifyAttribute(self: *const T, wStreamNum: u16, wIndex: u16, Type: WMT_ATTR_DATATYPE, wLangIndex: u16, pValue: [*:0]const u8, dwLength: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo3.VTable, self.vtable).ModifyAttribute(@ptrCast(*const IWMHeaderInfo3, self), wStreamNum, wIndex, Type, wLangIndex, pValue, dwLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo3_AddAttribute(self: *const T, wStreamNum: u16, pszName: ?[*:0]const u16, pwIndex: ?*u16, Type: WMT_ATTR_DATATYPE, wLangIndex: u16, pValue: [*:0]const u8, dwLength: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo3.VTable, self.vtable).AddAttribute(@ptrCast(*const IWMHeaderInfo3, self), wStreamNum, pszName, pwIndex, Type, wLangIndex, pValue, dwLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo3_DeleteAttribute(self: *const T, wStreamNum: u16, wIndex: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo3.VTable, self.vtable).DeleteAttribute(@ptrCast(*const IWMHeaderInfo3, self), wStreamNum, wIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMHeaderInfo3_AddCodecInfo(self: *const T, pwszName: ?PWSTR, pwszDescription: ?PWSTR, codecType: WMT_CODEC_INFO_TYPE, cbCodecInfo: u16, pbCodecInfo: [*:0]u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMHeaderInfo3.VTable, self.vtable).AddCodecInfo(@ptrCast(*const IWMHeaderInfo3, self), pwszName, pwszDescription, codecType, cbCodecInfo, pbCodecInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMProfileManager_Value = @import("../zig.zig").Guid.initString("d16679f2-6ca0-472d-8d31-2f5d55aee155");
pub const IID_IWMProfileManager = &IID_IWMProfileManager_Value;
pub const IWMProfileManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateEmptyProfile: fn(
            self: *const IWMProfileManager,
            dwVersion: WMT_VERSION,
            ppProfile: ?*?*IWMProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadProfileByID: fn(
            self: *const IWMProfileManager,
            guidProfile: ?*const Guid,
            ppProfile: ?*?*IWMProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadProfileByData: fn(
            self: *const IWMProfileManager,
            pwszProfile: ?[*:0]const u16,
            ppProfile: ?*?*IWMProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveProfile: fn(
            self: *const IWMProfileManager,
            pIWMProfile: ?*IWMProfile,
            pwszProfile: ?PWSTR,
            pdwLength: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSystemProfileCount: fn(
            self: *const IWMProfileManager,
            pcProfiles: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadSystemProfile: fn(
            self: *const IWMProfileManager,
            dwProfileIndex: u32,
            ppProfile: ?*?*IWMProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfileManager_CreateEmptyProfile(self: *const T, dwVersion: WMT_VERSION, ppProfile: ?*?*IWMProfile) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfileManager.VTable, self.vtable).CreateEmptyProfile(@ptrCast(*const IWMProfileManager, self), dwVersion, ppProfile);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfileManager_LoadProfileByID(self: *const T, guidProfile: ?*const Guid, ppProfile: ?*?*IWMProfile) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfileManager.VTable, self.vtable).LoadProfileByID(@ptrCast(*const IWMProfileManager, self), guidProfile, ppProfile);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfileManager_LoadProfileByData(self: *const T, pwszProfile: ?[*:0]const u16, ppProfile: ?*?*IWMProfile) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfileManager.VTable, self.vtable).LoadProfileByData(@ptrCast(*const IWMProfileManager, self), pwszProfile, ppProfile);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfileManager_SaveProfile(self: *const T, pIWMProfile: ?*IWMProfile, pwszProfile: ?PWSTR, pdwLength: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfileManager.VTable, self.vtable).SaveProfile(@ptrCast(*const IWMProfileManager, self), pIWMProfile, pwszProfile, pdwLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfileManager_GetSystemProfileCount(self: *const T, pcProfiles: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfileManager.VTable, self.vtable).GetSystemProfileCount(@ptrCast(*const IWMProfileManager, self), pcProfiles);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfileManager_LoadSystemProfile(self: *const T, dwProfileIndex: u32, ppProfile: ?*?*IWMProfile) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfileManager.VTable, self.vtable).LoadSystemProfile(@ptrCast(*const IWMProfileManager, self), dwProfileIndex, ppProfile);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMProfileManager2_Value = @import("../zig.zig").Guid.initString("7a924e51-73c1-494d-8019-23d37ed9b89a");
pub const IID_IWMProfileManager2 = &IID_IWMProfileManager2_Value;
pub const IWMProfileManager2 = extern struct {
    pub const VTable = extern struct {
        base: IWMProfileManager.VTable,
        GetSystemProfileVersion: fn(
            self: *const IWMProfileManager2,
            pdwVersion: ?*WMT_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSystemProfileVersion: fn(
            self: *const IWMProfileManager2,
            dwVersion: WMT_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMProfileManager.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfileManager2_GetSystemProfileVersion(self: *const T, pdwVersion: ?*WMT_VERSION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfileManager2.VTable, self.vtable).GetSystemProfileVersion(@ptrCast(*const IWMProfileManager2, self), pdwVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfileManager2_SetSystemProfileVersion(self: *const T, dwVersion: WMT_VERSION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfileManager2.VTable, self.vtable).SetSystemProfileVersion(@ptrCast(*const IWMProfileManager2, self), dwVersion);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMProfileManagerLanguage_Value = @import("../zig.zig").Guid.initString("ba4dcc78-7ee0-4ab8-b27a-dbce8bc51454");
pub const IID_IWMProfileManagerLanguage = &IID_IWMProfileManagerLanguage_Value;
pub const IWMProfileManagerLanguage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetUserLanguageID: fn(
            self: *const IWMProfileManagerLanguage,
            wLangID: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUserLanguageID: fn(
            self: *const IWMProfileManagerLanguage,
            wLangID: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfileManagerLanguage_GetUserLanguageID(self: *const T, wLangID: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfileManagerLanguage.VTable, self.vtable).GetUserLanguageID(@ptrCast(*const IWMProfileManagerLanguage, self), wLangID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfileManagerLanguage_SetUserLanguageID(self: *const T, wLangID: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfileManagerLanguage.VTable, self.vtable).SetUserLanguageID(@ptrCast(*const IWMProfileManagerLanguage, self), wLangID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMProfile_Value = @import("../zig.zig").Guid.initString("96406bdb-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMProfile = &IID_IWMProfile_Value;
pub const IWMProfile = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetVersion: fn(
            self: *const IWMProfile,
            pdwVersion: ?*WMT_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: fn(
            self: *const IWMProfile,
            pwszName: [*:0]u16,
            pcchName: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetName: fn(
            self: *const IWMProfile,
            pwszName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: fn(
            self: *const IWMProfile,
            pwszDescription: [*:0]u16,
            pcchDescription: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDescription: fn(
            self: *const IWMProfile,
            pwszDescription: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamCount: fn(
            self: *const IWMProfile,
            pcStreams: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStream: fn(
            self: *const IWMProfile,
            dwStreamIndex: u32,
            ppConfig: ?*?*IWMStreamConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamByNumber: fn(
            self: *const IWMProfile,
            wStreamNum: u16,
            ppConfig: ?*?*IWMStreamConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveStream: fn(
            self: *const IWMProfile,
            pConfig: ?*IWMStreamConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveStreamByNumber: fn(
            self: *const IWMProfile,
            wStreamNum: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStream: fn(
            self: *const IWMProfile,
            pConfig: ?*IWMStreamConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReconfigStream: fn(
            self: *const IWMProfile,
            pConfig: ?*IWMStreamConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateNewStream: fn(
            self: *const IWMProfile,
            guidStreamType: ?*const Guid,
            ppConfig: ?*?*IWMStreamConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMutualExclusionCount: fn(
            self: *const IWMProfile,
            pcME: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMutualExclusion: fn(
            self: *const IWMProfile,
            dwMEIndex: u32,
            ppME: ?*?*IWMMutualExclusion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveMutualExclusion: fn(
            self: *const IWMProfile,
            pME: ?*IWMMutualExclusion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMutualExclusion: fn(
            self: *const IWMProfile,
            pME: ?*IWMMutualExclusion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateNewMutualExclusion: fn(
            self: *const IWMProfile,
            ppME: ?*?*IWMMutualExclusion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile_GetVersion(self: *const T, pdwVersion: ?*WMT_VERSION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile.VTable, self.vtable).GetVersion(@ptrCast(*const IWMProfile, self), pdwVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile_GetName(self: *const T, pwszName: [*:0]u16, pcchName: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile.VTable, self.vtable).GetName(@ptrCast(*const IWMProfile, self), pwszName, pcchName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile_SetName(self: *const T, pwszName: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile.VTable, self.vtable).SetName(@ptrCast(*const IWMProfile, self), pwszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile_GetDescription(self: *const T, pwszDescription: [*:0]u16, pcchDescription: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile.VTable, self.vtable).GetDescription(@ptrCast(*const IWMProfile, self), pwszDescription, pcchDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile_SetDescription(self: *const T, pwszDescription: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile.VTable, self.vtable).SetDescription(@ptrCast(*const IWMProfile, self), pwszDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile_GetStreamCount(self: *const T, pcStreams: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile.VTable, self.vtable).GetStreamCount(@ptrCast(*const IWMProfile, self), pcStreams);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile_GetStream(self: *const T, dwStreamIndex: u32, ppConfig: ?*?*IWMStreamConfig) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile.VTable, self.vtable).GetStream(@ptrCast(*const IWMProfile, self), dwStreamIndex, ppConfig);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile_GetStreamByNumber(self: *const T, wStreamNum: u16, ppConfig: ?*?*IWMStreamConfig) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile.VTable, self.vtable).GetStreamByNumber(@ptrCast(*const IWMProfile, self), wStreamNum, ppConfig);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile_RemoveStream(self: *const T, pConfig: ?*IWMStreamConfig) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile.VTable, self.vtable).RemoveStream(@ptrCast(*const IWMProfile, self), pConfig);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile_RemoveStreamByNumber(self: *const T, wStreamNum: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile.VTable, self.vtable).RemoveStreamByNumber(@ptrCast(*const IWMProfile, self), wStreamNum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile_AddStream(self: *const T, pConfig: ?*IWMStreamConfig) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile.VTable, self.vtable).AddStream(@ptrCast(*const IWMProfile, self), pConfig);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile_ReconfigStream(self: *const T, pConfig: ?*IWMStreamConfig) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile.VTable, self.vtable).ReconfigStream(@ptrCast(*const IWMProfile, self), pConfig);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile_CreateNewStream(self: *const T, guidStreamType: ?*const Guid, ppConfig: ?*?*IWMStreamConfig) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile.VTable, self.vtable).CreateNewStream(@ptrCast(*const IWMProfile, self), guidStreamType, ppConfig);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile_GetMutualExclusionCount(self: *const T, pcME: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile.VTable, self.vtable).GetMutualExclusionCount(@ptrCast(*const IWMProfile, self), pcME);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile_GetMutualExclusion(self: *const T, dwMEIndex: u32, ppME: ?*?*IWMMutualExclusion) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile.VTable, self.vtable).GetMutualExclusion(@ptrCast(*const IWMProfile, self), dwMEIndex, ppME);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile_RemoveMutualExclusion(self: *const T, pME: ?*IWMMutualExclusion) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile.VTable, self.vtable).RemoveMutualExclusion(@ptrCast(*const IWMProfile, self), pME);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile_AddMutualExclusion(self: *const T, pME: ?*IWMMutualExclusion) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile.VTable, self.vtable).AddMutualExclusion(@ptrCast(*const IWMProfile, self), pME);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile_CreateNewMutualExclusion(self: *const T, ppME: ?*?*IWMMutualExclusion) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile.VTable, self.vtable).CreateNewMutualExclusion(@ptrCast(*const IWMProfile, self), ppME);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMProfile2_Value = @import("../zig.zig").Guid.initString("07e72d33-d94e-4be7-8843-60ae5ff7e5f5");
pub const IID_IWMProfile2 = &IID_IWMProfile2_Value;
pub const IWMProfile2 = extern struct {
    pub const VTable = extern struct {
        base: IWMProfile.VTable,
        GetProfileID: fn(
            self: *const IWMProfile2,
            pguidID: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMProfile.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile2_GetProfileID(self: *const T, pguidID: ?*Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile2.VTable, self.vtable).GetProfileID(@ptrCast(*const IWMProfile2, self), pguidID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMProfile3_Value = @import("../zig.zig").Guid.initString("00ef96cc-a461-4546-8bcd-c9a28f0e06f5");
pub const IID_IWMProfile3 = &IID_IWMProfile3_Value;
pub const IWMProfile3 = extern struct {
    pub const VTable = extern struct {
        base: IWMProfile2.VTable,
        GetStorageFormat: fn(
            self: *const IWMProfile3,
            pnStorageFormat: ?*WMT_STORAGE_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStorageFormat: fn(
            self: *const IWMProfile3,
            nStorageFormat: WMT_STORAGE_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBandwidthSharingCount: fn(
            self: *const IWMProfile3,
            pcBS: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBandwidthSharing: fn(
            self: *const IWMProfile3,
            dwBSIndex: u32,
            ppBS: ?*?*IWMBandwidthSharing,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveBandwidthSharing: fn(
            self: *const IWMProfile3,
            pBS: ?*IWMBandwidthSharing,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddBandwidthSharing: fn(
            self: *const IWMProfile3,
            pBS: ?*IWMBandwidthSharing,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateNewBandwidthSharing: fn(
            self: *const IWMProfile3,
            ppBS: ?*?*IWMBandwidthSharing,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamPrioritization: fn(
            self: *const IWMProfile3,
            ppSP: ?*?*IWMStreamPrioritization,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStreamPrioritization: fn(
            self: *const IWMProfile3,
            pSP: ?*IWMStreamPrioritization,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveStreamPrioritization: fn(
            self: *const IWMProfile3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateNewStreamPrioritization: fn(
            self: *const IWMProfile3,
            ppSP: ?*?*IWMStreamPrioritization,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExpectedPacketCount: fn(
            self: *const IWMProfile3,
            msDuration: u64,
            pcPackets: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMProfile2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile3_GetStorageFormat(self: *const T, pnStorageFormat: ?*WMT_STORAGE_FORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile3.VTable, self.vtable).GetStorageFormat(@ptrCast(*const IWMProfile3, self), pnStorageFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile3_SetStorageFormat(self: *const T, nStorageFormat: WMT_STORAGE_FORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile3.VTable, self.vtable).SetStorageFormat(@ptrCast(*const IWMProfile3, self), nStorageFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile3_GetBandwidthSharingCount(self: *const T, pcBS: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile3.VTable, self.vtable).GetBandwidthSharingCount(@ptrCast(*const IWMProfile3, self), pcBS);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile3_GetBandwidthSharing(self: *const T, dwBSIndex: u32, ppBS: ?*?*IWMBandwidthSharing) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile3.VTable, self.vtable).GetBandwidthSharing(@ptrCast(*const IWMProfile3, self), dwBSIndex, ppBS);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile3_RemoveBandwidthSharing(self: *const T, pBS: ?*IWMBandwidthSharing) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile3.VTable, self.vtable).RemoveBandwidthSharing(@ptrCast(*const IWMProfile3, self), pBS);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile3_AddBandwidthSharing(self: *const T, pBS: ?*IWMBandwidthSharing) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile3.VTable, self.vtable).AddBandwidthSharing(@ptrCast(*const IWMProfile3, self), pBS);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile3_CreateNewBandwidthSharing(self: *const T, ppBS: ?*?*IWMBandwidthSharing) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile3.VTable, self.vtable).CreateNewBandwidthSharing(@ptrCast(*const IWMProfile3, self), ppBS);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile3_GetStreamPrioritization(self: *const T, ppSP: ?*?*IWMStreamPrioritization) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile3.VTable, self.vtable).GetStreamPrioritization(@ptrCast(*const IWMProfile3, self), ppSP);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile3_SetStreamPrioritization(self: *const T, pSP: ?*IWMStreamPrioritization) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile3.VTable, self.vtable).SetStreamPrioritization(@ptrCast(*const IWMProfile3, self), pSP);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile3_RemoveStreamPrioritization(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile3.VTable, self.vtable).RemoveStreamPrioritization(@ptrCast(*const IWMProfile3, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile3_CreateNewStreamPrioritization(self: *const T, ppSP: ?*?*IWMStreamPrioritization) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile3.VTable, self.vtable).CreateNewStreamPrioritization(@ptrCast(*const IWMProfile3, self), ppSP);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProfile3_GetExpectedPacketCount(self: *const T, msDuration: u64, pcPackets: ?*u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProfile3.VTable, self.vtable).GetExpectedPacketCount(@ptrCast(*const IWMProfile3, self), msDuration, pcPackets);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMStreamConfig_Value = @import("../zig.zig").Guid.initString("96406bdc-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMStreamConfig = &IID_IWMStreamConfig_Value;
pub const IWMStreamConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetStreamType: fn(
            self: *const IWMStreamConfig,
            pguidStreamType: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamNumber: fn(
            self: *const IWMStreamConfig,
            pwStreamNum: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStreamNumber: fn(
            self: *const IWMStreamConfig,
            wStreamNum: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamName: fn(
            self: *const IWMStreamConfig,
            pwszStreamName: [*:0]u16,
            pcchStreamName: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStreamName: fn(
            self: *const IWMStreamConfig,
            pwszStreamName: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnectionName: fn(
            self: *const IWMStreamConfig,
            pwszInputName: [*:0]u16,
            pcchInputName: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConnectionName: fn(
            self: *const IWMStreamConfig,
            pwszInputName: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitrate: fn(
            self: *const IWMStreamConfig,
            pdwBitrate: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBitrate: fn(
            self: *const IWMStreamConfig,
            pdwBitrate: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBufferWindow: fn(
            self: *const IWMStreamConfig,
            pmsBufferWindow: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBufferWindow: fn(
            self: *const IWMStreamConfig,
            msBufferWindow: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamConfig_GetStreamType(self: *const T, pguidStreamType: ?*Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamConfig.VTable, self.vtable).GetStreamType(@ptrCast(*const IWMStreamConfig, self), pguidStreamType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamConfig_GetStreamNumber(self: *const T, pwStreamNum: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamConfig.VTable, self.vtable).GetStreamNumber(@ptrCast(*const IWMStreamConfig, self), pwStreamNum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamConfig_SetStreamNumber(self: *const T, wStreamNum: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamConfig.VTable, self.vtable).SetStreamNumber(@ptrCast(*const IWMStreamConfig, self), wStreamNum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamConfig_GetStreamName(self: *const T, pwszStreamName: [*:0]u16, pcchStreamName: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamConfig.VTable, self.vtable).GetStreamName(@ptrCast(*const IWMStreamConfig, self), pwszStreamName, pcchStreamName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamConfig_SetStreamName(self: *const T, pwszStreamName: ?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamConfig.VTable, self.vtable).SetStreamName(@ptrCast(*const IWMStreamConfig, self), pwszStreamName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamConfig_GetConnectionName(self: *const T, pwszInputName: [*:0]u16, pcchInputName: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamConfig.VTable, self.vtable).GetConnectionName(@ptrCast(*const IWMStreamConfig, self), pwszInputName, pcchInputName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamConfig_SetConnectionName(self: *const T, pwszInputName: ?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamConfig.VTable, self.vtable).SetConnectionName(@ptrCast(*const IWMStreamConfig, self), pwszInputName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamConfig_GetBitrate(self: *const T, pdwBitrate: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamConfig.VTable, self.vtable).GetBitrate(@ptrCast(*const IWMStreamConfig, self), pdwBitrate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamConfig_SetBitrate(self: *const T, pdwBitrate: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamConfig.VTable, self.vtable).SetBitrate(@ptrCast(*const IWMStreamConfig, self), pdwBitrate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamConfig_GetBufferWindow(self: *const T, pmsBufferWindow: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamConfig.VTable, self.vtable).GetBufferWindow(@ptrCast(*const IWMStreamConfig, self), pmsBufferWindow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamConfig_SetBufferWindow(self: *const T, msBufferWindow: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamConfig.VTable, self.vtable).SetBufferWindow(@ptrCast(*const IWMStreamConfig, self), msBufferWindow);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMStreamConfig2_Value = @import("../zig.zig").Guid.initString("7688d8cb-fc0d-43bd-9459-5a8dec200cfa");
pub const IID_IWMStreamConfig2 = &IID_IWMStreamConfig2_Value;
pub const IWMStreamConfig2 = extern struct {
    pub const VTable = extern struct {
        base: IWMStreamConfig.VTable,
        GetTransportType: fn(
            self: *const IWMStreamConfig2,
            pnTransportType: ?*WMT_TRANSPORT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransportType: fn(
            self: *const IWMStreamConfig2,
            nTransportType: WMT_TRANSPORT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDataUnitExtension: fn(
            self: *const IWMStreamConfig2,
            guidExtensionSystemID: Guid,
            cbExtensionDataSize: u16,
            pbExtensionSystemInfo: [*:0]u8,
            cbExtensionSystemInfo: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataUnitExtensionCount: fn(
            self: *const IWMStreamConfig2,
            pcDataUnitExtensions: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataUnitExtension: fn(
            self: *const IWMStreamConfig2,
            wDataUnitExtensionNumber: u16,
            pguidExtensionSystemID: ?*Guid,
            pcbExtensionDataSize: ?*u16,
            pbExtensionSystemInfo: [*:0]u8,
            pcbExtensionSystemInfo: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllDataUnitExtensions: fn(
            self: *const IWMStreamConfig2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMStreamConfig.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamConfig2_GetTransportType(self: *const T, pnTransportType: ?*WMT_TRANSPORT_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamConfig2.VTable, self.vtable).GetTransportType(@ptrCast(*const IWMStreamConfig2, self), pnTransportType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamConfig2_SetTransportType(self: *const T, nTransportType: WMT_TRANSPORT_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamConfig2.VTable, self.vtable).SetTransportType(@ptrCast(*const IWMStreamConfig2, self), nTransportType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamConfig2_AddDataUnitExtension(self: *const T, guidExtensionSystemID: Guid, cbExtensionDataSize: u16, pbExtensionSystemInfo: [*:0]u8, cbExtensionSystemInfo: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamConfig2.VTable, self.vtable).AddDataUnitExtension(@ptrCast(*const IWMStreamConfig2, self), guidExtensionSystemID, cbExtensionDataSize, pbExtensionSystemInfo, cbExtensionSystemInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamConfig2_GetDataUnitExtensionCount(self: *const T, pcDataUnitExtensions: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamConfig2.VTable, self.vtable).GetDataUnitExtensionCount(@ptrCast(*const IWMStreamConfig2, self), pcDataUnitExtensions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamConfig2_GetDataUnitExtension(self: *const T, wDataUnitExtensionNumber: u16, pguidExtensionSystemID: ?*Guid, pcbExtensionDataSize: ?*u16, pbExtensionSystemInfo: [*:0]u8, pcbExtensionSystemInfo: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamConfig2.VTable, self.vtable).GetDataUnitExtension(@ptrCast(*const IWMStreamConfig2, self), wDataUnitExtensionNumber, pguidExtensionSystemID, pcbExtensionDataSize, pbExtensionSystemInfo, pcbExtensionSystemInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamConfig2_RemoveAllDataUnitExtensions(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamConfig2.VTable, self.vtable).RemoveAllDataUnitExtensions(@ptrCast(*const IWMStreamConfig2, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMStreamConfig3_Value = @import("../zig.zig").Guid.initString("cb164104-3aa9-45a7-9ac9-4daee131d6e1");
pub const IID_IWMStreamConfig3 = &IID_IWMStreamConfig3_Value;
pub const IWMStreamConfig3 = extern struct {
    pub const VTable = extern struct {
        base: IWMStreamConfig2.VTable,
        GetLanguage: fn(
            self: *const IWMStreamConfig3,
            pwszLanguageString: [*:0]u16,
            pcchLanguageStringLength: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLanguage: fn(
            self: *const IWMStreamConfig3,
            pwszLanguageString: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMStreamConfig2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamConfig3_GetLanguage(self: *const T, pwszLanguageString: [*:0]u16, pcchLanguageStringLength: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamConfig3.VTable, self.vtable).GetLanguage(@ptrCast(*const IWMStreamConfig3, self), pwszLanguageString, pcchLanguageStringLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamConfig3_SetLanguage(self: *const T, pwszLanguageString: ?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamConfig3.VTable, self.vtable).SetLanguage(@ptrCast(*const IWMStreamConfig3, self), pwszLanguageString);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPacketSize_Value = @import("../zig.zig").Guid.initString("cdfb97ab-188f-40b3-b643-5b7903975c59");
pub const IID_IWMPacketSize = &IID_IWMPacketSize_Value;
pub const IWMPacketSize = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMaxPacketSize: fn(
            self: *const IWMPacketSize,
            pdwMaxPacketSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxPacketSize: fn(
            self: *const IWMPacketSize,
            dwMaxPacketSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMPacketSize_GetMaxPacketSize(self: *const T, pdwMaxPacketSize: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMPacketSize.VTable, self.vtable).GetMaxPacketSize(@ptrCast(*const IWMPacketSize, self), pdwMaxPacketSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMPacketSize_SetMaxPacketSize(self: *const T, dwMaxPacketSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMPacketSize.VTable, self.vtable).SetMaxPacketSize(@ptrCast(*const IWMPacketSize, self), dwMaxPacketSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPacketSize2_Value = @import("../zig.zig").Guid.initString("8bfc2b9e-b646-4233-a877-1c6a079669dc");
pub const IID_IWMPacketSize2 = &IID_IWMPacketSize2_Value;
pub const IWMPacketSize2 = extern struct {
    pub const VTable = extern struct {
        base: IWMPacketSize.VTable,
        GetMinPacketSize: fn(
            self: *const IWMPacketSize2,
            pdwMinPacketSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMinPacketSize: fn(
            self: *const IWMPacketSize2,
            dwMinPacketSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMPacketSize.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMPacketSize2_GetMinPacketSize(self: *const T, pdwMinPacketSize: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMPacketSize2.VTable, self.vtable).GetMinPacketSize(@ptrCast(*const IWMPacketSize2, self), pdwMinPacketSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMPacketSize2_SetMinPacketSize(self: *const T, dwMinPacketSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMPacketSize2.VTable, self.vtable).SetMinPacketSize(@ptrCast(*const IWMPacketSize2, self), dwMinPacketSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMStreamList_Value = @import("../zig.zig").Guid.initString("96406bdd-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMStreamList = &IID_IWMStreamList_Value;
pub const IWMStreamList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetStreams: fn(
            self: *const IWMStreamList,
            pwStreamNumArray: [*:0]u16,
            pcStreams: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStream: fn(
            self: *const IWMStreamList,
            wStreamNum: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveStream: fn(
            self: *const IWMStreamList,
            wStreamNum: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamList_GetStreams(self: *const T, pwStreamNumArray: [*:0]u16, pcStreams: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamList.VTable, self.vtable).GetStreams(@ptrCast(*const IWMStreamList, self), pwStreamNumArray, pcStreams);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamList_AddStream(self: *const T, wStreamNum: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamList.VTable, self.vtable).AddStream(@ptrCast(*const IWMStreamList, self), wStreamNum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamList_RemoveStream(self: *const T, wStreamNum: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamList.VTable, self.vtable).RemoveStream(@ptrCast(*const IWMStreamList, self), wStreamNum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMMutualExclusion_Value = @import("../zig.zig").Guid.initString("96406bde-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMMutualExclusion = &IID_IWMMutualExclusion_Value;
pub const IWMMutualExclusion = extern struct {
    pub const VTable = extern struct {
        base: IWMStreamList.VTable,
        GetType: fn(
            self: *const IWMMutualExclusion,
            pguidType: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetType: fn(
            self: *const IWMMutualExclusion,
            guidType: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMStreamList.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMMutualExclusion_GetType(self: *const T, pguidType: ?*Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMMutualExclusion.VTable, self.vtable).GetType(@ptrCast(*const IWMMutualExclusion, self), pguidType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMMutualExclusion_SetType(self: *const T, guidType: ?*const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMMutualExclusion.VTable, self.vtable).SetType(@ptrCast(*const IWMMutualExclusion, self), guidType);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMMutualExclusion2_Value = @import("../zig.zig").Guid.initString("0302b57d-89d1-4ba2-85c9-166f2c53eb91");
pub const IID_IWMMutualExclusion2 = &IID_IWMMutualExclusion2_Value;
pub const IWMMutualExclusion2 = extern struct {
    pub const VTable = extern struct {
        base: IWMMutualExclusion.VTable,
        GetName: fn(
            self: *const IWMMutualExclusion2,
            pwszName: [*:0]u16,
            pcchName: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetName: fn(
            self: *const IWMMutualExclusion2,
            pwszName: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecordCount: fn(
            self: *const IWMMutualExclusion2,
            pwRecordCount: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRecord: fn(
            self: *const IWMMutualExclusion2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveRecord: fn(
            self: *const IWMMutualExclusion2,
            wRecordNumber: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecordName: fn(
            self: *const IWMMutualExclusion2,
            wRecordNumber: u16,
            pwszRecordName: [*:0]u16,
            pcchRecordName: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRecordName: fn(
            self: *const IWMMutualExclusion2,
            wRecordNumber: u16,
            pwszRecordName: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamsForRecord: fn(
            self: *const IWMMutualExclusion2,
            wRecordNumber: u16,
            pwStreamNumArray: [*:0]u16,
            pcStreams: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStreamForRecord: fn(
            self: *const IWMMutualExclusion2,
            wRecordNumber: u16,
            wStreamNumber: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveStreamForRecord: fn(
            self: *const IWMMutualExclusion2,
            wRecordNumber: u16,
            wStreamNumber: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMMutualExclusion.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMMutualExclusion2_GetName(self: *const T, pwszName: [*:0]u16, pcchName: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMMutualExclusion2.VTable, self.vtable).GetName(@ptrCast(*const IWMMutualExclusion2, self), pwszName, pcchName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMMutualExclusion2_SetName(self: *const T, pwszName: ?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMMutualExclusion2.VTable, self.vtable).SetName(@ptrCast(*const IWMMutualExclusion2, self), pwszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMMutualExclusion2_GetRecordCount(self: *const T, pwRecordCount: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMMutualExclusion2.VTable, self.vtable).GetRecordCount(@ptrCast(*const IWMMutualExclusion2, self), pwRecordCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMMutualExclusion2_AddRecord(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMMutualExclusion2.VTable, self.vtable).AddRecord(@ptrCast(*const IWMMutualExclusion2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMMutualExclusion2_RemoveRecord(self: *const T, wRecordNumber: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMMutualExclusion2.VTable, self.vtable).RemoveRecord(@ptrCast(*const IWMMutualExclusion2, self), wRecordNumber);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMMutualExclusion2_GetRecordName(self: *const T, wRecordNumber: u16, pwszRecordName: [*:0]u16, pcchRecordName: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMMutualExclusion2.VTable, self.vtable).GetRecordName(@ptrCast(*const IWMMutualExclusion2, self), wRecordNumber, pwszRecordName, pcchRecordName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMMutualExclusion2_SetRecordName(self: *const T, wRecordNumber: u16, pwszRecordName: ?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMMutualExclusion2.VTable, self.vtable).SetRecordName(@ptrCast(*const IWMMutualExclusion2, self), wRecordNumber, pwszRecordName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMMutualExclusion2_GetStreamsForRecord(self: *const T, wRecordNumber: u16, pwStreamNumArray: [*:0]u16, pcStreams: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMMutualExclusion2.VTable, self.vtable).GetStreamsForRecord(@ptrCast(*const IWMMutualExclusion2, self), wRecordNumber, pwStreamNumArray, pcStreams);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMMutualExclusion2_AddStreamForRecord(self: *const T, wRecordNumber: u16, wStreamNumber: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMMutualExclusion2.VTable, self.vtable).AddStreamForRecord(@ptrCast(*const IWMMutualExclusion2, self), wRecordNumber, wStreamNumber);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMMutualExclusion2_RemoveStreamForRecord(self: *const T, wRecordNumber: u16, wStreamNumber: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMMutualExclusion2.VTable, self.vtable).RemoveStreamForRecord(@ptrCast(*const IWMMutualExclusion2, self), wRecordNumber, wStreamNumber);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMBandwidthSharing_Value = @import("../zig.zig").Guid.initString("ad694af1-f8d9-42f8-bc47-70311b0c4f9e");
pub const IID_IWMBandwidthSharing = &IID_IWMBandwidthSharing_Value;
pub const IWMBandwidthSharing = extern struct {
    pub const VTable = extern struct {
        base: IWMStreamList.VTable,
        GetType: fn(
            self: *const IWMBandwidthSharing,
            pguidType: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetType: fn(
            self: *const IWMBandwidthSharing,
            guidType: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBandwidth: fn(
            self: *const IWMBandwidthSharing,
            pdwBitrate: ?*u32,
            pmsBufferWindow: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBandwidth: fn(
            self: *const IWMBandwidthSharing,
            dwBitrate: u32,
            msBufferWindow: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMStreamList.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMBandwidthSharing_GetType(self: *const T, pguidType: ?*Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMBandwidthSharing.VTable, self.vtable).GetType(@ptrCast(*const IWMBandwidthSharing, self), pguidType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMBandwidthSharing_SetType(self: *const T, guidType: ?*const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMBandwidthSharing.VTable, self.vtable).SetType(@ptrCast(*const IWMBandwidthSharing, self), guidType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMBandwidthSharing_GetBandwidth(self: *const T, pdwBitrate: ?*u32, pmsBufferWindow: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMBandwidthSharing.VTable, self.vtable).GetBandwidth(@ptrCast(*const IWMBandwidthSharing, self), pdwBitrate, pmsBufferWindow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMBandwidthSharing_SetBandwidth(self: *const T, dwBitrate: u32, msBufferWindow: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMBandwidthSharing.VTable, self.vtable).SetBandwidth(@ptrCast(*const IWMBandwidthSharing, self), dwBitrate, msBufferWindow);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMStreamPrioritization_Value = @import("../zig.zig").Guid.initString("8c1c6090-f9a8-4748-8ec3-dd1108ba1e77");
pub const IID_IWMStreamPrioritization = &IID_IWMStreamPrioritization_Value;
pub const IWMStreamPrioritization = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPriorityRecords: fn(
            self: *const IWMStreamPrioritization,
            pRecordArray: [*]WM_STREAM_PRIORITY_RECORD,
            pcRecords: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPriorityRecords: fn(
            self: *const IWMStreamPrioritization,
            pRecordArray: ?*WM_STREAM_PRIORITY_RECORD,
            cRecords: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamPrioritization_GetPriorityRecords(self: *const T, pRecordArray: [*]WM_STREAM_PRIORITY_RECORD, pcRecords: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamPrioritization.VTable, self.vtable).GetPriorityRecords(@ptrCast(*const IWMStreamPrioritization, self), pRecordArray, pcRecords);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMStreamPrioritization_SetPriorityRecords(self: *const T, pRecordArray: ?*WM_STREAM_PRIORITY_RECORD, cRecords: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMStreamPrioritization.VTable, self.vtable).SetPriorityRecords(@ptrCast(*const IWMStreamPrioritization, self), pRecordArray, cRecords);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterAdvanced_Value = @import("../zig.zig").Guid.initString("96406be3-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMWriterAdvanced = &IID_IWMWriterAdvanced_Value;
pub const IWMWriterAdvanced = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSinkCount: fn(
            self: *const IWMWriterAdvanced,
            pcSinks: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSink: fn(
            self: *const IWMWriterAdvanced,
            dwSinkNum: u32,
            ppSink: ?*?*IWMWriterSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddSink: fn(
            self: *const IWMWriterAdvanced,
            pSink: ?*IWMWriterSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveSink: fn(
            self: *const IWMWriterAdvanced,
            pSink: ?*IWMWriterSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteStreamSample: fn(
            self: *const IWMWriterAdvanced,
            wStreamNum: u16,
            cnsSampleTime: u64,
            msSampleSendTime: u32,
            cnsSampleDuration: u64,
            dwFlags: u32,
            pSample: ?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLiveSource: fn(
            self: *const IWMWriterAdvanced,
            fIsLiveSource: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRealTime: fn(
            self: *const IWMWriterAdvanced,
            pfRealTime: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWriterTime: fn(
            self: *const IWMWriterAdvanced,
            pcnsCurrentTime: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatistics: fn(
            self: *const IWMWriterAdvanced,
            wStreamNum: u16,
            pStats: ?*WM_WRITER_STATISTICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSyncTolerance: fn(
            self: *const IWMWriterAdvanced,
            msWindow: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncTolerance: fn(
            self: *const IWMWriterAdvanced,
            pmsWindow: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterAdvanced_GetSinkCount(self: *const T, pcSinks: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterAdvanced.VTable, self.vtable).GetSinkCount(@ptrCast(*const IWMWriterAdvanced, self), pcSinks);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterAdvanced_GetSink(self: *const T, dwSinkNum: u32, ppSink: ?*?*IWMWriterSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterAdvanced.VTable, self.vtable).GetSink(@ptrCast(*const IWMWriterAdvanced, self), dwSinkNum, ppSink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterAdvanced_AddSink(self: *const T, pSink: ?*IWMWriterSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterAdvanced.VTable, self.vtable).AddSink(@ptrCast(*const IWMWriterAdvanced, self), pSink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterAdvanced_RemoveSink(self: *const T, pSink: ?*IWMWriterSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterAdvanced.VTable, self.vtable).RemoveSink(@ptrCast(*const IWMWriterAdvanced, self), pSink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterAdvanced_WriteStreamSample(self: *const T, wStreamNum: u16, cnsSampleTime: u64, msSampleSendTime: u32, cnsSampleDuration: u64, dwFlags: u32, pSample: ?*INSSBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterAdvanced.VTable, self.vtable).WriteStreamSample(@ptrCast(*const IWMWriterAdvanced, self), wStreamNum, cnsSampleTime, msSampleSendTime, cnsSampleDuration, dwFlags, pSample);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterAdvanced_SetLiveSource(self: *const T, fIsLiveSource: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterAdvanced.VTable, self.vtable).SetLiveSource(@ptrCast(*const IWMWriterAdvanced, self), fIsLiveSource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterAdvanced_IsRealTime(self: *const T, pfRealTime: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterAdvanced.VTable, self.vtable).IsRealTime(@ptrCast(*const IWMWriterAdvanced, self), pfRealTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterAdvanced_GetWriterTime(self: *const T, pcnsCurrentTime: ?*u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterAdvanced.VTable, self.vtable).GetWriterTime(@ptrCast(*const IWMWriterAdvanced, self), pcnsCurrentTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterAdvanced_GetStatistics(self: *const T, wStreamNum: u16, pStats: ?*WM_WRITER_STATISTICS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterAdvanced.VTable, self.vtable).GetStatistics(@ptrCast(*const IWMWriterAdvanced, self), wStreamNum, pStats);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterAdvanced_SetSyncTolerance(self: *const T, msWindow: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterAdvanced.VTable, self.vtable).SetSyncTolerance(@ptrCast(*const IWMWriterAdvanced, self), msWindow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterAdvanced_GetSyncTolerance(self: *const T, pmsWindow: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterAdvanced.VTable, self.vtable).GetSyncTolerance(@ptrCast(*const IWMWriterAdvanced, self), pmsWindow);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterAdvanced2_Value = @import("../zig.zig").Guid.initString("962dc1ec-c046-4db8-9cc7-26ceae500817");
pub const IID_IWMWriterAdvanced2 = &IID_IWMWriterAdvanced2_Value;
pub const IWMWriterAdvanced2 = extern struct {
    pub const VTable = extern struct {
        base: IWMWriterAdvanced.VTable,
        GetInputSetting: fn(
            self: *const IWMWriterAdvanced2,
            dwInputNum: u32,
            pszName: ?[*:0]const u16,
            pType: ?*WMT_ATTR_DATATYPE,
            pValue: [*:0]u8,
            pcbLength: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInputSetting: fn(
            self: *const IWMWriterAdvanced2,
            dwInputNum: u32,
            pszName: ?[*:0]const u16,
            Type: WMT_ATTR_DATATYPE,
            pValue: [*:0]const u8,
            cbLength: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMWriterAdvanced.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterAdvanced2_GetInputSetting(self: *const T, dwInputNum: u32, pszName: ?[*:0]const u16, pType: ?*WMT_ATTR_DATATYPE, pValue: [*:0]u8, pcbLength: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterAdvanced2.VTable, self.vtable).GetInputSetting(@ptrCast(*const IWMWriterAdvanced2, self), dwInputNum, pszName, pType, pValue, pcbLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterAdvanced2_SetInputSetting(self: *const T, dwInputNum: u32, pszName: ?[*:0]const u16, Type: WMT_ATTR_DATATYPE, pValue: [*:0]const u8, cbLength: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterAdvanced2.VTable, self.vtable).SetInputSetting(@ptrCast(*const IWMWriterAdvanced2, self), dwInputNum, pszName, Type, pValue, cbLength);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterAdvanced3_Value = @import("../zig.zig").Guid.initString("2cd6492d-7c37-4e76-9d3b-59261183a22e");
pub const IID_IWMWriterAdvanced3 = &IID_IWMWriterAdvanced3_Value;
pub const IWMWriterAdvanced3 = extern struct {
    pub const VTable = extern struct {
        base: IWMWriterAdvanced2.VTable,
        GetStatisticsEx: fn(
            self: *const IWMWriterAdvanced3,
            wStreamNum: u16,
            pStats: ?*WM_WRITER_STATISTICS_EX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNonBlocking: fn(
            self: *const IWMWriterAdvanced3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMWriterAdvanced2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterAdvanced3_GetStatisticsEx(self: *const T, wStreamNum: u16, pStats: ?*WM_WRITER_STATISTICS_EX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterAdvanced3.VTable, self.vtable).GetStatisticsEx(@ptrCast(*const IWMWriterAdvanced3, self), wStreamNum, pStats);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterAdvanced3_SetNonBlocking(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterAdvanced3.VTable, self.vtable).SetNonBlocking(@ptrCast(*const IWMWriterAdvanced3, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterPreprocess_Value = @import("../zig.zig").Guid.initString("fc54a285-38c4-45b5-aa23-85b9f7cb424b");
pub const IID_IWMWriterPreprocess = &IID_IWMWriterPreprocess_Value;
pub const IWMWriterPreprocess = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMaxPreprocessingPasses: fn(
            self: *const IWMWriterPreprocess,
            dwInputNum: u32,
            dwFlags: u32,
            pdwMaxNumPasses: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNumPreprocessingPasses: fn(
            self: *const IWMWriterPreprocess,
            dwInputNum: u32,
            dwFlags: u32,
            dwNumPasses: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginPreprocessingPass: fn(
            self: *const IWMWriterPreprocess,
            dwInputNum: u32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreprocessSample: fn(
            self: *const IWMWriterPreprocess,
            dwInputNum: u32,
            cnsSampleTime: u64,
            dwFlags: u32,
            pSample: ?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndPreprocessingPass: fn(
            self: *const IWMWriterPreprocess,
            dwInputNum: u32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterPreprocess_GetMaxPreprocessingPasses(self: *const T, dwInputNum: u32, dwFlags: u32, pdwMaxNumPasses: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterPreprocess.VTable, self.vtable).GetMaxPreprocessingPasses(@ptrCast(*const IWMWriterPreprocess, self), dwInputNum, dwFlags, pdwMaxNumPasses);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterPreprocess_SetNumPreprocessingPasses(self: *const T, dwInputNum: u32, dwFlags: u32, dwNumPasses: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterPreprocess.VTable, self.vtable).SetNumPreprocessingPasses(@ptrCast(*const IWMWriterPreprocess, self), dwInputNum, dwFlags, dwNumPasses);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterPreprocess_BeginPreprocessingPass(self: *const T, dwInputNum: u32, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterPreprocess.VTable, self.vtable).BeginPreprocessingPass(@ptrCast(*const IWMWriterPreprocess, self), dwInputNum, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterPreprocess_PreprocessSample(self: *const T, dwInputNum: u32, cnsSampleTime: u64, dwFlags: u32, pSample: ?*INSSBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterPreprocess.VTable, self.vtable).PreprocessSample(@ptrCast(*const IWMWriterPreprocess, self), dwInputNum, cnsSampleTime, dwFlags, pSample);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterPreprocess_EndPreprocessingPass(self: *const T, dwInputNum: u32, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterPreprocess.VTable, self.vtable).EndPreprocessingPass(@ptrCast(*const IWMWriterPreprocess, self), dwInputNum, dwFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterPostViewCallback_Value = @import("../zig.zig").Guid.initString("d9d6549d-a193-4f24-b308-03123d9b7f8d");
pub const IID_IWMWriterPostViewCallback = &IID_IWMWriterPostViewCallback_Value;
pub const IWMWriterPostViewCallback = extern struct {
    pub const VTable = extern struct {
        base: IWMStatusCallback.VTable,
        OnPostViewSample: fn(
            self: *const IWMWriterPostViewCallback,
            wStreamNumber: u16,
            cnsSampleTime: u64,
            cnsSampleDuration: u64,
            dwFlags: u32,
            pSample: ?*INSSBuffer,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AllocateForPostView: fn(
            self: *const IWMWriterPostViewCallback,
            wStreamNum: u16,
            cbBuffer: u32,
            ppBuffer: ?*?*INSSBuffer,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMStatusCallback.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterPostViewCallback_OnPostViewSample(self: *const T, wStreamNumber: u16, cnsSampleTime: u64, cnsSampleDuration: u64, dwFlags: u32, pSample: ?*INSSBuffer, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterPostViewCallback.VTable, self.vtable).OnPostViewSample(@ptrCast(*const IWMWriterPostViewCallback, self), wStreamNumber, cnsSampleTime, cnsSampleDuration, dwFlags, pSample, pvContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterPostViewCallback_AllocateForPostView(self: *const T, wStreamNum: u16, cbBuffer: u32, ppBuffer: ?*?*INSSBuffer, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterPostViewCallback.VTable, self.vtable).AllocateForPostView(@ptrCast(*const IWMWriterPostViewCallback, self), wStreamNum, cbBuffer, ppBuffer, pvContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterPostView_Value = @import("../zig.zig").Guid.initString("81e20ce4-75ef-491a-8004-fc53c45bdc3e");
pub const IID_IWMWriterPostView = &IID_IWMWriterPostView_Value;
pub const IWMWriterPostView = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetPostViewCallback: fn(
            self: *const IWMWriterPostView,
            pCallback: ?*IWMWriterPostViewCallback,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReceivePostViewSamples: fn(
            self: *const IWMWriterPostView,
            wStreamNum: u16,
            fReceivePostViewSamples: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReceivePostViewSamples: fn(
            self: *const IWMWriterPostView,
            wStreamNum: u16,
            pfReceivePostViewSamples: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPostViewProps: fn(
            self: *const IWMWriterPostView,
            wStreamNumber: u16,
            ppOutput: ?*?*IWMMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPostViewProps: fn(
            self: *const IWMWriterPostView,
            wStreamNumber: u16,
            pOutput: ?*IWMMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPostViewFormatCount: fn(
            self: *const IWMWriterPostView,
            wStreamNumber: u16,
            pcFormats: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPostViewFormat: fn(
            self: *const IWMWriterPostView,
            wStreamNumber: u16,
            dwFormatNumber: u32,
            ppProps: ?*?*IWMMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllocateForPostView: fn(
            self: *const IWMWriterPostView,
            wStreamNumber: u16,
            fAllocate: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllocateForPostView: fn(
            self: *const IWMWriterPostView,
            wStreamNumber: u16,
            pfAllocate: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterPostView_SetPostViewCallback(self: *const T, pCallback: ?*IWMWriterPostViewCallback, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterPostView.VTable, self.vtable).SetPostViewCallback(@ptrCast(*const IWMWriterPostView, self), pCallback, pvContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterPostView_SetReceivePostViewSamples(self: *const T, wStreamNum: u16, fReceivePostViewSamples: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterPostView.VTable, self.vtable).SetReceivePostViewSamples(@ptrCast(*const IWMWriterPostView, self), wStreamNum, fReceivePostViewSamples);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterPostView_GetReceivePostViewSamples(self: *const T, wStreamNum: u16, pfReceivePostViewSamples: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterPostView.VTable, self.vtable).GetReceivePostViewSamples(@ptrCast(*const IWMWriterPostView, self), wStreamNum, pfReceivePostViewSamples);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterPostView_GetPostViewProps(self: *const T, wStreamNumber: u16, ppOutput: ?*?*IWMMediaProps) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterPostView.VTable, self.vtable).GetPostViewProps(@ptrCast(*const IWMWriterPostView, self), wStreamNumber, ppOutput);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterPostView_SetPostViewProps(self: *const T, wStreamNumber: u16, pOutput: ?*IWMMediaProps) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterPostView.VTable, self.vtable).SetPostViewProps(@ptrCast(*const IWMWriterPostView, self), wStreamNumber, pOutput);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterPostView_GetPostViewFormatCount(self: *const T, wStreamNumber: u16, pcFormats: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterPostView.VTable, self.vtable).GetPostViewFormatCount(@ptrCast(*const IWMWriterPostView, self), wStreamNumber, pcFormats);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterPostView_GetPostViewFormat(self: *const T, wStreamNumber: u16, dwFormatNumber: u32, ppProps: ?*?*IWMMediaProps) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterPostView.VTable, self.vtable).GetPostViewFormat(@ptrCast(*const IWMWriterPostView, self), wStreamNumber, dwFormatNumber, ppProps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterPostView_SetAllocateForPostView(self: *const T, wStreamNumber: u16, fAllocate: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterPostView.VTable, self.vtable).SetAllocateForPostView(@ptrCast(*const IWMWriterPostView, self), wStreamNumber, fAllocate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterPostView_GetAllocateForPostView(self: *const T, wStreamNumber: u16, pfAllocate: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterPostView.VTable, self.vtable).GetAllocateForPostView(@ptrCast(*const IWMWriterPostView, self), wStreamNumber, pfAllocate);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterSink_Value = @import("../zig.zig").Guid.initString("96406be4-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMWriterSink = &IID_IWMWriterSink_Value;
pub const IWMWriterSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnHeader: fn(
            self: *const IWMWriterSink,
            pHeader: ?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRealTime: fn(
            self: *const IWMWriterSink,
            pfRealTime: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AllocateDataUnit: fn(
            self: *const IWMWriterSink,
            cbDataUnit: u32,
            ppDataUnit: ?*?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDataUnit: fn(
            self: *const IWMWriterSink,
            pDataUnit: ?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnEndWriting: fn(
            self: *const IWMWriterSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterSink_OnHeader(self: *const T, pHeader: ?*INSSBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterSink.VTable, self.vtable).OnHeader(@ptrCast(*const IWMWriterSink, self), pHeader);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterSink_IsRealTime(self: *const T, pfRealTime: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterSink.VTable, self.vtable).IsRealTime(@ptrCast(*const IWMWriterSink, self), pfRealTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterSink_AllocateDataUnit(self: *const T, cbDataUnit: u32, ppDataUnit: ?*?*INSSBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterSink.VTable, self.vtable).AllocateDataUnit(@ptrCast(*const IWMWriterSink, self), cbDataUnit, ppDataUnit);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterSink_OnDataUnit(self: *const T, pDataUnit: ?*INSSBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterSink.VTable, self.vtable).OnDataUnit(@ptrCast(*const IWMWriterSink, self), pDataUnit);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterSink_OnEndWriting(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterSink.VTable, self.vtable).OnEndWriting(@ptrCast(*const IWMWriterSink, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMRegisterCallback_Value = @import("../zig.zig").Guid.initString("cf4b1f99-4de2-4e49-a363-252740d99bc1");
pub const IID_IWMRegisterCallback = &IID_IWMRegisterCallback_Value;
pub const IWMRegisterCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: fn(
            self: *const IWMRegisterCallback,
            pCallback: ?*IWMStatusCallback,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: fn(
            self: *const IWMRegisterCallback,
            pCallback: ?*IWMStatusCallback,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMRegisterCallback_Advise(self: *const T, pCallback: ?*IWMStatusCallback, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMRegisterCallback.VTable, self.vtable).Advise(@ptrCast(*const IWMRegisterCallback, self), pCallback, pvContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMRegisterCallback_Unadvise(self: *const T, pCallback: ?*IWMStatusCallback, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMRegisterCallback.VTable, self.vtable).Unadvise(@ptrCast(*const IWMRegisterCallback, self), pCallback, pvContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterFileSink_Value = @import("../zig.zig").Guid.initString("96406be5-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMWriterFileSink = &IID_IWMWriterFileSink_Value;
pub const IWMWriterFileSink = extern struct {
    pub const VTable = extern struct {
        base: IWMWriterSink.VTable,
        Open: fn(
            self: *const IWMWriterFileSink,
            pwszFilename: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMWriterSink.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterFileSink_Open(self: *const T, pwszFilename: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterFileSink.VTable, self.vtable).Open(@ptrCast(*const IWMWriterFileSink, self), pwszFilename);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterFileSink2_Value = @import("../zig.zig").Guid.initString("14282ba7-4aef-4205-8ce5-c229035a05bc");
pub const IID_IWMWriterFileSink2 = &IID_IWMWriterFileSink2_Value;
pub const IWMWriterFileSink2 = extern struct {
    pub const VTable = extern struct {
        base: IWMWriterFileSink.VTable,
        Start: fn(
            self: *const IWMWriterFileSink2,
            cnsStartTime: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: fn(
            self: *const IWMWriterFileSink2,
            cnsStopTime: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsStopped: fn(
            self: *const IWMWriterFileSink2,
            pfStopped: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileDuration: fn(
            self: *const IWMWriterFileSink2,
            pcnsDuration: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileSize: fn(
            self: *const IWMWriterFileSink2,
            pcbFile: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IWMWriterFileSink2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsClosed: fn(
            self: *const IWMWriterFileSink2,
            pfClosed: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMWriterFileSink.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterFileSink2_Start(self: *const T, cnsStartTime: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterFileSink2.VTable, self.vtable).Start(@ptrCast(*const IWMWriterFileSink2, self), cnsStartTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterFileSink2_Stop(self: *const T, cnsStopTime: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterFileSink2.VTable, self.vtable).Stop(@ptrCast(*const IWMWriterFileSink2, self), cnsStopTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterFileSink2_IsStopped(self: *const T, pfStopped: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterFileSink2.VTable, self.vtable).IsStopped(@ptrCast(*const IWMWriterFileSink2, self), pfStopped);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterFileSink2_GetFileDuration(self: *const T, pcnsDuration: ?*u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterFileSink2.VTable, self.vtable).GetFileDuration(@ptrCast(*const IWMWriterFileSink2, self), pcnsDuration);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterFileSink2_GetFileSize(self: *const T, pcbFile: ?*u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterFileSink2.VTable, self.vtable).GetFileSize(@ptrCast(*const IWMWriterFileSink2, self), pcbFile);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterFileSink2_Close(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterFileSink2.VTable, self.vtable).Close(@ptrCast(*const IWMWriterFileSink2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterFileSink2_IsClosed(self: *const T, pfClosed: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterFileSink2.VTable, self.vtable).IsClosed(@ptrCast(*const IWMWriterFileSink2, self), pfClosed);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterFileSink3_Value = @import("../zig.zig").Guid.initString("3fea4feb-2945-47a7-a1dd-c53a8fc4c45c");
pub const IID_IWMWriterFileSink3 = &IID_IWMWriterFileSink3_Value;
pub const IWMWriterFileSink3 = extern struct {
    pub const VTable = extern struct {
        base: IWMWriterFileSink2.VTable,
        SetAutoIndexing: fn(
            self: *const IWMWriterFileSink3,
            fDoAutoIndexing: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutoIndexing: fn(
            self: *const IWMWriterFileSink3,
            pfAutoIndexing: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetControlStream: fn(
            self: *const IWMWriterFileSink3,
            wStreamNumber: u16,
            fShouldControlStartAndStop: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMode: fn(
            self: *const IWMWriterFileSink3,
            pdwFileSinkMode: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDataUnitEx: fn(
            self: *const IWMWriterFileSink3,
            pFileSinkDataUnit: ?*WMT_FILESINK_DATA_UNIT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUnbufferedIO: fn(
            self: *const IWMWriterFileSink3,
            fUnbufferedIO: BOOL,
            fRestrictMemUsage: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUnbufferedIO: fn(
            self: *const IWMWriterFileSink3,
            pfUnbufferedIO: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompleteOperations: fn(
            self: *const IWMWriterFileSink3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMWriterFileSink2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterFileSink3_SetAutoIndexing(self: *const T, fDoAutoIndexing: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterFileSink3.VTable, self.vtable).SetAutoIndexing(@ptrCast(*const IWMWriterFileSink3, self), fDoAutoIndexing);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterFileSink3_GetAutoIndexing(self: *const T, pfAutoIndexing: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterFileSink3.VTable, self.vtable).GetAutoIndexing(@ptrCast(*const IWMWriterFileSink3, self), pfAutoIndexing);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterFileSink3_SetControlStream(self: *const T, wStreamNumber: u16, fShouldControlStartAndStop: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterFileSink3.VTable, self.vtable).SetControlStream(@ptrCast(*const IWMWriterFileSink3, self), wStreamNumber, fShouldControlStartAndStop);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterFileSink3_GetMode(self: *const T, pdwFileSinkMode: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterFileSink3.VTable, self.vtable).GetMode(@ptrCast(*const IWMWriterFileSink3, self), pdwFileSinkMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterFileSink3_OnDataUnitEx(self: *const T, pFileSinkDataUnit: ?*WMT_FILESINK_DATA_UNIT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterFileSink3.VTable, self.vtable).OnDataUnitEx(@ptrCast(*const IWMWriterFileSink3, self), pFileSinkDataUnit);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterFileSink3_SetUnbufferedIO(self: *const T, fUnbufferedIO: BOOL, fRestrictMemUsage: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterFileSink3.VTable, self.vtable).SetUnbufferedIO(@ptrCast(*const IWMWriterFileSink3, self), fUnbufferedIO, fRestrictMemUsage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterFileSink3_GetUnbufferedIO(self: *const T, pfUnbufferedIO: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterFileSink3.VTable, self.vtable).GetUnbufferedIO(@ptrCast(*const IWMWriterFileSink3, self), pfUnbufferedIO);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterFileSink3_CompleteOperations(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterFileSink3.VTable, self.vtable).CompleteOperations(@ptrCast(*const IWMWriterFileSink3, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterNetworkSink_Value = @import("../zig.zig").Guid.initString("96406be7-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMWriterNetworkSink = &IID_IWMWriterNetworkSink_Value;
pub const IWMWriterNetworkSink = extern struct {
    pub const VTable = extern struct {
        base: IWMWriterSink.VTable,
        SetMaximumClients: fn(
            self: *const IWMWriterNetworkSink,
            dwMaxClients: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaximumClients: fn(
            self: *const IWMWriterNetworkSink,
            pdwMaxClients: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNetworkProtocol: fn(
            self: *const IWMWriterNetworkSink,
            protocol: WMT_NET_PROTOCOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetworkProtocol: fn(
            self: *const IWMWriterNetworkSink,
            pProtocol: ?*WMT_NET_PROTOCOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHostURL: fn(
            self: *const IWMWriterNetworkSink,
            pwszURL: ?PWSTR,
            pcchURL: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: fn(
            self: *const IWMWriterNetworkSink,
            pdwPortNum: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: fn(
            self: *const IWMWriterNetworkSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IWMWriterNetworkSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMWriterSink.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterNetworkSink_SetMaximumClients(self: *const T, dwMaxClients: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterNetworkSink.VTable, self.vtable).SetMaximumClients(@ptrCast(*const IWMWriterNetworkSink, self), dwMaxClients);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterNetworkSink_GetMaximumClients(self: *const T, pdwMaxClients: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterNetworkSink.VTable, self.vtable).GetMaximumClients(@ptrCast(*const IWMWriterNetworkSink, self), pdwMaxClients);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterNetworkSink_SetNetworkProtocol(self: *const T, protocol: WMT_NET_PROTOCOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterNetworkSink.VTable, self.vtable).SetNetworkProtocol(@ptrCast(*const IWMWriterNetworkSink, self), protocol);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterNetworkSink_GetNetworkProtocol(self: *const T, pProtocol: ?*WMT_NET_PROTOCOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterNetworkSink.VTable, self.vtable).GetNetworkProtocol(@ptrCast(*const IWMWriterNetworkSink, self), pProtocol);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterNetworkSink_GetHostURL(self: *const T, pwszURL: ?PWSTR, pcchURL: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterNetworkSink.VTable, self.vtable).GetHostURL(@ptrCast(*const IWMWriterNetworkSink, self), pwszURL, pcchURL);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterNetworkSink_Open(self: *const T, pdwPortNum: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterNetworkSink.VTable, self.vtable).Open(@ptrCast(*const IWMWriterNetworkSink, self), pdwPortNum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterNetworkSink_Disconnect(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterNetworkSink.VTable, self.vtable).Disconnect(@ptrCast(*const IWMWriterNetworkSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterNetworkSink_Close(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterNetworkSink.VTable, self.vtable).Close(@ptrCast(*const IWMWriterNetworkSink, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMClientConnections_Value = @import("../zig.zig").Guid.initString("73c66010-a299-41df-b1f0-ccf03b09c1c6");
pub const IID_IWMClientConnections = &IID_IWMClientConnections_Value;
pub const IWMClientConnections = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetClientCount: fn(
            self: *const IWMClientConnections,
            pcClients: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClientProperties: fn(
            self: *const IWMClientConnections,
            dwClientNum: u32,
            pClientProperties: ?*WM_CLIENT_PROPERTIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMClientConnections_GetClientCount(self: *const T, pcClients: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMClientConnections.VTable, self.vtable).GetClientCount(@ptrCast(*const IWMClientConnections, self), pcClients);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMClientConnections_GetClientProperties(self: *const T, dwClientNum: u32, pClientProperties: ?*WM_CLIENT_PROPERTIES) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMClientConnections.VTable, self.vtable).GetClientProperties(@ptrCast(*const IWMClientConnections, self), dwClientNum, pClientProperties);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMClientConnections2_Value = @import("../zig.zig").Guid.initString("4091571e-4701-4593-bb3d-d5f5f0c74246");
pub const IID_IWMClientConnections2 = &IID_IWMClientConnections2_Value;
pub const IWMClientConnections2 = extern struct {
    pub const VTable = extern struct {
        base: IWMClientConnections.VTable,
        GetClientInfo: fn(
            self: *const IWMClientConnections2,
            dwClientNum: u32,
            pwszNetworkAddress: [*:0]u16,
            pcchNetworkAddress: ?*u32,
            pwszPort: [*:0]u16,
            pcchPort: ?*u32,
            pwszDNSName: [*:0]u16,
            pcchDNSName: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMClientConnections.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMClientConnections2_GetClientInfo(self: *const T, dwClientNum: u32, pwszNetworkAddress: [*:0]u16, pcchNetworkAddress: ?*u32, pwszPort: [*:0]u16, pcchPort: ?*u32, pwszDNSName: [*:0]u16, pcchDNSName: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMClientConnections2.VTable, self.vtable).GetClientInfo(@ptrCast(*const IWMClientConnections2, self), dwClientNum, pwszNetworkAddress, pcchNetworkAddress, pwszPort, pcchPort, pwszDNSName, pcchDNSName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderAdvanced_Value = @import("../zig.zig").Guid.initString("96406bea-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMReaderAdvanced = &IID_IWMReaderAdvanced_Value;
pub const IWMReaderAdvanced = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetUserProvidedClock: fn(
            self: *const IWMReaderAdvanced,
            fUserClock: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserProvidedClock: fn(
            self: *const IWMReaderAdvanced,
            pfUserClock: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeliverTime: fn(
            self: *const IWMReaderAdvanced,
            cnsTime: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetManualStreamSelection: fn(
            self: *const IWMReaderAdvanced,
            fSelection: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetManualStreamSelection: fn(
            self: *const IWMReaderAdvanced,
            pfSelection: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStreamsSelected: fn(
            self: *const IWMReaderAdvanced,
            cStreamCount: u16,
            pwStreamNumbers: ?*u16,
            pSelections: ?*WMT_STREAM_SELECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamSelected: fn(
            self: *const IWMReaderAdvanced,
            wStreamNum: u16,
            pSelection: ?*WMT_STREAM_SELECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReceiveSelectionCallbacks: fn(
            self: *const IWMReaderAdvanced,
            fGetCallbacks: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReceiveSelectionCallbacks: fn(
            self: *const IWMReaderAdvanced,
            pfGetCallbacks: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReceiveStreamSamples: fn(
            self: *const IWMReaderAdvanced,
            wStreamNum: u16,
            fReceiveStreamSamples: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReceiveStreamSamples: fn(
            self: *const IWMReaderAdvanced,
            wStreamNum: u16,
            pfReceiveStreamSamples: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllocateForOutput: fn(
            self: *const IWMReaderAdvanced,
            dwOutputNum: u32,
            fAllocate: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllocateForOutput: fn(
            self: *const IWMReaderAdvanced,
            dwOutputNum: u32,
            pfAllocate: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllocateForStream: fn(
            self: *const IWMReaderAdvanced,
            wStreamNum: u16,
            fAllocate: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllocateForStream: fn(
            self: *const IWMReaderAdvanced,
            dwSreamNum: u16,
            pfAllocate: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatistics: fn(
            self: *const IWMReaderAdvanced,
            pStatistics: ?*WM_READER_STATISTICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClientInfo: fn(
            self: *const IWMReaderAdvanced,
            pClientInfo: ?*WM_READER_CLIENTINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxOutputSampleSize: fn(
            self: *const IWMReaderAdvanced,
            dwOutput: u32,
            pcbMax: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxStreamSampleSize: fn(
            self: *const IWMReaderAdvanced,
            wStream: u16,
            pcbMax: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyLateDelivery: fn(
            self: *const IWMReaderAdvanced,
            cnsLateness: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_SetUserProvidedClock(self: *const T, fUserClock: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).SetUserProvidedClock(@ptrCast(*const IWMReaderAdvanced, self), fUserClock);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_GetUserProvidedClock(self: *const T, pfUserClock: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).GetUserProvidedClock(@ptrCast(*const IWMReaderAdvanced, self), pfUserClock);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_DeliverTime(self: *const T, cnsTime: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).DeliverTime(@ptrCast(*const IWMReaderAdvanced, self), cnsTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_SetManualStreamSelection(self: *const T, fSelection: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).SetManualStreamSelection(@ptrCast(*const IWMReaderAdvanced, self), fSelection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_GetManualStreamSelection(self: *const T, pfSelection: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).GetManualStreamSelection(@ptrCast(*const IWMReaderAdvanced, self), pfSelection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_SetStreamsSelected(self: *const T, cStreamCount: u16, pwStreamNumbers: ?*u16, pSelections: ?*WMT_STREAM_SELECTION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).SetStreamsSelected(@ptrCast(*const IWMReaderAdvanced, self), cStreamCount, pwStreamNumbers, pSelections);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_GetStreamSelected(self: *const T, wStreamNum: u16, pSelection: ?*WMT_STREAM_SELECTION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).GetStreamSelected(@ptrCast(*const IWMReaderAdvanced, self), wStreamNum, pSelection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_SetReceiveSelectionCallbacks(self: *const T, fGetCallbacks: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).SetReceiveSelectionCallbacks(@ptrCast(*const IWMReaderAdvanced, self), fGetCallbacks);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_GetReceiveSelectionCallbacks(self: *const T, pfGetCallbacks: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).GetReceiveSelectionCallbacks(@ptrCast(*const IWMReaderAdvanced, self), pfGetCallbacks);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_SetReceiveStreamSamples(self: *const T, wStreamNum: u16, fReceiveStreamSamples: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).SetReceiveStreamSamples(@ptrCast(*const IWMReaderAdvanced, self), wStreamNum, fReceiveStreamSamples);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_GetReceiveStreamSamples(self: *const T, wStreamNum: u16, pfReceiveStreamSamples: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).GetReceiveStreamSamples(@ptrCast(*const IWMReaderAdvanced, self), wStreamNum, pfReceiveStreamSamples);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_SetAllocateForOutput(self: *const T, dwOutputNum: u32, fAllocate: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).SetAllocateForOutput(@ptrCast(*const IWMReaderAdvanced, self), dwOutputNum, fAllocate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_GetAllocateForOutput(self: *const T, dwOutputNum: u32, pfAllocate: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).GetAllocateForOutput(@ptrCast(*const IWMReaderAdvanced, self), dwOutputNum, pfAllocate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_SetAllocateForStream(self: *const T, wStreamNum: u16, fAllocate: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).SetAllocateForStream(@ptrCast(*const IWMReaderAdvanced, self), wStreamNum, fAllocate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_GetAllocateForStream(self: *const T, dwSreamNum: u16, pfAllocate: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).GetAllocateForStream(@ptrCast(*const IWMReaderAdvanced, self), dwSreamNum, pfAllocate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_GetStatistics(self: *const T, pStatistics: ?*WM_READER_STATISTICS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).GetStatistics(@ptrCast(*const IWMReaderAdvanced, self), pStatistics);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_SetClientInfo(self: *const T, pClientInfo: ?*WM_READER_CLIENTINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).SetClientInfo(@ptrCast(*const IWMReaderAdvanced, self), pClientInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_GetMaxOutputSampleSize(self: *const T, dwOutput: u32, pcbMax: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).GetMaxOutputSampleSize(@ptrCast(*const IWMReaderAdvanced, self), dwOutput, pcbMax);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_GetMaxStreamSampleSize(self: *const T, wStream: u16, pcbMax: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).GetMaxStreamSampleSize(@ptrCast(*const IWMReaderAdvanced, self), wStream, pcbMax);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced_NotifyLateDelivery(self: *const T, cnsLateness: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced.VTable, self.vtable).NotifyLateDelivery(@ptrCast(*const IWMReaderAdvanced, self), cnsLateness);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderAdvanced2_Value = @import("../zig.zig").Guid.initString("ae14a945-b90c-4d0d-9127-80d665f7d73e");
pub const IID_IWMReaderAdvanced2 = &IID_IWMReaderAdvanced2_Value;
pub const IWMReaderAdvanced2 = extern struct {
    pub const VTable = extern struct {
        base: IWMReaderAdvanced.VTable,
        SetPlayMode: fn(
            self: *const IWMReaderAdvanced2,
            Mode: WMT_PLAY_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPlayMode: fn(
            self: *const IWMReaderAdvanced2,
            pMode: ?*WMT_PLAY_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBufferProgress: fn(
            self: *const IWMReaderAdvanced2,
            pdwPercent: ?*u32,
            pcnsBuffering: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDownloadProgress: fn(
            self: *const IWMReaderAdvanced2,
            pdwPercent: ?*u32,
            pqwBytesDownloaded: ?*u64,
            pcnsDownload: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSaveAsProgress: fn(
            self: *const IWMReaderAdvanced2,
            pdwPercent: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveFileAs: fn(
            self: *const IWMReaderAdvanced2,
            pwszFilename: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProtocolName: fn(
            self: *const IWMReaderAdvanced2,
            pwszProtocol: [*:0]u16,
            pcchProtocol: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartAtMarker: fn(
            self: *const IWMReaderAdvanced2,
            wMarkerIndex: u16,
            cnsDuration: u64,
            fRate: f32,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputSetting: fn(
            self: *const IWMReaderAdvanced2,
            dwOutputNum: u32,
            pszName: ?[*:0]const u16,
            pType: ?*WMT_ATTR_DATATYPE,
            pValue: [*:0]u8,
            pcbLength: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputSetting: fn(
            self: *const IWMReaderAdvanced2,
            dwOutputNum: u32,
            pszName: ?[*:0]const u16,
            Type: WMT_ATTR_DATATYPE,
            pValue: [*:0]const u8,
            cbLength: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Preroll: fn(
            self: *const IWMReaderAdvanced2,
            cnsStart: u64,
            cnsDuration: u64,
            fRate: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLogClientID: fn(
            self: *const IWMReaderAdvanced2,
            fLogClientID: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLogClientID: fn(
            self: *const IWMReaderAdvanced2,
            pfLogClientID: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopBuffering: fn(
            self: *const IWMReaderAdvanced2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenStream: fn(
            self: *const IWMReaderAdvanced2,
            pStream: ?*IStream,
            pCallback: ?*IWMReaderCallback,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMReaderAdvanced.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced2_SetPlayMode(self: *const T, Mode: WMT_PLAY_MODE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced2.VTable, self.vtable).SetPlayMode(@ptrCast(*const IWMReaderAdvanced2, self), Mode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced2_GetPlayMode(self: *const T, pMode: ?*WMT_PLAY_MODE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced2.VTable, self.vtable).GetPlayMode(@ptrCast(*const IWMReaderAdvanced2, self), pMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced2_GetBufferProgress(self: *const T, pdwPercent: ?*u32, pcnsBuffering: ?*u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced2.VTable, self.vtable).GetBufferProgress(@ptrCast(*const IWMReaderAdvanced2, self), pdwPercent, pcnsBuffering);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced2_GetDownloadProgress(self: *const T, pdwPercent: ?*u32, pqwBytesDownloaded: ?*u64, pcnsDownload: ?*u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced2.VTable, self.vtable).GetDownloadProgress(@ptrCast(*const IWMReaderAdvanced2, self), pdwPercent, pqwBytesDownloaded, pcnsDownload);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced2_GetSaveAsProgress(self: *const T, pdwPercent: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced2.VTable, self.vtable).GetSaveAsProgress(@ptrCast(*const IWMReaderAdvanced2, self), pdwPercent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced2_SaveFileAs(self: *const T, pwszFilename: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced2.VTable, self.vtable).SaveFileAs(@ptrCast(*const IWMReaderAdvanced2, self), pwszFilename);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced2_GetProtocolName(self: *const T, pwszProtocol: [*:0]u16, pcchProtocol: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced2.VTable, self.vtable).GetProtocolName(@ptrCast(*const IWMReaderAdvanced2, self), pwszProtocol, pcchProtocol);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced2_StartAtMarker(self: *const T, wMarkerIndex: u16, cnsDuration: u64, fRate: f32, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced2.VTable, self.vtable).StartAtMarker(@ptrCast(*const IWMReaderAdvanced2, self), wMarkerIndex, cnsDuration, fRate, pvContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced2_GetOutputSetting(self: *const T, dwOutputNum: u32, pszName: ?[*:0]const u16, pType: ?*WMT_ATTR_DATATYPE, pValue: [*:0]u8, pcbLength: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced2.VTable, self.vtable).GetOutputSetting(@ptrCast(*const IWMReaderAdvanced2, self), dwOutputNum, pszName, pType, pValue, pcbLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced2_SetOutputSetting(self: *const T, dwOutputNum: u32, pszName: ?[*:0]const u16, Type: WMT_ATTR_DATATYPE, pValue: [*:0]const u8, cbLength: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced2.VTable, self.vtable).SetOutputSetting(@ptrCast(*const IWMReaderAdvanced2, self), dwOutputNum, pszName, Type, pValue, cbLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced2_Preroll(self: *const T, cnsStart: u64, cnsDuration: u64, fRate: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced2.VTable, self.vtable).Preroll(@ptrCast(*const IWMReaderAdvanced2, self), cnsStart, cnsDuration, fRate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced2_SetLogClientID(self: *const T, fLogClientID: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced2.VTable, self.vtable).SetLogClientID(@ptrCast(*const IWMReaderAdvanced2, self), fLogClientID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced2_GetLogClientID(self: *const T, pfLogClientID: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced2.VTable, self.vtable).GetLogClientID(@ptrCast(*const IWMReaderAdvanced2, self), pfLogClientID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced2_StopBuffering(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced2.VTable, self.vtable).StopBuffering(@ptrCast(*const IWMReaderAdvanced2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced2_OpenStream(self: *const T, pStream: ?*IStream, pCallback: ?*IWMReaderCallback, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced2.VTable, self.vtable).OpenStream(@ptrCast(*const IWMReaderAdvanced2, self), pStream, pCallback, pvContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderAdvanced3_Value = @import("../zig.zig").Guid.initString("5dc0674b-f04b-4a4e-9f2a-b1afde2c8100");
pub const IID_IWMReaderAdvanced3 = &IID_IWMReaderAdvanced3_Value;
pub const IWMReaderAdvanced3 = extern struct {
    pub const VTable = extern struct {
        base: IWMReaderAdvanced2.VTable,
        StopNetStreaming: fn(
            self: *const IWMReaderAdvanced3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartAtPosition: fn(
            self: *const IWMReaderAdvanced3,
            wStreamNum: u16,
            pvOffsetStart: ?*anyopaque,
            pvDuration: ?*anyopaque,
            dwOffsetFormat: WMT_OFFSET_FORMAT,
            fRate: f32,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMReaderAdvanced2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced3_StopNetStreaming(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced3.VTable, self.vtable).StopNetStreaming(@ptrCast(*const IWMReaderAdvanced3, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced3_StartAtPosition(self: *const T, wStreamNum: u16, pvOffsetStart: ?*anyopaque, pvDuration: ?*anyopaque, dwOffsetFormat: WMT_OFFSET_FORMAT, fRate: f32, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced3.VTable, self.vtable).StartAtPosition(@ptrCast(*const IWMReaderAdvanced3, self), wStreamNum, pvOffsetStart, pvDuration, dwOffsetFormat, fRate, pvContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderAdvanced4_Value = @import("../zig.zig").Guid.initString("945a76a2-12ae-4d48-bd3c-cd1d90399b85");
pub const IID_IWMReaderAdvanced4 = &IID_IWMReaderAdvanced4_Value;
pub const IWMReaderAdvanced4 = extern struct {
    pub const VTable = extern struct {
        base: IWMReaderAdvanced3.VTable,
        GetLanguageCount: fn(
            self: *const IWMReaderAdvanced4,
            dwOutputNum: u32,
            pwLanguageCount: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLanguage: fn(
            self: *const IWMReaderAdvanced4,
            dwOutputNum: u32,
            wLanguage: u16,
            pwszLanguageString: [*:0]u16,
            pcchLanguageStringLength: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxSpeedFactor: fn(
            self: *const IWMReaderAdvanced4,
            pdblFactor: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsUsingFastCache: fn(
            self: *const IWMReaderAdvanced4,
            pfUsingFastCache: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddLogParam: fn(
            self: *const IWMReaderAdvanced4,
            wszNameSpace: ?[*:0]const u16,
            wszName: ?[*:0]const u16,
            wszValue: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendLogParams: fn(
            self: *const IWMReaderAdvanced4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanSaveFileAs: fn(
            self: *const IWMReaderAdvanced4,
            pfCanSave: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelSaveFileAs: fn(
            self: *const IWMReaderAdvanced4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetURL: fn(
            self: *const IWMReaderAdvanced4,
            pwszURL: [*:0]u16,
            pcchURL: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMReaderAdvanced3.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced4_GetLanguageCount(self: *const T, dwOutputNum: u32, pwLanguageCount: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced4.VTable, self.vtable).GetLanguageCount(@ptrCast(*const IWMReaderAdvanced4, self), dwOutputNum, pwLanguageCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced4_GetLanguage(self: *const T, dwOutputNum: u32, wLanguage: u16, pwszLanguageString: [*:0]u16, pcchLanguageStringLength: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced4.VTable, self.vtable).GetLanguage(@ptrCast(*const IWMReaderAdvanced4, self), dwOutputNum, wLanguage, pwszLanguageString, pcchLanguageStringLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced4_GetMaxSpeedFactor(self: *const T, pdblFactor: ?*f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced4.VTable, self.vtable).GetMaxSpeedFactor(@ptrCast(*const IWMReaderAdvanced4, self), pdblFactor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced4_IsUsingFastCache(self: *const T, pfUsingFastCache: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced4.VTable, self.vtable).IsUsingFastCache(@ptrCast(*const IWMReaderAdvanced4, self), pfUsingFastCache);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced4_AddLogParam(self: *const T, wszNameSpace: ?[*:0]const u16, wszName: ?[*:0]const u16, wszValue: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced4.VTable, self.vtable).AddLogParam(@ptrCast(*const IWMReaderAdvanced4, self), wszNameSpace, wszName, wszValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced4_SendLogParams(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced4.VTable, self.vtable).SendLogParams(@ptrCast(*const IWMReaderAdvanced4, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced4_CanSaveFileAs(self: *const T, pfCanSave: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced4.VTable, self.vtable).CanSaveFileAs(@ptrCast(*const IWMReaderAdvanced4, self), pfCanSave);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced4_CancelSaveFileAs(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced4.VTable, self.vtable).CancelSaveFileAs(@ptrCast(*const IWMReaderAdvanced4, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced4_GetURL(self: *const T, pwszURL: [*:0]u16, pcchURL: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced4.VTable, self.vtable).GetURL(@ptrCast(*const IWMReaderAdvanced4, self), pwszURL, pcchURL);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderAdvanced5_Value = @import("../zig.zig").Guid.initString("24c44db0-55d1-49ae-a5cc-f13815e36363");
pub const IID_IWMReaderAdvanced5 = &IID_IWMReaderAdvanced5_Value;
pub const IWMReaderAdvanced5 = extern struct {
    pub const VTable = extern struct {
        base: IWMReaderAdvanced4.VTable,
        SetPlayerHook: fn(
            self: *const IWMReaderAdvanced5,
            dwOutputNum: u32,
            pHook: ?*IWMPlayerHook,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMReaderAdvanced4.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced5_SetPlayerHook(self: *const T, dwOutputNum: u32, pHook: ?*IWMPlayerHook) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced5.VTable, self.vtable).SetPlayerHook(@ptrCast(*const IWMReaderAdvanced5, self), dwOutputNum, pHook);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderAdvanced6_Value = @import("../zig.zig").Guid.initString("18a2e7f8-428f-4acd-8a00-e64639bc93de");
pub const IID_IWMReaderAdvanced6 = &IID_IWMReaderAdvanced6_Value;
pub const IWMReaderAdvanced6 = extern struct {
    pub const VTable = extern struct {
        base: IWMReaderAdvanced5.VTable,
        SetProtectStreamSamples: fn(
            self: *const IWMReaderAdvanced6,
            pbCertificate: [*:0]u8,
            cbCertificate: u32,
            dwCertificateType: u32,
            dwFlags: u32,
            pbInitializationVector: [*:0]u8,
            pcbInitializationVector: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMReaderAdvanced5.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAdvanced6_SetProtectStreamSamples(self: *const T, pbCertificate: [*:0]u8, cbCertificate: u32, dwCertificateType: u32, dwFlags: u32, pbInitializationVector: [*:0]u8, pcbInitializationVector: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAdvanced6.VTable, self.vtable).SetProtectStreamSamples(@ptrCast(*const IWMReaderAdvanced6, self), pbCertificate, cbCertificate, dwCertificateType, dwFlags, pbInitializationVector, pcbInitializationVector);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPlayerHook_Value = @import("../zig.zig").Guid.initString("e5b7ca9a-0f1c-4f66-9002-74ec50d8b304");
pub const IID_IWMPlayerHook = &IID_IWMPlayerHook_Value;
pub const IWMPlayerHook = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PreDecode: fn(
            self: *const IWMPlayerHook,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMPlayerHook_PreDecode(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMPlayerHook.VTable, self.vtable).PreDecode(@ptrCast(*const IWMPlayerHook, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderAllocatorEx_Value = @import("../zig.zig").Guid.initString("9f762fa7-a22e-428d-93c9-ac82f3aafe5a");
pub const IID_IWMReaderAllocatorEx = &IID_IWMReaderAllocatorEx_Value;
pub const IWMReaderAllocatorEx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AllocateForStreamEx: fn(
            self: *const IWMReaderAllocatorEx,
            wStreamNum: u16,
            cbBuffer: u32,
            ppBuffer: ?*?*INSSBuffer,
            dwFlags: u32,
            cnsSampleTime: u64,
            cnsSampleDuration: u64,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AllocateForOutputEx: fn(
            self: *const IWMReaderAllocatorEx,
            dwOutputNum: u32,
            cbBuffer: u32,
            ppBuffer: ?*?*INSSBuffer,
            dwFlags: u32,
            cnsSampleTime: u64,
            cnsSampleDuration: u64,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAllocatorEx_AllocateForStreamEx(self: *const T, wStreamNum: u16, cbBuffer: u32, ppBuffer: ?*?*INSSBuffer, dwFlags: u32, cnsSampleTime: u64, cnsSampleDuration: u64, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAllocatorEx.VTable, self.vtable).AllocateForStreamEx(@ptrCast(*const IWMReaderAllocatorEx, self), wStreamNum, cbBuffer, ppBuffer, dwFlags, cnsSampleTime, cnsSampleDuration, pvContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAllocatorEx_AllocateForOutputEx(self: *const T, dwOutputNum: u32, cbBuffer: u32, ppBuffer: ?*?*INSSBuffer, dwFlags: u32, cnsSampleTime: u64, cnsSampleDuration: u64, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAllocatorEx.VTable, self.vtable).AllocateForOutputEx(@ptrCast(*const IWMReaderAllocatorEx, self), dwOutputNum, cbBuffer, ppBuffer, dwFlags, cnsSampleTime, cnsSampleDuration, pvContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderTypeNegotiation_Value = @import("../zig.zig").Guid.initString("fdbe5592-81a1-41ea-93bd-735cad1adc05");
pub const IID_IWMReaderTypeNegotiation = &IID_IWMReaderTypeNegotiation_Value;
pub const IWMReaderTypeNegotiation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TryOutputProps: fn(
            self: *const IWMReaderTypeNegotiation,
            dwOutputNum: u32,
            pOutput: ?*IWMOutputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderTypeNegotiation_TryOutputProps(self: *const T, dwOutputNum: u32, pOutput: ?*IWMOutputMediaProps) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderTypeNegotiation.VTable, self.vtable).TryOutputProps(@ptrCast(*const IWMReaderTypeNegotiation, self), dwOutputNum, pOutput);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderCallbackAdvanced_Value = @import("../zig.zig").Guid.initString("96406beb-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMReaderCallbackAdvanced = &IID_IWMReaderCallbackAdvanced_Value;
pub const IWMReaderCallbackAdvanced = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnStreamSample: fn(
            self: *const IWMReaderCallbackAdvanced,
            wStreamNum: u16,
            cnsSampleTime: u64,
            cnsSampleDuration: u64,
            dwFlags: u32,
            pSample: ?*INSSBuffer,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTime: fn(
            self: *const IWMReaderCallbackAdvanced,
            cnsCurrentTime: u64,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnStreamSelection: fn(
            self: *const IWMReaderCallbackAdvanced,
            wStreamCount: u16,
            pStreamNumbers: ?*u16,
            pSelections: ?*WMT_STREAM_SELECTION,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOutputPropsChanged: fn(
            self: *const IWMReaderCallbackAdvanced,
            dwOutputNum: u32,
            pMediaType: ?*WM_MEDIA_TYPE,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AllocateForStream: fn(
            self: *const IWMReaderCallbackAdvanced,
            wStreamNum: u16,
            cbBuffer: u32,
            ppBuffer: ?*?*INSSBuffer,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AllocateForOutput: fn(
            self: *const IWMReaderCallbackAdvanced,
            dwOutputNum: u32,
            cbBuffer: u32,
            ppBuffer: ?*?*INSSBuffer,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderCallbackAdvanced_OnStreamSample(self: *const T, wStreamNum: u16, cnsSampleTime: u64, cnsSampleDuration: u64, dwFlags: u32, pSample: ?*INSSBuffer, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderCallbackAdvanced.VTable, self.vtable).OnStreamSample(@ptrCast(*const IWMReaderCallbackAdvanced, self), wStreamNum, cnsSampleTime, cnsSampleDuration, dwFlags, pSample, pvContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderCallbackAdvanced_OnTime(self: *const T, cnsCurrentTime: u64, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderCallbackAdvanced.VTable, self.vtable).OnTime(@ptrCast(*const IWMReaderCallbackAdvanced, self), cnsCurrentTime, pvContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderCallbackAdvanced_OnStreamSelection(self: *const T, wStreamCount: u16, pStreamNumbers: ?*u16, pSelections: ?*WMT_STREAM_SELECTION, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderCallbackAdvanced.VTable, self.vtable).OnStreamSelection(@ptrCast(*const IWMReaderCallbackAdvanced, self), wStreamCount, pStreamNumbers, pSelections, pvContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderCallbackAdvanced_OnOutputPropsChanged(self: *const T, dwOutputNum: u32, pMediaType: ?*WM_MEDIA_TYPE, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderCallbackAdvanced.VTable, self.vtable).OnOutputPropsChanged(@ptrCast(*const IWMReaderCallbackAdvanced, self), dwOutputNum, pMediaType, pvContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderCallbackAdvanced_AllocateForStream(self: *const T, wStreamNum: u16, cbBuffer: u32, ppBuffer: ?*?*INSSBuffer, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderCallbackAdvanced.VTable, self.vtable).AllocateForStream(@ptrCast(*const IWMReaderCallbackAdvanced, self), wStreamNum, cbBuffer, ppBuffer, pvContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderCallbackAdvanced_AllocateForOutput(self: *const T, dwOutputNum: u32, cbBuffer: u32, ppBuffer: ?*?*INSSBuffer, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderCallbackAdvanced.VTable, self.vtable).AllocateForOutput(@ptrCast(*const IWMReaderCallbackAdvanced, self), dwOutputNum, cbBuffer, ppBuffer, pvContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWMDRMReader_Value = @import("../zig.zig").Guid.initString("d2827540-3ee7-432c-b14c-dc17f085d3b3");
pub const IID_IWMDRMReader = &IID_IWMDRMReader_Value;
pub const IWMDRMReader = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AcquireLicense: fn(
            self: *const IWMDRMReader,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelLicenseAcquisition: fn(
            self: *const IWMDRMReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Individualize: fn(
            self: *const IWMDRMReader,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelIndividualization: fn(
            self: *const IWMDRMReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MonitorLicenseAcquisition: fn(
            self: *const IWMDRMReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelMonitorLicenseAcquisition: fn(
            self: *const IWMDRMReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDRMProperty: fn(
            self: *const IWMDRMReader,
            pwstrName: ?[*:0]const u16,
            dwType: WMT_ATTR_DATATYPE,
            pValue: [*:0]const u8,
            cbLength: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDRMProperty: fn(
            self: *const IWMDRMReader,
            pwstrName: ?[*:0]const u16,
            pdwType: ?*WMT_ATTR_DATATYPE,
            pValue: [*:0]u8,
            pcbLength: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMReader_AcquireLicense(self: *const T, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMReader.VTable, self.vtable).AcquireLicense(@ptrCast(*const IWMDRMReader, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMReader_CancelLicenseAcquisition(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMReader.VTable, self.vtable).CancelLicenseAcquisition(@ptrCast(*const IWMDRMReader, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMReader_Individualize(self: *const T, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMReader.VTable, self.vtable).Individualize(@ptrCast(*const IWMDRMReader, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMReader_CancelIndividualization(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMReader.VTable, self.vtable).CancelIndividualization(@ptrCast(*const IWMDRMReader, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMReader_MonitorLicenseAcquisition(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMReader.VTable, self.vtable).MonitorLicenseAcquisition(@ptrCast(*const IWMDRMReader, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMReader_CancelMonitorLicenseAcquisition(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMReader.VTable, self.vtable).CancelMonitorLicenseAcquisition(@ptrCast(*const IWMDRMReader, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMReader_SetDRMProperty(self: *const T, pwstrName: ?[*:0]const u16, dwType: WMT_ATTR_DATATYPE, pValue: [*:0]const u8, cbLength: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMReader.VTable, self.vtable).SetDRMProperty(@ptrCast(*const IWMDRMReader, self), pwstrName, dwType, pValue, cbLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMReader_GetDRMProperty(self: *const T, pwstrName: ?[*:0]const u16, pdwType: ?*WMT_ATTR_DATATYPE, pValue: [*:0]u8, pcbLength: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMReader.VTable, self.vtable).GetDRMProperty(@ptrCast(*const IWMDRMReader, self), pwstrName, pdwType, pValue, pcbLength);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DRM_MINIMUM_OUTPUT_PROTECTION_LEVELS = extern struct {
    wCompressedDigitalVideo: u16,
    wUncompressedDigitalVideo: u16,
    wAnalogVideo: u16,
    wCompressedDigitalAudio: u16,
    wUncompressedDigitalAudio: u16,
};

pub const DRM_OPL_OUTPUT_IDS = extern struct {
    cIds: u16,
    rgIds: ?*Guid,
};

pub const DRM_OUTPUT_PROTECTION = extern struct {
    guidId: Guid,
    bConfigData: u8,
};

pub const DRM_VIDEO_OUTPUT_PROTECTION_IDS = extern struct {
    cEntries: u16,
    rgVop: ?*DRM_OUTPUT_PROTECTION,
};

pub const DRM_PLAY_OPL = extern struct {
    minOPL: DRM_MINIMUM_OUTPUT_PROTECTION_LEVELS,
    oplIdReserved: DRM_OPL_OUTPUT_IDS,
    vopi: DRM_VIDEO_OUTPUT_PROTECTION_IDS,
};

pub const DRM_COPY_OPL = extern struct {
    wMinimumCopyLevel: u16,
    oplIdIncludes: DRM_OPL_OUTPUT_IDS,
    oplIdExcludes: DRM_OPL_OUTPUT_IDS,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWMDRMReader2_Value = @import("../zig.zig").Guid.initString("befe7a75-9f1d-4075-b9d9-a3c37bda49a0");
pub const IID_IWMDRMReader2 = &IID_IWMDRMReader2_Value;
pub const IWMDRMReader2 = extern struct {
    pub const VTable = extern struct {
        base: IWMDRMReader.VTable,
        SetEvaluateOutputLevelLicenses: fn(
            self: *const IWMDRMReader2,
            fEvaluate: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPlayOutputLevels: fn(
            self: *const IWMDRMReader2,
            pPlayOPL: [*]DRM_PLAY_OPL,
            pcbLength: ?*u32,
            pdwMinAppComplianceLevel: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCopyOutputLevels: fn(
            self: *const IWMDRMReader2,
            pCopyOPL: [*]DRM_COPY_OPL,
            pcbLength: ?*u32,
            pdwMinAppComplianceLevel: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TryNextLicense: fn(
            self: *const IWMDRMReader2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMDRMReader.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMReader2_SetEvaluateOutputLevelLicenses(self: *const T, fEvaluate: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMReader2.VTable, self.vtable).SetEvaluateOutputLevelLicenses(@ptrCast(*const IWMDRMReader2, self), fEvaluate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMReader2_GetPlayOutputLevels(self: *const T, pPlayOPL: [*]DRM_PLAY_OPL, pcbLength: ?*u32, pdwMinAppComplianceLevel: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMReader2.VTable, self.vtable).GetPlayOutputLevels(@ptrCast(*const IWMDRMReader2, self), pPlayOPL, pcbLength, pdwMinAppComplianceLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMReader2_GetCopyOutputLevels(self: *const T, pCopyOPL: [*]DRM_COPY_OPL, pcbLength: ?*u32, pdwMinAppComplianceLevel: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMReader2.VTable, self.vtable).GetCopyOutputLevels(@ptrCast(*const IWMDRMReader2, self), pCopyOPL, pcbLength, pdwMinAppComplianceLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMReader2_TryNextLicense(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMReader2.VTable, self.vtable).TryNextLicense(@ptrCast(*const IWMDRMReader2, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWMDRMReader3_Value = @import("../zig.zig").Guid.initString("e08672de-f1e7-4ff4-a0a3-fc4b08e4caf8");
pub const IID_IWMDRMReader3 = &IID_IWMDRMReader3_Value;
pub const IWMDRMReader3 = extern struct {
    pub const VTable = extern struct {
        base: IWMDRMReader2.VTable,
        GetInclusionList: fn(
            self: *const IWMDRMReader3,
            ppGuids: ?*?*Guid,
            pcGuids: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMDRMReader2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMReader3_GetInclusionList(self: *const T, ppGuids: ?*?*Guid, pcGuids: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMReader3.VTable, self.vtable).GetInclusionList(@ptrCast(*const IWMDRMReader3, self), ppGuids, pcGuids);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderPlaylistBurn_Value = @import("../zig.zig").Guid.initString("f28c0300-9baa-4477-a846-1744d9cbf533");
pub const IID_IWMReaderPlaylistBurn = &IID_IWMReaderPlaylistBurn_Value;
pub const IWMReaderPlaylistBurn = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitPlaylistBurn: fn(
            self: *const IWMReaderPlaylistBurn,
            cFiles: u32,
            ppwszFilenames: ?*?PWSTR,
            pCallback: ?*IWMStatusCallback,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInitResults: fn(
            self: *const IWMReaderPlaylistBurn,
            cFiles: u32,
            phrStati: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: fn(
            self: *const IWMReaderPlaylistBurn,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndPlaylistBurn: fn(
            self: *const IWMReaderPlaylistBurn,
            hrBurnResult: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderPlaylistBurn_InitPlaylistBurn(self: *const T, cFiles: u32, ppwszFilenames: ?*?PWSTR, pCallback: ?*IWMStatusCallback, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderPlaylistBurn.VTable, self.vtable).InitPlaylistBurn(@ptrCast(*const IWMReaderPlaylistBurn, self), cFiles, ppwszFilenames, pCallback, pvContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderPlaylistBurn_GetInitResults(self: *const T, cFiles: u32, phrStati: ?*HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderPlaylistBurn.VTable, self.vtable).GetInitResults(@ptrCast(*const IWMReaderPlaylistBurn, self), cFiles, phrStati);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderPlaylistBurn_Cancel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderPlaylistBurn.VTable, self.vtable).Cancel(@ptrCast(*const IWMReaderPlaylistBurn, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderPlaylistBurn_EndPlaylistBurn(self: *const T, hrBurnResult: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderPlaylistBurn.VTable, self.vtable).EndPlaylistBurn(@ptrCast(*const IWMReaderPlaylistBurn, self), hrBurnResult);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderNetworkConfig_Value = @import("../zig.zig").Guid.initString("96406bec-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMReaderNetworkConfig = &IID_IWMReaderNetworkConfig_Value;
pub const IWMReaderNetworkConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetBufferingTime: fn(
            self: *const IWMReaderNetworkConfig,
            pcnsBufferingTime: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBufferingTime: fn(
            self: *const IWMReaderNetworkConfig,
            cnsBufferingTime: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUDPPortRanges: fn(
            self: *const IWMReaderNetworkConfig,
            pRangeArray: [*]WM_PORT_NUMBER_RANGE,
            pcRanges: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUDPPortRanges: fn(
            self: *const IWMReaderNetworkConfig,
            pRangeArray: [*]WM_PORT_NUMBER_RANGE,
            cRanges: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProxySettings: fn(
            self: *const IWMReaderNetworkConfig,
            pwszProtocol: ?[*:0]const u16,
            pProxySetting: ?*WMT_PROXY_SETTINGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProxySettings: fn(
            self: *const IWMReaderNetworkConfig,
            pwszProtocol: ?[*:0]const u16,
            ProxySetting: WMT_PROXY_SETTINGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProxyHostName: fn(
            self: *const IWMReaderNetworkConfig,
            pwszProtocol: ?[*:0]const u16,
            pwszHostName: [*:0]u16,
            pcchHostName: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProxyHostName: fn(
            self: *const IWMReaderNetworkConfig,
            pwszProtocol: ?[*:0]const u16,
            pwszHostName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProxyPort: fn(
            self: *const IWMReaderNetworkConfig,
            pwszProtocol: ?[*:0]const u16,
            pdwPort: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProxyPort: fn(
            self: *const IWMReaderNetworkConfig,
            pwszProtocol: ?[*:0]const u16,
            dwPort: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProxyExceptionList: fn(
            self: *const IWMReaderNetworkConfig,
            pwszProtocol: ?[*:0]const u16,
            pwszExceptionList: [*:0]u16,
            pcchExceptionList: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProxyExceptionList: fn(
            self: *const IWMReaderNetworkConfig,
            pwszProtocol: ?[*:0]const u16,
            pwszExceptionList: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProxyBypassForLocal: fn(
            self: *const IWMReaderNetworkConfig,
            pwszProtocol: ?[*:0]const u16,
            pfBypassForLocal: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProxyBypassForLocal: fn(
            self: *const IWMReaderNetworkConfig,
            pwszProtocol: ?[*:0]const u16,
            fBypassForLocal: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForceRerunAutoProxyDetection: fn(
            self: *const IWMReaderNetworkConfig,
            pfForceRerunDetection: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetForceRerunAutoProxyDetection: fn(
            self: *const IWMReaderNetworkConfig,
            fForceRerunDetection: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnableMulticast: fn(
            self: *const IWMReaderNetworkConfig,
            pfEnableMulticast: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnableMulticast: fn(
            self: *const IWMReaderNetworkConfig,
            fEnableMulticast: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnableHTTP: fn(
            self: *const IWMReaderNetworkConfig,
            pfEnableHTTP: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnableHTTP: fn(
            self: *const IWMReaderNetworkConfig,
            fEnableHTTP: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnableUDP: fn(
            self: *const IWMReaderNetworkConfig,
            pfEnableUDP: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnableUDP: fn(
            self: *const IWMReaderNetworkConfig,
            fEnableUDP: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnableTCP: fn(
            self: *const IWMReaderNetworkConfig,
            pfEnableTCP: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnableTCP: fn(
            self: *const IWMReaderNetworkConfig,
            fEnableTCP: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetProtocolRollover: fn(
            self: *const IWMReaderNetworkConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnectionBandwidth: fn(
            self: *const IWMReaderNetworkConfig,
            pdwConnectionBandwidth: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConnectionBandwidth: fn(
            self: *const IWMReaderNetworkConfig,
            dwConnectionBandwidth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumProtocolsSupported: fn(
            self: *const IWMReaderNetworkConfig,
            pcProtocols: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedProtocolName: fn(
            self: *const IWMReaderNetworkConfig,
            dwProtocolNum: u32,
            pwszProtocolName: [*:0]u16,
            pcchProtocolName: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddLoggingUrl: fn(
            self: *const IWMReaderNetworkConfig,
            pwszUrl: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLoggingUrl: fn(
            self: *const IWMReaderNetworkConfig,
            dwIndex: u32,
            pwszUrl: [*:0]u16,
            pcchUrl: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLoggingUrlCount: fn(
            self: *const IWMReaderNetworkConfig,
            pdwUrlCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetLoggingUrlList: fn(
            self: *const IWMReaderNetworkConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_GetBufferingTime(self: *const T, pcnsBufferingTime: ?*u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).GetBufferingTime(@ptrCast(*const IWMReaderNetworkConfig, self), pcnsBufferingTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_SetBufferingTime(self: *const T, cnsBufferingTime: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).SetBufferingTime(@ptrCast(*const IWMReaderNetworkConfig, self), cnsBufferingTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_GetUDPPortRanges(self: *const T, pRangeArray: [*]WM_PORT_NUMBER_RANGE, pcRanges: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).GetUDPPortRanges(@ptrCast(*const IWMReaderNetworkConfig, self), pRangeArray, pcRanges);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_SetUDPPortRanges(self: *const T, pRangeArray: [*]WM_PORT_NUMBER_RANGE, cRanges: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).SetUDPPortRanges(@ptrCast(*const IWMReaderNetworkConfig, self), pRangeArray, cRanges);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_GetProxySettings(self: *const T, pwszProtocol: ?[*:0]const u16, pProxySetting: ?*WMT_PROXY_SETTINGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).GetProxySettings(@ptrCast(*const IWMReaderNetworkConfig, self), pwszProtocol, pProxySetting);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_SetProxySettings(self: *const T, pwszProtocol: ?[*:0]const u16, ProxySetting: WMT_PROXY_SETTINGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).SetProxySettings(@ptrCast(*const IWMReaderNetworkConfig, self), pwszProtocol, ProxySetting);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_GetProxyHostName(self: *const T, pwszProtocol: ?[*:0]const u16, pwszHostName: [*:0]u16, pcchHostName: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).GetProxyHostName(@ptrCast(*const IWMReaderNetworkConfig, self), pwszProtocol, pwszHostName, pcchHostName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_SetProxyHostName(self: *const T, pwszProtocol: ?[*:0]const u16, pwszHostName: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).SetProxyHostName(@ptrCast(*const IWMReaderNetworkConfig, self), pwszProtocol, pwszHostName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_GetProxyPort(self: *const T, pwszProtocol: ?[*:0]const u16, pdwPort: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).GetProxyPort(@ptrCast(*const IWMReaderNetworkConfig, self), pwszProtocol, pdwPort);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_SetProxyPort(self: *const T, pwszProtocol: ?[*:0]const u16, dwPort: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).SetProxyPort(@ptrCast(*const IWMReaderNetworkConfig, self), pwszProtocol, dwPort);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_GetProxyExceptionList(self: *const T, pwszProtocol: ?[*:0]const u16, pwszExceptionList: [*:0]u16, pcchExceptionList: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).GetProxyExceptionList(@ptrCast(*const IWMReaderNetworkConfig, self), pwszProtocol, pwszExceptionList, pcchExceptionList);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_SetProxyExceptionList(self: *const T, pwszProtocol: ?[*:0]const u16, pwszExceptionList: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).SetProxyExceptionList(@ptrCast(*const IWMReaderNetworkConfig, self), pwszProtocol, pwszExceptionList);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_GetProxyBypassForLocal(self: *const T, pwszProtocol: ?[*:0]const u16, pfBypassForLocal: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).GetProxyBypassForLocal(@ptrCast(*const IWMReaderNetworkConfig, self), pwszProtocol, pfBypassForLocal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_SetProxyBypassForLocal(self: *const T, pwszProtocol: ?[*:0]const u16, fBypassForLocal: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).SetProxyBypassForLocal(@ptrCast(*const IWMReaderNetworkConfig, self), pwszProtocol, fBypassForLocal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_GetForceRerunAutoProxyDetection(self: *const T, pfForceRerunDetection: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).GetForceRerunAutoProxyDetection(@ptrCast(*const IWMReaderNetworkConfig, self), pfForceRerunDetection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_SetForceRerunAutoProxyDetection(self: *const T, fForceRerunDetection: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).SetForceRerunAutoProxyDetection(@ptrCast(*const IWMReaderNetworkConfig, self), fForceRerunDetection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_GetEnableMulticast(self: *const T, pfEnableMulticast: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).GetEnableMulticast(@ptrCast(*const IWMReaderNetworkConfig, self), pfEnableMulticast);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_SetEnableMulticast(self: *const T, fEnableMulticast: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).SetEnableMulticast(@ptrCast(*const IWMReaderNetworkConfig, self), fEnableMulticast);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_GetEnableHTTP(self: *const T, pfEnableHTTP: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).GetEnableHTTP(@ptrCast(*const IWMReaderNetworkConfig, self), pfEnableHTTP);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_SetEnableHTTP(self: *const T, fEnableHTTP: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).SetEnableHTTP(@ptrCast(*const IWMReaderNetworkConfig, self), fEnableHTTP);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_GetEnableUDP(self: *const T, pfEnableUDP: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).GetEnableUDP(@ptrCast(*const IWMReaderNetworkConfig, self), pfEnableUDP);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_SetEnableUDP(self: *const T, fEnableUDP: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).SetEnableUDP(@ptrCast(*const IWMReaderNetworkConfig, self), fEnableUDP);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_GetEnableTCP(self: *const T, pfEnableTCP: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).GetEnableTCP(@ptrCast(*const IWMReaderNetworkConfig, self), pfEnableTCP);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_SetEnableTCP(self: *const T, fEnableTCP: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).SetEnableTCP(@ptrCast(*const IWMReaderNetworkConfig, self), fEnableTCP);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_ResetProtocolRollover(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).ResetProtocolRollover(@ptrCast(*const IWMReaderNetworkConfig, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_GetConnectionBandwidth(self: *const T, pdwConnectionBandwidth: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).GetConnectionBandwidth(@ptrCast(*const IWMReaderNetworkConfig, self), pdwConnectionBandwidth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_SetConnectionBandwidth(self: *const T, dwConnectionBandwidth: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).SetConnectionBandwidth(@ptrCast(*const IWMReaderNetworkConfig, self), dwConnectionBandwidth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_GetNumProtocolsSupported(self: *const T, pcProtocols: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).GetNumProtocolsSupported(@ptrCast(*const IWMReaderNetworkConfig, self), pcProtocols);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_GetSupportedProtocolName(self: *const T, dwProtocolNum: u32, pwszProtocolName: [*:0]u16, pcchProtocolName: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).GetSupportedProtocolName(@ptrCast(*const IWMReaderNetworkConfig, self), dwProtocolNum, pwszProtocolName, pcchProtocolName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_AddLoggingUrl(self: *const T, pwszUrl: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).AddLoggingUrl(@ptrCast(*const IWMReaderNetworkConfig, self), pwszUrl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_GetLoggingUrl(self: *const T, dwIndex: u32, pwszUrl: [*:0]u16, pcchUrl: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).GetLoggingUrl(@ptrCast(*const IWMReaderNetworkConfig, self), dwIndex, pwszUrl, pcchUrl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_GetLoggingUrlCount(self: *const T, pdwUrlCount: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).GetLoggingUrlCount(@ptrCast(*const IWMReaderNetworkConfig, self), pdwUrlCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig_ResetLoggingUrlList(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig.VTable, self.vtable).ResetLoggingUrlList(@ptrCast(*const IWMReaderNetworkConfig, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderNetworkConfig2_Value = @import("../zig.zig").Guid.initString("d979a853-042b-4050-8387-c939db22013f");
pub const IID_IWMReaderNetworkConfig2 = &IID_IWMReaderNetworkConfig2_Value;
pub const IWMReaderNetworkConfig2 = extern struct {
    pub const VTable = extern struct {
        base: IWMReaderNetworkConfig.VTable,
        GetEnableContentCaching: fn(
            self: *const IWMReaderNetworkConfig2,
            pfEnableContentCaching: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnableContentCaching: fn(
            self: *const IWMReaderNetworkConfig2,
            fEnableContentCaching: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnableFastCache: fn(
            self: *const IWMReaderNetworkConfig2,
            pfEnableFastCache: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnableFastCache: fn(
            self: *const IWMReaderNetworkConfig2,
            fEnableFastCache: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAcceleratedStreamingDuration: fn(
            self: *const IWMReaderNetworkConfig2,
            pcnsAccelDuration: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAcceleratedStreamingDuration: fn(
            self: *const IWMReaderNetworkConfig2,
            cnsAccelDuration: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutoReconnectLimit: fn(
            self: *const IWMReaderNetworkConfig2,
            pdwAutoReconnectLimit: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAutoReconnectLimit: fn(
            self: *const IWMReaderNetworkConfig2,
            dwAutoReconnectLimit: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnableResends: fn(
            self: *const IWMReaderNetworkConfig2,
            pfEnableResends: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnableResends: fn(
            self: *const IWMReaderNetworkConfig2,
            fEnableResends: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnableThinning: fn(
            self: *const IWMReaderNetworkConfig2,
            pfEnableThinning: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnableThinning: fn(
            self: *const IWMReaderNetworkConfig2,
            fEnableThinning: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxNetPacketSize: fn(
            self: *const IWMReaderNetworkConfig2,
            pdwMaxNetPacketSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMReaderNetworkConfig.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig2_GetEnableContentCaching(self: *const T, pfEnableContentCaching: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig2.VTable, self.vtable).GetEnableContentCaching(@ptrCast(*const IWMReaderNetworkConfig2, self), pfEnableContentCaching);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig2_SetEnableContentCaching(self: *const T, fEnableContentCaching: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig2.VTable, self.vtable).SetEnableContentCaching(@ptrCast(*const IWMReaderNetworkConfig2, self), fEnableContentCaching);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig2_GetEnableFastCache(self: *const T, pfEnableFastCache: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig2.VTable, self.vtable).GetEnableFastCache(@ptrCast(*const IWMReaderNetworkConfig2, self), pfEnableFastCache);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig2_SetEnableFastCache(self: *const T, fEnableFastCache: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig2.VTable, self.vtable).SetEnableFastCache(@ptrCast(*const IWMReaderNetworkConfig2, self), fEnableFastCache);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig2_GetAcceleratedStreamingDuration(self: *const T, pcnsAccelDuration: ?*u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig2.VTable, self.vtable).GetAcceleratedStreamingDuration(@ptrCast(*const IWMReaderNetworkConfig2, self), pcnsAccelDuration);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig2_SetAcceleratedStreamingDuration(self: *const T, cnsAccelDuration: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig2.VTable, self.vtable).SetAcceleratedStreamingDuration(@ptrCast(*const IWMReaderNetworkConfig2, self), cnsAccelDuration);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig2_GetAutoReconnectLimit(self: *const T, pdwAutoReconnectLimit: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig2.VTable, self.vtable).GetAutoReconnectLimit(@ptrCast(*const IWMReaderNetworkConfig2, self), pdwAutoReconnectLimit);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig2_SetAutoReconnectLimit(self: *const T, dwAutoReconnectLimit: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig2.VTable, self.vtable).SetAutoReconnectLimit(@ptrCast(*const IWMReaderNetworkConfig2, self), dwAutoReconnectLimit);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig2_GetEnableResends(self: *const T, pfEnableResends: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig2.VTable, self.vtable).GetEnableResends(@ptrCast(*const IWMReaderNetworkConfig2, self), pfEnableResends);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig2_SetEnableResends(self: *const T, fEnableResends: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig2.VTable, self.vtable).SetEnableResends(@ptrCast(*const IWMReaderNetworkConfig2, self), fEnableResends);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig2_GetEnableThinning(self: *const T, pfEnableThinning: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig2.VTable, self.vtable).GetEnableThinning(@ptrCast(*const IWMReaderNetworkConfig2, self), pfEnableThinning);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig2_SetEnableThinning(self: *const T, fEnableThinning: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig2.VTable, self.vtable).SetEnableThinning(@ptrCast(*const IWMReaderNetworkConfig2, self), fEnableThinning);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderNetworkConfig2_GetMaxNetPacketSize(self: *const T, pdwMaxNetPacketSize: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderNetworkConfig2.VTable, self.vtable).GetMaxNetPacketSize(@ptrCast(*const IWMReaderNetworkConfig2, self), pdwMaxNetPacketSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderStreamClock_Value = @import("../zig.zig").Guid.initString("96406bed-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMReaderStreamClock = &IID_IWMReaderStreamClock_Value;
pub const IWMReaderStreamClock = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTime: fn(
            self: *const IWMReaderStreamClock,
            pcnsNow: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTimer: fn(
            self: *const IWMReaderStreamClock,
            cnsWhen: u64,
            pvParam: ?*anyopaque,
            pdwTimerId: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        KillTimer: fn(
            self: *const IWMReaderStreamClock,
            dwTimerId: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderStreamClock_GetTime(self: *const T, pcnsNow: ?*u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderStreamClock.VTable, self.vtable).GetTime(@ptrCast(*const IWMReaderStreamClock, self), pcnsNow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderStreamClock_SetTimer(self: *const T, cnsWhen: u64, pvParam: ?*anyopaque, pdwTimerId: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderStreamClock.VTable, self.vtable).SetTimer(@ptrCast(*const IWMReaderStreamClock, self), cnsWhen, pvParam, pdwTimerId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderStreamClock_KillTimer(self: *const T, dwTimerId: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderStreamClock.VTable, self.vtable).KillTimer(@ptrCast(*const IWMReaderStreamClock, self), dwTimerId);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMIndexer_Value = @import("../zig.zig").Guid.initString("6d7cdc71-9888-11d3-8edc-00c04f6109cf");
pub const IID_IWMIndexer = &IID_IWMIndexer_Value;
pub const IWMIndexer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartIndexing: fn(
            self: *const IWMIndexer,
            pwszURL: ?[*:0]const u16,
            pCallback: ?*IWMStatusCallback,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: fn(
            self: *const IWMIndexer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMIndexer_StartIndexing(self: *const T, pwszURL: ?[*:0]const u16, pCallback: ?*IWMStatusCallback, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMIndexer.VTable, self.vtable).StartIndexing(@ptrCast(*const IWMIndexer, self), pwszURL, pCallback, pvContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMIndexer_Cancel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMIndexer.VTable, self.vtable).Cancel(@ptrCast(*const IWMIndexer, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMIndexer2_Value = @import("../zig.zig").Guid.initString("b70f1e42-6255-4df0-a6b9-02b212d9e2bb");
pub const IID_IWMIndexer2 = &IID_IWMIndexer2_Value;
pub const IWMIndexer2 = extern struct {
    pub const VTable = extern struct {
        base: IWMIndexer.VTable,
        Configure: fn(
            self: *const IWMIndexer2,
            wStreamNum: u16,
            nIndexerType: WMT_INDEXER_TYPE,
            pvInterval: ?*anyopaque,
            pvIndexType: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMIndexer.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMIndexer2_Configure(self: *const T, wStreamNum: u16, nIndexerType: WMT_INDEXER_TYPE, pvInterval: ?*anyopaque, pvIndexType: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMIndexer2.VTable, self.vtable).Configure(@ptrCast(*const IWMIndexer2, self), wStreamNum, nIndexerType, pvInterval, pvIndexType);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWMLicenseBackup_Value = @import("../zig.zig").Guid.initString("05e5ac9f-3fb6-4508-bb43-a4067ba1ebe8");
pub const IID_IWMLicenseBackup = &IID_IWMLicenseBackup_Value;
pub const IWMLicenseBackup = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BackupLicenses: fn(
            self: *const IWMLicenseBackup,
            dwFlags: u32,
            pCallback: ?*IWMStatusCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelLicenseBackup: fn(
            self: *const IWMLicenseBackup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMLicenseBackup_BackupLicenses(self: *const T, dwFlags: u32, pCallback: ?*IWMStatusCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMLicenseBackup.VTable, self.vtable).BackupLicenses(@ptrCast(*const IWMLicenseBackup, self), dwFlags, pCallback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMLicenseBackup_CancelLicenseBackup(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMLicenseBackup.VTable, self.vtable).CancelLicenseBackup(@ptrCast(*const IWMLicenseBackup, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWMLicenseRestore_Value = @import("../zig.zig").Guid.initString("c70b6334-a22e-4efb-a245-15e65a004a13");
pub const IID_IWMLicenseRestore = &IID_IWMLicenseRestore_Value;
pub const IWMLicenseRestore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RestoreLicenses: fn(
            self: *const IWMLicenseRestore,
            dwFlags: u32,
            pCallback: ?*IWMStatusCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelLicenseRestore: fn(
            self: *const IWMLicenseRestore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMLicenseRestore_RestoreLicenses(self: *const T, dwFlags: u32, pCallback: ?*IWMStatusCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMLicenseRestore.VTable, self.vtable).RestoreLicenses(@ptrCast(*const IWMLicenseRestore, self), dwFlags, pCallback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMLicenseRestore_CancelLicenseRestore(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMLicenseRestore.VTable, self.vtable).CancelLicenseRestore(@ptrCast(*const IWMLicenseRestore, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWMBackupRestoreProps_Value = @import("../zig.zig").Guid.initString("3c8e0da6-996f-4ff3-a1af-4838f9377e2e");
pub const IID_IWMBackupRestoreProps = &IID_IWMBackupRestoreProps_Value;
pub const IWMBackupRestoreProps = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPropCount: fn(
            self: *const IWMBackupRestoreProps,
            pcProps: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropByIndex: fn(
            self: *const IWMBackupRestoreProps,
            wIndex: u16,
            pwszName: [*:0]u16,
            pcchNameLen: ?*u16,
            pType: ?*WMT_ATTR_DATATYPE,
            pValue: [*:0]u8,
            pcbLength: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropByName: fn(
            self: *const IWMBackupRestoreProps,
            pszName: ?[*:0]const u16,
            pType: ?*WMT_ATTR_DATATYPE,
            pValue: [*:0]u8,
            pcbLength: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProp: fn(
            self: *const IWMBackupRestoreProps,
            pszName: ?[*:0]const u16,
            Type: WMT_ATTR_DATATYPE,
            pValue: [*:0]const u8,
            cbLength: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveProp: fn(
            self: *const IWMBackupRestoreProps,
            pcwszName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllProps: fn(
            self: *const IWMBackupRestoreProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMBackupRestoreProps_GetPropCount(self: *const T, pcProps: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMBackupRestoreProps.VTable, self.vtable).GetPropCount(@ptrCast(*const IWMBackupRestoreProps, self), pcProps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMBackupRestoreProps_GetPropByIndex(self: *const T, wIndex: u16, pwszName: [*:0]u16, pcchNameLen: ?*u16, pType: ?*WMT_ATTR_DATATYPE, pValue: [*:0]u8, pcbLength: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMBackupRestoreProps.VTable, self.vtable).GetPropByIndex(@ptrCast(*const IWMBackupRestoreProps, self), wIndex, pwszName, pcchNameLen, pType, pValue, pcbLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMBackupRestoreProps_GetPropByName(self: *const T, pszName: ?[*:0]const u16, pType: ?*WMT_ATTR_DATATYPE, pValue: [*:0]u8, pcbLength: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMBackupRestoreProps.VTable, self.vtable).GetPropByName(@ptrCast(*const IWMBackupRestoreProps, self), pszName, pType, pValue, pcbLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMBackupRestoreProps_SetProp(self: *const T, pszName: ?[*:0]const u16, Type: WMT_ATTR_DATATYPE, pValue: [*:0]const u8, cbLength: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMBackupRestoreProps.VTable, self.vtable).SetProp(@ptrCast(*const IWMBackupRestoreProps, self), pszName, Type, pValue, cbLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMBackupRestoreProps_RemoveProp(self: *const T, pcwszName: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMBackupRestoreProps.VTable, self.vtable).RemoveProp(@ptrCast(*const IWMBackupRestoreProps, self), pcwszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMBackupRestoreProps_RemoveAllProps(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMBackupRestoreProps.VTable, self.vtable).RemoveAllProps(@ptrCast(*const IWMBackupRestoreProps, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMCodecInfo_Value = @import("../zig.zig").Guid.initString("a970f41e-34de-4a98-b3ba-e4b3ca7528f0");
pub const IID_IWMCodecInfo = &IID_IWMCodecInfo_Value;
pub const IWMCodecInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCodecInfoCount: fn(
            self: *const IWMCodecInfo,
            guidType: ?*const Guid,
            pcCodecs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCodecFormatCount: fn(
            self: *const IWMCodecInfo,
            guidType: ?*const Guid,
            dwCodecIndex: u32,
            pcFormat: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCodecFormat: fn(
            self: *const IWMCodecInfo,
            guidType: ?*const Guid,
            dwCodecIndex: u32,
            dwFormatIndex: u32,
            ppIStreamConfig: ?*?*IWMStreamConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMCodecInfo_GetCodecInfoCount(self: *const T, guidType: ?*const Guid, pcCodecs: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMCodecInfo.VTable, self.vtable).GetCodecInfoCount(@ptrCast(*const IWMCodecInfo, self), guidType, pcCodecs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMCodecInfo_GetCodecFormatCount(self: *const T, guidType: ?*const Guid, dwCodecIndex: u32, pcFormat: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMCodecInfo.VTable, self.vtable).GetCodecFormatCount(@ptrCast(*const IWMCodecInfo, self), guidType, dwCodecIndex, pcFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMCodecInfo_GetCodecFormat(self: *const T, guidType: ?*const Guid, dwCodecIndex: u32, dwFormatIndex: u32, ppIStreamConfig: ?*?*IWMStreamConfig) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMCodecInfo.VTable, self.vtable).GetCodecFormat(@ptrCast(*const IWMCodecInfo, self), guidType, dwCodecIndex, dwFormatIndex, ppIStreamConfig);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMCodecInfo2_Value = @import("../zig.zig").Guid.initString("aa65e273-b686-4056-91ec-dd768d4df710");
pub const IID_IWMCodecInfo2 = &IID_IWMCodecInfo2_Value;
pub const IWMCodecInfo2 = extern struct {
    pub const VTable = extern struct {
        base: IWMCodecInfo.VTable,
        GetCodecName: fn(
            self: *const IWMCodecInfo2,
            guidType: ?*const Guid,
            dwCodecIndex: u32,
            wszName: [*:0]u16,
            pcchName: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCodecFormatDesc: fn(
            self: *const IWMCodecInfo2,
            guidType: ?*const Guid,
            dwCodecIndex: u32,
            dwFormatIndex: u32,
            ppIStreamConfig: ?*?*IWMStreamConfig,
            wszDesc: [*:0]u16,
            pcchDesc: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMCodecInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMCodecInfo2_GetCodecName(self: *const T, guidType: ?*const Guid, dwCodecIndex: u32, wszName: [*:0]u16, pcchName: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMCodecInfo2.VTable, self.vtable).GetCodecName(@ptrCast(*const IWMCodecInfo2, self), guidType, dwCodecIndex, wszName, pcchName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMCodecInfo2_GetCodecFormatDesc(self: *const T, guidType: ?*const Guid, dwCodecIndex: u32, dwFormatIndex: u32, ppIStreamConfig: ?*?*IWMStreamConfig, wszDesc: [*:0]u16, pcchDesc: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMCodecInfo2.VTable, self.vtable).GetCodecFormatDesc(@ptrCast(*const IWMCodecInfo2, self), guidType, dwCodecIndex, dwFormatIndex, ppIStreamConfig, wszDesc, pcchDesc);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMCodecInfo3_Value = @import("../zig.zig").Guid.initString("7e51f487-4d93-4f98-8ab4-27d0565adc51");
pub const IID_IWMCodecInfo3 = &IID_IWMCodecInfo3_Value;
pub const IWMCodecInfo3 = extern struct {
    pub const VTable = extern struct {
        base: IWMCodecInfo2.VTable,
        GetCodecFormatProp: fn(
            self: *const IWMCodecInfo3,
            guidType: ?*const Guid,
            dwCodecIndex: u32,
            dwFormatIndex: u32,
            pszName: ?[*:0]const u16,
            pType: ?*WMT_ATTR_DATATYPE,
            pValue: [*:0]u8,
            pdwSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCodecProp: fn(
            self: *const IWMCodecInfo3,
            guidType: ?*const Guid,
            dwCodecIndex: u32,
            pszName: ?[*:0]const u16,
            pType: ?*WMT_ATTR_DATATYPE,
            pValue: [*:0]u8,
            pdwSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCodecEnumerationSetting: fn(
            self: *const IWMCodecInfo3,
            guidType: ?*const Guid,
            dwCodecIndex: u32,
            pszName: ?[*:0]const u16,
            Type: WMT_ATTR_DATATYPE,
            pValue: [*:0]const u8,
            dwSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCodecEnumerationSetting: fn(
            self: *const IWMCodecInfo3,
            guidType: ?*const Guid,
            dwCodecIndex: u32,
            pszName: ?[*:0]const u16,
            pType: ?*WMT_ATTR_DATATYPE,
            pValue: [*:0]u8,
            pdwSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMCodecInfo2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMCodecInfo3_GetCodecFormatProp(self: *const T, guidType: ?*const Guid, dwCodecIndex: u32, dwFormatIndex: u32, pszName: ?[*:0]const u16, pType: ?*WMT_ATTR_DATATYPE, pValue: [*:0]u8, pdwSize: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMCodecInfo3.VTable, self.vtable).GetCodecFormatProp(@ptrCast(*const IWMCodecInfo3, self), guidType, dwCodecIndex, dwFormatIndex, pszName, pType, pValue, pdwSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMCodecInfo3_GetCodecProp(self: *const T, guidType: ?*const Guid, dwCodecIndex: u32, pszName: ?[*:0]const u16, pType: ?*WMT_ATTR_DATATYPE, pValue: [*:0]u8, pdwSize: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMCodecInfo3.VTable, self.vtable).GetCodecProp(@ptrCast(*const IWMCodecInfo3, self), guidType, dwCodecIndex, pszName, pType, pValue, pdwSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMCodecInfo3_SetCodecEnumerationSetting(self: *const T, guidType: ?*const Guid, dwCodecIndex: u32, pszName: ?[*:0]const u16, Type: WMT_ATTR_DATATYPE, pValue: [*:0]const u8, dwSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMCodecInfo3.VTable, self.vtable).SetCodecEnumerationSetting(@ptrCast(*const IWMCodecInfo3, self), guidType, dwCodecIndex, pszName, Type, pValue, dwSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMCodecInfo3_GetCodecEnumerationSetting(self: *const T, guidType: ?*const Guid, dwCodecIndex: u32, pszName: ?[*:0]const u16, pType: ?*WMT_ATTR_DATATYPE, pValue: [*:0]u8, pdwSize: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMCodecInfo3.VTable, self.vtable).GetCodecEnumerationSetting(@ptrCast(*const IWMCodecInfo3, self), guidType, dwCodecIndex, pszName, pType, pValue, pdwSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMLanguageList_Value = @import("../zig.zig").Guid.initString("df683f00-2d49-4d8e-92b7-fb19f6a0dc57");
pub const IID_IWMLanguageList = &IID_IWMLanguageList_Value;
pub const IWMLanguageList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLanguageCount: fn(
            self: *const IWMLanguageList,
            pwCount: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLanguageDetails: fn(
            self: *const IWMLanguageList,
            wIndex: u16,
            pwszLanguageString: [*:0]u16,
            pcchLanguageStringLength: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddLanguageByRFC1766String: fn(
            self: *const IWMLanguageList,
            pwszLanguageString: ?PWSTR,
            pwIndex: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMLanguageList_GetLanguageCount(self: *const T, pwCount: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMLanguageList.VTable, self.vtable).GetLanguageCount(@ptrCast(*const IWMLanguageList, self), pwCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMLanguageList_GetLanguageDetails(self: *const T, wIndex: u16, pwszLanguageString: [*:0]u16, pcchLanguageStringLength: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMLanguageList.VTable, self.vtable).GetLanguageDetails(@ptrCast(*const IWMLanguageList, self), wIndex, pwszLanguageString, pcchLanguageStringLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMLanguageList_AddLanguageByRFC1766String(self: *const T, pwszLanguageString: ?PWSTR, pwIndex: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMLanguageList.VTable, self.vtable).AddLanguageByRFC1766String(@ptrCast(*const IWMLanguageList, self), pwszLanguageString, pwIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterPushSink_Value = @import("../zig.zig").Guid.initString("dc10e6a5-072c-467d-bf57-6330a9dde12a");
pub const IID_IWMWriterPushSink = &IID_IWMWriterPushSink_Value;
pub const IWMWriterPushSink = extern struct {
    pub const VTable = extern struct {
        base: IWMWriterSink.VTable,
        Connect: fn(
            self: *const IWMWriterPushSink,
            pwszURL: ?[*:0]const u16,
            pwszTemplateURL: ?[*:0]const u16,
            fAutoDestroy: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: fn(
            self: *const IWMWriterPushSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndSession: fn(
            self: *const IWMWriterPushSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMWriterSink.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterPushSink_Connect(self: *const T, pwszURL: ?[*:0]const u16, pwszTemplateURL: ?[*:0]const u16, fAutoDestroy: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterPushSink.VTable, self.vtable).Connect(@ptrCast(*const IWMWriterPushSink, self), pwszURL, pwszTemplateURL, fAutoDestroy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterPushSink_Disconnect(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterPushSink.VTable, self.vtable).Disconnect(@ptrCast(*const IWMWriterPushSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWriterPushSink_EndSession(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWriterPushSink.VTable, self.vtable).EndSession(@ptrCast(*const IWMWriterPushSink, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWMDeviceRegistration_Value = @import("../zig.zig").Guid.initString("f6211f03-8d21-4e94-93e6-8510805f2d99");
pub const IID_IWMDeviceRegistration = &IID_IWMDeviceRegistration_Value;
pub const IWMDeviceRegistration = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterDevice: fn(
            self: *const IWMDeviceRegistration,
            dwRegisterType: u32,
            pbCertificate: [*:0]u8,
            cbCertificate: u32,
            SerialNumber: DRM_VAL16,
            ppDevice: ?*?*IWMRegisteredDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterDevice: fn(
            self: *const IWMDeviceRegistration,
            dwRegisterType: u32,
            pbCertificate: [*:0]u8,
            cbCertificate: u32,
            SerialNumber: DRM_VAL16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegistrationStats: fn(
            self: *const IWMDeviceRegistration,
            dwRegisterType: u32,
            pcRegisteredDevices: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFirstRegisteredDevice: fn(
            self: *const IWMDeviceRegistration,
            dwRegisterType: u32,
            ppDevice: ?*?*IWMRegisteredDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextRegisteredDevice: fn(
            self: *const IWMDeviceRegistration,
            ppDevice: ?*?*IWMRegisteredDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegisteredDeviceByID: fn(
            self: *const IWMDeviceRegistration,
            dwRegisterType: u32,
            pbCertificate: [*:0]u8,
            cbCertificate: u32,
            SerialNumber: DRM_VAL16,
            ppDevice: ?*?*IWMRegisteredDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDeviceRegistration_RegisterDevice(self: *const T, dwRegisterType: u32, pbCertificate: [*:0]u8, cbCertificate: u32, SerialNumber: DRM_VAL16, ppDevice: ?*?*IWMRegisteredDevice) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDeviceRegistration.VTable, self.vtable).RegisterDevice(@ptrCast(*const IWMDeviceRegistration, self), dwRegisterType, pbCertificate, cbCertificate, SerialNumber, ppDevice);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDeviceRegistration_UnregisterDevice(self: *const T, dwRegisterType: u32, pbCertificate: [*:0]u8, cbCertificate: u32, SerialNumber: DRM_VAL16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDeviceRegistration.VTable, self.vtable).UnregisterDevice(@ptrCast(*const IWMDeviceRegistration, self), dwRegisterType, pbCertificate, cbCertificate, SerialNumber);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDeviceRegistration_GetRegistrationStats(self: *const T, dwRegisterType: u32, pcRegisteredDevices: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDeviceRegistration.VTable, self.vtable).GetRegistrationStats(@ptrCast(*const IWMDeviceRegistration, self), dwRegisterType, pcRegisteredDevices);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDeviceRegistration_GetFirstRegisteredDevice(self: *const T, dwRegisterType: u32, ppDevice: ?*?*IWMRegisteredDevice) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDeviceRegistration.VTable, self.vtable).GetFirstRegisteredDevice(@ptrCast(*const IWMDeviceRegistration, self), dwRegisterType, ppDevice);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDeviceRegistration_GetNextRegisteredDevice(self: *const T, ppDevice: ?*?*IWMRegisteredDevice) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDeviceRegistration.VTable, self.vtable).GetNextRegisteredDevice(@ptrCast(*const IWMDeviceRegistration, self), ppDevice);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDeviceRegistration_GetRegisteredDeviceByID(self: *const T, dwRegisterType: u32, pbCertificate: [*:0]u8, cbCertificate: u32, SerialNumber: DRM_VAL16, ppDevice: ?*?*IWMRegisteredDevice) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDeviceRegistration.VTable, self.vtable).GetRegisteredDeviceByID(@ptrCast(*const IWMDeviceRegistration, self), dwRegisterType, pbCertificate, cbCertificate, SerialNumber, ppDevice);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMRegisteredDevice_Value = @import("../zig.zig").Guid.initString("a4503bec-5508-4148-97ac-bfa75760a70d");
pub const IID_IWMRegisteredDevice = &IID_IWMRegisteredDevice_Value;
pub const IWMRegisteredDevice = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDeviceSerialNumber: fn(
            self: *const IWMRegisteredDevice,
            pSerialNumber: ?*DRM_VAL16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceCertificate: fn(
            self: *const IWMRegisteredDevice,
            ppCertificate: ?*?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceType: fn(
            self: *const IWMRegisteredDevice,
            pdwType: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeCount: fn(
            self: *const IWMRegisteredDevice,
            pcAttributes: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeByIndex: fn(
            self: *const IWMRegisteredDevice,
            dwIndex: u32,
            pbstrName: ?*?BSTR,
            pbstrValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeByName: fn(
            self: *const IWMRegisteredDevice,
            bstrName: ?BSTR,
            pbstrValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAttributeByName: fn(
            self: *const IWMRegisteredDevice,
            bstrName: ?BSTR,
            bstrValue: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Approve: fn(
            self: *const IWMRegisteredDevice,
            fApprove: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsValid: fn(
            self: *const IWMRegisteredDevice,
            pfValid: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsApproved: fn(
            self: *const IWMRegisteredDevice,
            pfApproved: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsWmdrmCompliant: fn(
            self: *const IWMRegisteredDevice,
            pfCompliant: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsOpened: fn(
            self: *const IWMRegisteredDevice,
            pfOpened: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: fn(
            self: *const IWMRegisteredDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IWMRegisteredDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMRegisteredDevice_GetDeviceSerialNumber(self: *const T, pSerialNumber: ?*DRM_VAL16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMRegisteredDevice.VTable, self.vtable).GetDeviceSerialNumber(@ptrCast(*const IWMRegisteredDevice, self), pSerialNumber);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMRegisteredDevice_GetDeviceCertificate(self: *const T, ppCertificate: ?*?*INSSBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMRegisteredDevice.VTable, self.vtable).GetDeviceCertificate(@ptrCast(*const IWMRegisteredDevice, self), ppCertificate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMRegisteredDevice_GetDeviceType(self: *const T, pdwType: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMRegisteredDevice.VTable, self.vtable).GetDeviceType(@ptrCast(*const IWMRegisteredDevice, self), pdwType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMRegisteredDevice_GetAttributeCount(self: *const T, pcAttributes: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMRegisteredDevice.VTable, self.vtable).GetAttributeCount(@ptrCast(*const IWMRegisteredDevice, self), pcAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMRegisteredDevice_GetAttributeByIndex(self: *const T, dwIndex: u32, pbstrName: ?*?BSTR, pbstrValue: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMRegisteredDevice.VTable, self.vtable).GetAttributeByIndex(@ptrCast(*const IWMRegisteredDevice, self), dwIndex, pbstrName, pbstrValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMRegisteredDevice_GetAttributeByName(self: *const T, bstrName: ?BSTR, pbstrValue: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMRegisteredDevice.VTable, self.vtable).GetAttributeByName(@ptrCast(*const IWMRegisteredDevice, self), bstrName, pbstrValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMRegisteredDevice_SetAttributeByName(self: *const T, bstrName: ?BSTR, bstrValue: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMRegisteredDevice.VTable, self.vtable).SetAttributeByName(@ptrCast(*const IWMRegisteredDevice, self), bstrName, bstrValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMRegisteredDevice_Approve(self: *const T, fApprove: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMRegisteredDevice.VTable, self.vtable).Approve(@ptrCast(*const IWMRegisteredDevice, self), fApprove);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMRegisteredDevice_IsValid(self: *const T, pfValid: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMRegisteredDevice.VTable, self.vtable).IsValid(@ptrCast(*const IWMRegisteredDevice, self), pfValid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMRegisteredDevice_IsApproved(self: *const T, pfApproved: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMRegisteredDevice.VTable, self.vtable).IsApproved(@ptrCast(*const IWMRegisteredDevice, self), pfApproved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMRegisteredDevice_IsWmdrmCompliant(self: *const T, pfCompliant: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMRegisteredDevice.VTable, self.vtable).IsWmdrmCompliant(@ptrCast(*const IWMRegisteredDevice, self), pfCompliant);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMRegisteredDevice_IsOpened(self: *const T, pfOpened: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMRegisteredDevice.VTable, self.vtable).IsOpened(@ptrCast(*const IWMRegisteredDevice, self), pfOpened);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMRegisteredDevice_Open(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMRegisteredDevice.VTable, self.vtable).Open(@ptrCast(*const IWMRegisteredDevice, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMRegisteredDevice_Close(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMRegisteredDevice.VTable, self.vtable).Close(@ptrCast(*const IWMRegisteredDevice, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWMProximityDetection_Value = @import("../zig.zig").Guid.initString("6a9fd8ee-b651-4bf0-b849-7d4ece79a2b1");
pub const IID_IWMProximityDetection = &IID_IWMProximityDetection_Value;
pub const IWMProximityDetection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartDetection: fn(
            self: *const IWMProximityDetection,
            pbRegistrationMsg: [*:0]u8,
            cbRegistrationMsg: u32,
            pbLocalAddress: [*:0]u8,
            cbLocalAddress: u32,
            dwExtraPortsAllowed: u32,
            ppRegistrationResponseMsg: ?*?*INSSBuffer,
            pCallback: ?*IWMStatusCallback,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMProximityDetection_StartDetection(self: *const T, pbRegistrationMsg: [*:0]u8, cbRegistrationMsg: u32, pbLocalAddress: [*:0]u8, cbLocalAddress: u32, dwExtraPortsAllowed: u32, ppRegistrationResponseMsg: ?*?*INSSBuffer, pCallback: ?*IWMStatusCallback, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMProximityDetection.VTable, self.vtable).StartDetection(@ptrCast(*const IWMProximityDetection, self), pbRegistrationMsg, cbRegistrationMsg, pbLocalAddress, cbLocalAddress, dwExtraPortsAllowed, ppRegistrationResponseMsg, pCallback, pvContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWMDRMMessageParser_Value = @import("../zig.zig").Guid.initString("a73a0072-25a0-4c99-b4a5-ede8101a6c39");
pub const IID_IWMDRMMessageParser = &IID_IWMDRMMessageParser_Value;
pub const IWMDRMMessageParser = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ParseRegistrationReqMsg: fn(
            self: *const IWMDRMMessageParser,
            pbRegistrationReqMsg: [*:0]u8,
            cbRegistrationReqMsg: u32,
            ppDeviceCert: ?*?*INSSBuffer,
            pDeviceSerialNumber: ?*DRM_VAL16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ParseLicenseRequestMsg: fn(
            self: *const IWMDRMMessageParser,
            pbLicenseRequestMsg: [*:0]u8,
            cbLicenseRequestMsg: u32,
            ppDeviceCert: ?*?*INSSBuffer,
            pDeviceSerialNumber: ?*DRM_VAL16,
            pbstrAction: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMMessageParser_ParseRegistrationReqMsg(self: *const T, pbRegistrationReqMsg: [*:0]u8, cbRegistrationReqMsg: u32, ppDeviceCert: ?*?*INSSBuffer, pDeviceSerialNumber: ?*DRM_VAL16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMMessageParser.VTable, self.vtable).ParseRegistrationReqMsg(@ptrCast(*const IWMDRMMessageParser, self), pbRegistrationReqMsg, cbRegistrationReqMsg, ppDeviceCert, pDeviceSerialNumber);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMMessageParser_ParseLicenseRequestMsg(self: *const T, pbLicenseRequestMsg: [*:0]u8, cbLicenseRequestMsg: u32, ppDeviceCert: ?*?*INSSBuffer, pDeviceSerialNumber: ?*DRM_VAL16, pbstrAction: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMMessageParser.VTable, self.vtable).ParseLicenseRequestMsg(@ptrCast(*const IWMDRMMessageParser, self), pbLicenseRequestMsg, cbLicenseRequestMsg, ppDeviceCert, pDeviceSerialNumber, pbstrAction);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWMDRMTranscryptor_Value = @import("../zig.zig").Guid.initString("69059850-6e6f-4bb2-806f-71863ddfc471");
pub const IID_IWMDRMTranscryptor = &IID_IWMDRMTranscryptor_Value;
pub const IWMDRMTranscryptor = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IWMDRMTranscryptor,
            bstrFileName: ?BSTR,
            pbLicenseRequestMsg: ?*u8,
            cbLicenseRequestMsg: u32,
            ppLicenseResponseMsg: ?*?*INSSBuffer,
            pCallback: ?*IWMStatusCallback,
            pvContext: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Seek: fn(
            self: *const IWMDRMTranscryptor,
            hnsTime: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Read: fn(
            self: *const IWMDRMTranscryptor,
            pbData: ?*u8,
            pcbData: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IWMDRMTranscryptor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMTranscryptor_Initialize(self: *const T, bstrFileName: ?BSTR, pbLicenseRequestMsg: ?*u8, cbLicenseRequestMsg: u32, ppLicenseResponseMsg: ?*?*INSSBuffer, pCallback: ?*IWMStatusCallback, pvContext: ?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMTranscryptor.VTable, self.vtable).Initialize(@ptrCast(*const IWMDRMTranscryptor, self), bstrFileName, pbLicenseRequestMsg, cbLicenseRequestMsg, ppLicenseResponseMsg, pCallback, pvContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMTranscryptor_Seek(self: *const T, hnsTime: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMTranscryptor.VTable, self.vtable).Seek(@ptrCast(*const IWMDRMTranscryptor, self), hnsTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMTranscryptor_Read(self: *const T, pbData: ?*u8, pcbData: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMTranscryptor.VTable, self.vtable).Read(@ptrCast(*const IWMDRMTranscryptor, self), pbData, pcbData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMTranscryptor_Close(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMTranscryptor.VTable, self.vtable).Close(@ptrCast(*const IWMDRMTranscryptor, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDRMTranscryptor2_Value = @import("../zig.zig").Guid.initString("e0da439f-d331-496a-bece-18e5bac5dd23");
pub const IID_IWMDRMTranscryptor2 = &IID_IWMDRMTranscryptor2_Value;
pub const IWMDRMTranscryptor2 = extern struct {
    pub const VTable = extern struct {
        base: IWMDRMTranscryptor.VTable,
        SeekEx: fn(
            self: *const IWMDRMTranscryptor2,
            cnsStartTime: u64,
            cnsDuration: u64,
            flRate: f32,
            fIncludeFileHeader: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ZeroAdjustTimestamps: fn(
            self: *const IWMDRMTranscryptor2,
            fEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSeekStartTime: fn(
            self: *const IWMDRMTranscryptor2,
            pcnsTime: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDuration: fn(
            self: *const IWMDRMTranscryptor2,
            pcnsDuration: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMDRMTranscryptor.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMTranscryptor2_SeekEx(self: *const T, cnsStartTime: u64, cnsDuration: u64, flRate: f32, fIncludeFileHeader: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMTranscryptor2.VTable, self.vtable).SeekEx(@ptrCast(*const IWMDRMTranscryptor2, self), cnsStartTime, cnsDuration, flRate, fIncludeFileHeader);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMTranscryptor2_ZeroAdjustTimestamps(self: *const T, fEnable: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMTranscryptor2.VTable, self.vtable).ZeroAdjustTimestamps(@ptrCast(*const IWMDRMTranscryptor2, self), fEnable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMTranscryptor2_GetSeekStartTime(self: *const T, pcnsTime: ?*u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMTranscryptor2.VTable, self.vtable).GetSeekStartTime(@ptrCast(*const IWMDRMTranscryptor2, self), pcnsTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMTranscryptor2_GetDuration(self: *const T, pcnsDuration: ?*u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMTranscryptor2.VTable, self.vtable).GetDuration(@ptrCast(*const IWMDRMTranscryptor2, self), pcnsDuration);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDRMTranscryptionManager_Value = @import("../zig.zig").Guid.initString("b1a887b2-a4f0-407a-b02e-efbd23bbecdf");
pub const IID_IWMDRMTranscryptionManager = &IID_IWMDRMTranscryptionManager_Value;
pub const IWMDRMTranscryptionManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateTranscryptor: fn(
            self: *const IWMDRMTranscryptionManager,
            ppTranscryptor: ?*?*IWMDRMTranscryptor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMDRMTranscryptionManager_CreateTranscryptor(self: *const T, ppTranscryptor: ?*?*IWMDRMTranscryptor) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMDRMTranscryptionManager.VTable, self.vtable).CreateTranscryptor(@ptrCast(*const IWMDRMTranscryptionManager, self), ppTranscryptor);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWatermarkInfo_Value = @import("../zig.zig").Guid.initString("6f497062-f2e2-4624-8ea7-9dd40d81fc8d");
pub const IID_IWMWatermarkInfo = &IID_IWMWatermarkInfo_Value;
pub const IWMWatermarkInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetWatermarkEntryCount: fn(
            self: *const IWMWatermarkInfo,
            wmetType: WMT_WATERMARK_ENTRY_TYPE,
            pdwCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWatermarkEntry: fn(
            self: *const IWMWatermarkInfo,
            wmetType: WMT_WATERMARK_ENTRY_TYPE,
            dwEntryNum: u32,
            pEntry: ?*WMT_WATERMARK_ENTRY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWatermarkInfo_GetWatermarkEntryCount(self: *const T, wmetType: WMT_WATERMARK_ENTRY_TYPE, pdwCount: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWatermarkInfo.VTable, self.vtable).GetWatermarkEntryCount(@ptrCast(*const IWMWatermarkInfo, self), wmetType, pdwCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMWatermarkInfo_GetWatermarkEntry(self: *const T, wmetType: WMT_WATERMARK_ENTRY_TYPE, dwEntryNum: u32, pEntry: ?*WMT_WATERMARK_ENTRY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMWatermarkInfo.VTable, self.vtable).GetWatermarkEntry(@ptrCast(*const IWMWatermarkInfo, self), wmetType, dwEntryNum, pEntry);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderAccelerator_Value = @import("../zig.zig").Guid.initString("bddc4d08-944d-4d52-a612-46c3fda07dd4");
pub const IID_IWMReaderAccelerator = &IID_IWMReaderAccelerator_Value;
pub const IWMReaderAccelerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCodecInterface: fn(
            self: *const IWMReaderAccelerator,
            dwOutputNum: u32,
            riid: ?*const Guid,
            ppvCodecInterface: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Notify: fn(
            self: *const IWMReaderAccelerator,
            dwOutputNum: u32,
            pSubtype: ?*WM_MEDIA_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAccelerator_GetCodecInterface(self: *const T, dwOutputNum: u32, riid: ?*const Guid, ppvCodecInterface: ?*?*anyopaque) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAccelerator.VTable, self.vtable).GetCodecInterface(@ptrCast(*const IWMReaderAccelerator, self), dwOutputNum, riid, ppvCodecInterface);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderAccelerator_Notify(self: *const T, dwOutputNum: u32, pSubtype: ?*WM_MEDIA_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderAccelerator.VTable, self.vtable).Notify(@ptrCast(*const IWMReaderAccelerator, self), dwOutputNum, pSubtype);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderTimecode_Value = @import("../zig.zig").Guid.initString("f369e2f0-e081-4fe6-8450-b810b2f410d1");
pub const IID_IWMReaderTimecode = &IID_IWMReaderTimecode_Value;
pub const IWMReaderTimecode = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTimecodeRangeCount: fn(
            self: *const IWMReaderTimecode,
            wStreamNum: u16,
            pwRangeCount: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTimecodeRangeBounds: fn(
            self: *const IWMReaderTimecode,
            wStreamNum: u16,
            wRangeNum: u16,
            pStartTimecode: ?*u32,
            pEndTimecode: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderTimecode_GetTimecodeRangeCount(self: *const T, wStreamNum: u16, pwRangeCount: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderTimecode.VTable, self.vtable).GetTimecodeRangeCount(@ptrCast(*const IWMReaderTimecode, self), wStreamNum, pwRangeCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMReaderTimecode_GetTimecodeRangeBounds(self: *const T, wStreamNum: u16, wRangeNum: u16, pStartTimecode: ?*u32, pEndTimecode: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMReaderTimecode.VTable, self.vtable).GetTimecodeRangeBounds(@ptrCast(*const IWMReaderTimecode, self), wStreamNum, wRangeNum, pStartTimecode, pEndTimecode);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMAddressAccess_Value = @import("../zig.zig").Guid.initString("bb3c6389-1633-4e92-af14-9f3173ba39d0");
pub const IID_IWMAddressAccess = &IID_IWMAddressAccess_Value;
pub const IWMAddressAccess = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAccessEntryCount: fn(
            self: *const IWMAddressAccess,
            aeType: WM_AETYPE,
            pcEntries: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccessEntry: fn(
            self: *const IWMAddressAccess,
            aeType: WM_AETYPE,
            dwEntryNum: u32,
            pAddrAccessEntry: ?*WM_ADDRESS_ACCESSENTRY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAccessEntry: fn(
            self: *const IWMAddressAccess,
            aeType: WM_AETYPE,
            pAddrAccessEntry: ?*WM_ADDRESS_ACCESSENTRY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAccessEntry: fn(
            self: *const IWMAddressAccess,
            aeType: WM_AETYPE,
            dwEntryNum: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMAddressAccess_GetAccessEntryCount(self: *const T, aeType: WM_AETYPE, pcEntries: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMAddressAccess.VTable, self.vtable).GetAccessEntryCount(@ptrCast(*const IWMAddressAccess, self), aeType, pcEntries);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMAddressAccess_GetAccessEntry(self: *const T, aeType: WM_AETYPE, dwEntryNum: u32, pAddrAccessEntry: ?*WM_ADDRESS_ACCESSENTRY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMAddressAccess.VTable, self.vtable).GetAccessEntry(@ptrCast(*const IWMAddressAccess, self), aeType, dwEntryNum, pAddrAccessEntry);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMAddressAccess_AddAccessEntry(self: *const T, aeType: WM_AETYPE, pAddrAccessEntry: ?*WM_ADDRESS_ACCESSENTRY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMAddressAccess.VTable, self.vtable).AddAccessEntry(@ptrCast(*const IWMAddressAccess, self), aeType, pAddrAccessEntry);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMAddressAccess_RemoveAccessEntry(self: *const T, aeType: WM_AETYPE, dwEntryNum: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMAddressAccess.VTable, self.vtable).RemoveAccessEntry(@ptrCast(*const IWMAddressAccess, self), aeType, dwEntryNum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMAddressAccess2_Value = @import("../zig.zig").Guid.initString("65a83fc2-3e98-4d4d-81b5-2a742886b33d");
pub const IID_IWMAddressAccess2 = &IID_IWMAddressAccess2_Value;
pub const IWMAddressAccess2 = extern struct {
    pub const VTable = extern struct {
        base: IWMAddressAccess.VTable,
        GetAccessEntryEx: fn(
            self: *const IWMAddressAccess2,
            aeType: WM_AETYPE,
            dwEntryNum: u32,
            pbstrAddress: ?*?BSTR,
            pbstrMask: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAccessEntryEx: fn(
            self: *const IWMAddressAccess2,
            aeType: WM_AETYPE,
            bstrAddress: ?BSTR,
            bstrMask: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMAddressAccess.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMAddressAccess2_GetAccessEntryEx(self: *const T, aeType: WM_AETYPE, dwEntryNum: u32, pbstrAddress: ?*?BSTR, pbstrMask: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMAddressAccess2.VTable, self.vtable).GetAccessEntryEx(@ptrCast(*const IWMAddressAccess2, self), aeType, dwEntryNum, pbstrAddress, pbstrMask);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMAddressAccess2_AddAccessEntryEx(self: *const T, aeType: WM_AETYPE, bstrAddress: ?BSTR, bstrMask: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMAddressAccess2.VTable, self.vtable).AddAccessEntryEx(@ptrCast(*const IWMAddressAccess2, self), aeType, bstrAddress, bstrMask);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMImageInfo_Value = @import("../zig.zig").Guid.initString("9f0aa3b6-7267-4d89-88f2-ba915aa5c4c6");
pub const IID_IWMImageInfo = &IID_IWMImageInfo_Value;
pub const IWMImageInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetImageCount: fn(
            self: *const IWMImageInfo,
            pcImages: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImage: fn(
            self: *const IWMImageInfo,
            wIndex: u32,
            pcchMIMEType: ?*u16,
            pwszMIMEType: [*:0]u16,
            pcchDescription: ?*u16,
            pwszDescription: [*:0]u16,
            pImageType: ?*u16,
            pcbImageData: ?*u32,
            pbImageData: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMImageInfo_GetImageCount(self: *const T, pcImages: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMImageInfo.VTable, self.vtable).GetImageCount(@ptrCast(*const IWMImageInfo, self), pcImages);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMImageInfo_GetImage(self: *const T, wIndex: u32, pcchMIMEType: ?*u16, pwszMIMEType: [*:0]u16, pcchDescription: ?*u16, pwszDescription: [*:0]u16, pImageType: ?*u16, pcbImageData: ?*u32, pbImageData: [*:0]u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMImageInfo.VTable, self.vtable).GetImage(@ptrCast(*const IWMImageInfo, self), wIndex, pcchMIMEType, pwszMIMEType, pcchDescription, pwszDescription, pImageType, pcbImageData, pbImageData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMLicenseRevocationAgent_Value = @import("../zig.zig").Guid.initString("6967f2c9-4e26-4b57-8894-799880f7ac7b");
pub const IID_IWMLicenseRevocationAgent = &IID_IWMLicenseRevocationAgent_Value;
pub const IWMLicenseRevocationAgent = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLRBChallenge: fn(
            self: *const IWMLicenseRevocationAgent,
            pMachineID: ?*u8,
            dwMachineIDLength: u32,
            pChallenge: ?*u8,
            dwChallengeLength: u32,
            pChallengeOutput: ?*u8,
            pdwChallengeOutputLength: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessLRB: fn(
            self: *const IWMLicenseRevocationAgent,
            pSignedLRB: ?*u8,
            dwSignedLRBLength: u32,
            pSignedACK: ?*u8,
            pdwSignedACKLength: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMLicenseRevocationAgent_GetLRBChallenge(self: *const T, pMachineID: ?*u8, dwMachineIDLength: u32, pChallenge: ?*u8, dwChallengeLength: u32, pChallengeOutput: ?*u8, pdwChallengeOutputLength: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMLicenseRevocationAgent.VTable, self.vtable).GetLRBChallenge(@ptrCast(*const IWMLicenseRevocationAgent, self), pMachineID, dwMachineIDLength, pChallenge, dwChallengeLength, pChallengeOutput, pdwChallengeOutputLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMLicenseRevocationAgent_ProcessLRB(self: *const T, pSignedLRB: ?*u8, dwSignedLRBLength: u32, pSignedACK: ?*u8, pdwSignedACKLength: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMLicenseRevocationAgent.VTable, self.vtable).ProcessLRB(@ptrCast(*const IWMLicenseRevocationAgent, self), pSignedLRB, dwSignedLRBLength, pSignedACK, pdwSignedACKLength);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWMAuthorizer_Value = @import("../zig.zig").Guid.initString("d9b67d36-a9ad-4eb4-baef-db284ef5504c");
pub const IID_IWMAuthorizer = &IID_IWMAuthorizer_Value;
pub const IWMAuthorizer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCertCount: fn(
            self: *const IWMAuthorizer,
            pcCerts: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCert: fn(
            self: *const IWMAuthorizer,
            dwIndex: u32,
            ppbCertData: ?*?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSharedData: fn(
            self: *const IWMAuthorizer,
            dwCertIndex: u32,
            pbSharedData: ?*const u8,
            pbCert: ?*u8,
            ppbSharedData: ?*?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMAuthorizer_GetCertCount(self: *const T, pcCerts: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMAuthorizer.VTable, self.vtable).GetCertCount(@ptrCast(*const IWMAuthorizer, self), pcCerts);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMAuthorizer_GetCert(self: *const T, dwIndex: u32, ppbCertData: ?*?*u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMAuthorizer.VTable, self.vtable).GetCert(@ptrCast(*const IWMAuthorizer, self), dwIndex, ppbCertData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMAuthorizer_GetSharedData(self: *const T, dwCertIndex: u32, pbSharedData: ?*const u8, pbCert: ?*u8, ppbSharedData: ?*?*u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMAuthorizer.VTable, self.vtable).GetSharedData(@ptrCast(*const IWMAuthorizer, self), dwCertIndex, pbSharedData, pbCert, ppbSharedData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWMSecureChannel_Value = @import("../zig.zig").Guid.initString("2720598a-d0f2-4189-bd10-91c46ef0936f");
pub const IID_IWMSecureChannel = &IID_IWMSecureChannel_Value;
pub const IWMSecureChannel = extern struct {
    pub const VTable = extern struct {
        base: IWMAuthorizer.VTable,
        WMSC_AddCertificate: fn(
            self: *const IWMSecureChannel,
            pCert: ?*IWMAuthorizer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_AddSignature: fn(
            self: *const IWMSecureChannel,
            pbCertSig: ?*u8,
            cbCertSig: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_Connect: fn(
            self: *const IWMSecureChannel,
            pOtherSide: ?*IWMSecureChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_IsConnected: fn(
            self: *const IWMSecureChannel,
            pfIsConnected: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_Disconnect: fn(
            self: *const IWMSecureChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_GetValidCertificate: fn(
            self: *const IWMSecureChannel,
            ppbCertificate: ?*?*u8,
            pdwSignature: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_Encrypt: fn(
            self: *const IWMSecureChannel,
            pbData: ?*u8,
            cbData: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_Decrypt: fn(
            self: *const IWMSecureChannel,
            pbData: ?*u8,
            cbData: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_Lock: fn(
            self: *const IWMSecureChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_Unlock: fn(
            self: *const IWMSecureChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_SetSharedData: fn(
            self: *const IWMSecureChannel,
            dwCertIndex: u32,
            pbSharedData: ?*const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMAuthorizer.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSecureChannel_WMSC_AddCertificate(self: *const T, pCert: ?*IWMAuthorizer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSecureChannel.VTable, self.vtable).WMSC_AddCertificate(@ptrCast(*const IWMSecureChannel, self), pCert);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSecureChannel_WMSC_AddSignature(self: *const T, pbCertSig: ?*u8, cbCertSig: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSecureChannel.VTable, self.vtable).WMSC_AddSignature(@ptrCast(*const IWMSecureChannel, self), pbCertSig, cbCertSig);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSecureChannel_WMSC_Connect(self: *const T, pOtherSide: ?*IWMSecureChannel) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSecureChannel.VTable, self.vtable).WMSC_Connect(@ptrCast(*const IWMSecureChannel, self), pOtherSide);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSecureChannel_WMSC_IsConnected(self: *const T, pfIsConnected: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSecureChannel.VTable, self.vtable).WMSC_IsConnected(@ptrCast(*const IWMSecureChannel, self), pfIsConnected);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSecureChannel_WMSC_Disconnect(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSecureChannel.VTable, self.vtable).WMSC_Disconnect(@ptrCast(*const IWMSecureChannel, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSecureChannel_WMSC_GetValidCertificate(self: *const T, ppbCertificate: ?*?*u8, pdwSignature: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSecureChannel.VTable, self.vtable).WMSC_GetValidCertificate(@ptrCast(*const IWMSecureChannel, self), ppbCertificate, pdwSignature);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSecureChannel_WMSC_Encrypt(self: *const T, pbData: ?*u8, cbData: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSecureChannel.VTable, self.vtable).WMSC_Encrypt(@ptrCast(*const IWMSecureChannel, self), pbData, cbData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSecureChannel_WMSC_Decrypt(self: *const T, pbData: ?*u8, cbData: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSecureChannel.VTable, self.vtable).WMSC_Decrypt(@ptrCast(*const IWMSecureChannel, self), pbData, cbData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSecureChannel_WMSC_Lock(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSecureChannel.VTable, self.vtable).WMSC_Lock(@ptrCast(*const IWMSecureChannel, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSecureChannel_WMSC_Unlock(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSecureChannel.VTable, self.vtable).WMSC_Unlock(@ptrCast(*const IWMSecureChannel, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSecureChannel_WMSC_SetSharedData(self: *const T, dwCertIndex: u32, pbSharedData: ?*const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSecureChannel.VTable, self.vtable).WMSC_SetSharedData(@ptrCast(*const IWMSecureChannel, self), dwCertIndex, pbSharedData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWMGetSecureChannel_Value = @import("../zig.zig").Guid.initString("94bc0598-c3d2-11d3-bedf-00c04f612986");
pub const IID_IWMGetSecureChannel = &IID_IWMGetSecureChannel_Value;
pub const IWMGetSecureChannel = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPeerSecureChannelInterface: fn(
            self: *const IWMGetSecureChannel,
            ppPeer: ?*?*IWMSecureChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMGetSecureChannel_GetPeerSecureChannelInterface(self: *const T, ppPeer: ?*?*IWMSecureChannel) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMGetSecureChannel.VTable, self.vtable).GetPeerSecureChannelInterface(@ptrCast(*const IWMGetSecureChannel, self), ppPeer);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_INSNetSourceCreator_Value = @import("../zig.zig").Guid.initString("0c0e4080-9081-11d2-beec-0060082f2054");
pub const IID_INSNetSourceCreator = &IID_INSNetSourceCreator_Value;
pub const INSNetSourceCreator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const INSNetSourceCreator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateNetSource: fn(
            self: *const INSNetSourceCreator,
            pszStreamName: ?[*:0]const u16,
            pMonitor: ?*IUnknown,
            pData: ?*u8,
            pUserContext: ?*IUnknown,
            pCallback: ?*IUnknown,
            qwContext: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetSourceProperties: fn(
            self: *const INSNetSourceCreator,
            pszStreamName: ?[*:0]const u16,
            ppPropertiesNode: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetSourceSharedNamespace: fn(
            self: *const INSNetSourceCreator,
            ppSharedNamespace: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetSourceAdminInterface: fn(
            self: *const INSNetSourceCreator,
            pszStreamName: ?[*:0]const u16,
            pVal: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumProtocolsSupported: fn(
            self: *const INSNetSourceCreator,
            pcProtocols: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProtocolName: fn(
            self: *const INSNetSourceCreator,
            dwProtocolNum: u32,
            pwszProtocolName: ?PWSTR,
            pcchProtocolName: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Shutdown: fn(
            self: *const INSNetSourceCreator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INSNetSourceCreator_Initialize(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const INSNetSourceCreator.VTable, self.vtable).Initialize(@ptrCast(*const INSNetSourceCreator, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INSNetSourceCreator_CreateNetSource(self: *const T, pszStreamName: ?[*:0]const u16, pMonitor: ?*IUnknown, pData: ?*u8, pUserContext: ?*IUnknown, pCallback: ?*IUnknown, qwContext: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const INSNetSourceCreator.VTable, self.vtable).CreateNetSource(@ptrCast(*const INSNetSourceCreator, self), pszStreamName, pMonitor, pData, pUserContext, pCallback, qwContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INSNetSourceCreator_GetNetSourceProperties(self: *const T, pszStreamName: ?[*:0]const u16, ppPropertiesNode: ?*?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const INSNetSourceCreator.VTable, self.vtable).GetNetSourceProperties(@ptrCast(*const INSNetSourceCreator, self), pszStreamName, ppPropertiesNode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INSNetSourceCreator_GetNetSourceSharedNamespace(self: *const T, ppSharedNamespace: ?*?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const INSNetSourceCreator.VTable, self.vtable).GetNetSourceSharedNamespace(@ptrCast(*const INSNetSourceCreator, self), ppSharedNamespace);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INSNetSourceCreator_GetNetSourceAdminInterface(self: *const T, pszStreamName: ?[*:0]const u16, pVal: ?*VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const INSNetSourceCreator.VTable, self.vtable).GetNetSourceAdminInterface(@ptrCast(*const INSNetSourceCreator, self), pszStreamName, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INSNetSourceCreator_GetNumProtocolsSupported(self: *const T, pcProtocols: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INSNetSourceCreator.VTable, self.vtable).GetNumProtocolsSupported(@ptrCast(*const INSNetSourceCreator, self), pcProtocols);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INSNetSourceCreator_GetProtocolName(self: *const T, dwProtocolNum: u32, pwszProtocolName: ?PWSTR, pcchProtocolName: ?*u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const INSNetSourceCreator.VTable, self.vtable).GetProtocolName(@ptrCast(*const INSNetSourceCreator, self), dwProtocolNum, pwszProtocolName, pcchProtocolName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INSNetSourceCreator_Shutdown(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const INSNetSourceCreator.VTable, self.vtable).Shutdown(@ptrCast(*const INSNetSourceCreator, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPlayerTimestampHook_Value = @import("../zig.zig").Guid.initString("28580dda-d98e-48d0-b7ae-69e473a02825");
pub const IID_IWMPlayerTimestampHook = &IID_IWMPlayerTimestampHook_Value;
pub const IWMPlayerTimestampHook = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MapTimestamp: fn(
            self: *const IWMPlayerTimestampHook,
            rtIn: i64,
            prtOut: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMPlayerTimestampHook_MapTimestamp(self: *const T, rtIn: i64, prtOut: ?*i64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMPlayerTimestampHook.VTable, self.vtable).MapTimestamp(@ptrCast(*const IWMPlayerTimestampHook, self), rtIn, prtOut);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMCodecAMVideoAccelerator_Value = @import("../zig.zig").Guid.initString("d98ee251-34e0-4a2d-9312-9b4c788d9fa1");
pub const IID_IWMCodecAMVideoAccelerator = &IID_IWMCodecAMVideoAccelerator_Value;
pub const IWMCodecAMVideoAccelerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAcceleratorInterface: fn(
            self: *const IWMCodecAMVideoAccelerator,
            pIAMVA: ?*IAMVideoAccelerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NegotiateConnection: fn(
            self: *const IWMCodecAMVideoAccelerator,
            pMediaType: ?*AM_MEDIA_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPlayerNotify: fn(
            self: *const IWMCodecAMVideoAccelerator,
            pHook: ?*IWMPlayerTimestampHook,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMCodecAMVideoAccelerator_SetAcceleratorInterface(self: *const T, pIAMVA: ?*IAMVideoAccelerator) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMCodecAMVideoAccelerator.VTable, self.vtable).SetAcceleratorInterface(@ptrCast(*const IWMCodecAMVideoAccelerator, self), pIAMVA);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMCodecAMVideoAccelerator_NegotiateConnection(self: *const T, pMediaType: ?*AM_MEDIA_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMCodecAMVideoAccelerator.VTable, self.vtable).NegotiateConnection(@ptrCast(*const IWMCodecAMVideoAccelerator, self), pMediaType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMCodecAMVideoAccelerator_SetPlayerNotify(self: *const T, pHook: ?*IWMPlayerTimestampHook) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMCodecAMVideoAccelerator.VTable, self.vtable).SetPlayerNotify(@ptrCast(*const IWMCodecAMVideoAccelerator, self), pHook);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMCodecVideoAccelerator_Value = @import("../zig.zig").Guid.initString("990641b0-739f-4e94-a808-9888da8f75af");
pub const IID_IWMCodecVideoAccelerator = &IID_IWMCodecVideoAccelerator_Value;
pub const IWMCodecVideoAccelerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NegotiateConnection: fn(
            self: *const IWMCodecVideoAccelerator,
            pIAMVA: ?*IAMVideoAccelerator,
            pMediaType: ?*AM_MEDIA_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPlayerNotify: fn(
            self: *const IWMCodecVideoAccelerator,
            pHook: ?*IWMPlayerTimestampHook,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMCodecVideoAccelerator_NegotiateConnection(self: *const T, pIAMVA: ?*IAMVideoAccelerator, pMediaType: ?*AM_MEDIA_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMCodecVideoAccelerator.VTable, self.vtable).NegotiateConnection(@ptrCast(*const IWMCodecVideoAccelerator, self), pIAMVA, pMediaType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMCodecVideoAccelerator_SetPlayerNotify(self: *const T, pHook: ?*IWMPlayerTimestampHook) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMCodecVideoAccelerator.VTable, self.vtable).SetPlayerNotify(@ptrCast(*const IWMCodecVideoAccelerator, self), pHook);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const NETSOURCE_URLCREDPOLICY_SETTINGS = enum(i32) {
    SILENTLOGONOK = 0,
    MUSTPROMPTUSER = 1,
    ANONYMOUSONLY = 2,
};
pub const NETSOURCE_URLCREDPOLICY_SETTING_SILENTLOGONOK = NETSOURCE_URLCREDPOLICY_SETTINGS.SILENTLOGONOK;
pub const NETSOURCE_URLCREDPOLICY_SETTING_MUSTPROMPTUSER = NETSOURCE_URLCREDPOLICY_SETTINGS.MUSTPROMPTUSER;
pub const NETSOURCE_URLCREDPOLICY_SETTING_ANONYMOUSONLY = NETSOURCE_URLCREDPOLICY_SETTINGS.ANONYMOUSONLY;

const IID_IWMSInternalAdminNetSource_Value = @import("../zig.zig").Guid.initString("8bb23e5f-d127-4afb-8d02-ae5b66d54c78");
pub const IID_IWMSInternalAdminNetSource = &IID_IWMSInternalAdminNetSource_Value;
pub const IWMSInternalAdminNetSource = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IWMSInternalAdminNetSource,
            pSharedNamespace: ?*IUnknown,
            pNamespaceNode: ?*IUnknown,
            pNetSourceCreator: ?*INSNetSourceCreator,
            fEmbeddedInServer: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetSourceCreator: fn(
            self: *const IWMSInternalAdminNetSource,
            ppNetSourceCreator: ?*?*INSNetSourceCreator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCredentials: fn(
            self: *const IWMSInternalAdminNetSource,
            bstrRealm: ?BSTR,
            bstrName: ?BSTR,
            bstrPassword: ?BSTR,
            fPersist: BOOL,
            fConfirmedGood: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCredentials: fn(
            self: *const IWMSInternalAdminNetSource,
            bstrRealm: ?BSTR,
            pbstrName: ?*?BSTR,
            pbstrPassword: ?*?BSTR,
            pfConfirmedGood: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteCredentials: fn(
            self: *const IWMSInternalAdminNetSource,
            bstrRealm: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCredentialFlags: fn(
            self: *const IWMSInternalAdminNetSource,
            lpdwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCredentialFlags: fn(
            self: *const IWMSInternalAdminNetSource,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindProxyForURL: fn(
            self: *const IWMSInternalAdminNetSource,
            bstrProtocol: ?BSTR,
            bstrHost: ?BSTR,
            pfProxyEnabled: ?*BOOL,
            pbstrProxyServer: ?*?BSTR,
            pdwProxyPort: ?*u32,
            pdwProxyContext: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterProxyFailure: fn(
            self: *const IWMSInternalAdminNetSource,
            hrParam: HRESULT,
            dwProxyContext: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShutdownProxyContext: fn(
            self: *const IWMSInternalAdminNetSource,
            dwProxyContext: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsUsingIE: fn(
            self: *const IWMSInternalAdminNetSource,
            dwProxyContext: u32,
            pfIsUsingIE: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource_Initialize(self: *const T, pSharedNamespace: ?*IUnknown, pNamespaceNode: ?*IUnknown, pNetSourceCreator: ?*INSNetSourceCreator, fEmbeddedInServer: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource.VTable, self.vtable).Initialize(@ptrCast(*const IWMSInternalAdminNetSource, self), pSharedNamespace, pNamespaceNode, pNetSourceCreator, fEmbeddedInServer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource_GetNetSourceCreator(self: *const T, ppNetSourceCreator: ?*?*INSNetSourceCreator) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource.VTable, self.vtable).GetNetSourceCreator(@ptrCast(*const IWMSInternalAdminNetSource, self), ppNetSourceCreator);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource_SetCredentials(self: *const T, bstrRealm: ?BSTR, bstrName: ?BSTR, bstrPassword: ?BSTR, fPersist: BOOL, fConfirmedGood: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource.VTable, self.vtable).SetCredentials(@ptrCast(*const IWMSInternalAdminNetSource, self), bstrRealm, bstrName, bstrPassword, fPersist, fConfirmedGood);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource_GetCredentials(self: *const T, bstrRealm: ?BSTR, pbstrName: ?*?BSTR, pbstrPassword: ?*?BSTR, pfConfirmedGood: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource.VTable, self.vtable).GetCredentials(@ptrCast(*const IWMSInternalAdminNetSource, self), bstrRealm, pbstrName, pbstrPassword, pfConfirmedGood);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource_DeleteCredentials(self: *const T, bstrRealm: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource.VTable, self.vtable).DeleteCredentials(@ptrCast(*const IWMSInternalAdminNetSource, self), bstrRealm);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource_GetCredentialFlags(self: *const T, lpdwFlags: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource.VTable, self.vtable).GetCredentialFlags(@ptrCast(*const IWMSInternalAdminNetSource, self), lpdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource_SetCredentialFlags(self: *const T, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource.VTable, self.vtable).SetCredentialFlags(@ptrCast(*const IWMSInternalAdminNetSource, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource_FindProxyForURL(self: *const T, bstrProtocol: ?BSTR, bstrHost: ?BSTR, pfProxyEnabled: ?*BOOL, pbstrProxyServer: ?*?BSTR, pdwProxyPort: ?*u32, pdwProxyContext: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource.VTable, self.vtable).FindProxyForURL(@ptrCast(*const IWMSInternalAdminNetSource, self), bstrProtocol, bstrHost, pfProxyEnabled, pbstrProxyServer, pdwProxyPort, pdwProxyContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource_RegisterProxyFailure(self: *const T, hrParam: HRESULT, dwProxyContext: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource.VTable, self.vtable).RegisterProxyFailure(@ptrCast(*const IWMSInternalAdminNetSource, self), hrParam, dwProxyContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource_ShutdownProxyContext(self: *const T, dwProxyContext: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource.VTable, self.vtable).ShutdownProxyContext(@ptrCast(*const IWMSInternalAdminNetSource, self), dwProxyContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource_IsUsingIE(self: *const T, dwProxyContext: u32, pfIsUsingIE: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource.VTable, self.vtable).IsUsingIE(@ptrCast(*const IWMSInternalAdminNetSource, self), dwProxyContext, pfIsUsingIE);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMSInternalAdminNetSource2_Value = @import("../zig.zig").Guid.initString("e74d58c3-cf77-4b51-af17-744687c43eae");
pub const IID_IWMSInternalAdminNetSource2 = &IID_IWMSInternalAdminNetSource2_Value;
pub const IWMSInternalAdminNetSource2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetCredentialsEx: fn(
            self: *const IWMSInternalAdminNetSource2,
            bstrRealm: ?BSTR,
            bstrUrl: ?BSTR,
            fProxy: BOOL,
            bstrName: ?BSTR,
            bstrPassword: ?BSTR,
            fPersist: BOOL,
            fConfirmedGood: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCredentialsEx: fn(
            self: *const IWMSInternalAdminNetSource2,
            bstrRealm: ?BSTR,
            bstrUrl: ?BSTR,
            fProxy: BOOL,
            pdwUrlPolicy: ?*NETSOURCE_URLCREDPOLICY_SETTINGS,
            pbstrName: ?*?BSTR,
            pbstrPassword: ?*?BSTR,
            pfConfirmedGood: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteCredentialsEx: fn(
            self: *const IWMSInternalAdminNetSource2,
            bstrRealm: ?BSTR,
            bstrUrl: ?BSTR,
            fProxy: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindProxyForURLEx: fn(
            self: *const IWMSInternalAdminNetSource2,
            bstrProtocol: ?BSTR,
            bstrHost: ?BSTR,
            bstrUrl: ?BSTR,
            pfProxyEnabled: ?*BOOL,
            pbstrProxyServer: ?*?BSTR,
            pdwProxyPort: ?*u32,
            pdwProxyContext: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource2_SetCredentialsEx(self: *const T, bstrRealm: ?BSTR, bstrUrl: ?BSTR, fProxy: BOOL, bstrName: ?BSTR, bstrPassword: ?BSTR, fPersist: BOOL, fConfirmedGood: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource2.VTable, self.vtable).SetCredentialsEx(@ptrCast(*const IWMSInternalAdminNetSource2, self), bstrRealm, bstrUrl, fProxy, bstrName, bstrPassword, fPersist, fConfirmedGood);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource2_GetCredentialsEx(self: *const T, bstrRealm: ?BSTR, bstrUrl: ?BSTR, fProxy: BOOL, pdwUrlPolicy: ?*NETSOURCE_URLCREDPOLICY_SETTINGS, pbstrName: ?*?BSTR, pbstrPassword: ?*?BSTR, pfConfirmedGood: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource2.VTable, self.vtable).GetCredentialsEx(@ptrCast(*const IWMSInternalAdminNetSource2, self), bstrRealm, bstrUrl, fProxy, pdwUrlPolicy, pbstrName, pbstrPassword, pfConfirmedGood);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource2_DeleteCredentialsEx(self: *const T, bstrRealm: ?BSTR, bstrUrl: ?BSTR, fProxy: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource2.VTable, self.vtable).DeleteCredentialsEx(@ptrCast(*const IWMSInternalAdminNetSource2, self), bstrRealm, bstrUrl, fProxy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource2_FindProxyForURLEx(self: *const T, bstrProtocol: ?BSTR, bstrHost: ?BSTR, bstrUrl: ?BSTR, pfProxyEnabled: ?*BOOL, pbstrProxyServer: ?*?BSTR, pdwProxyPort: ?*u32, pdwProxyContext: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource2.VTable, self.vtable).FindProxyForURLEx(@ptrCast(*const IWMSInternalAdminNetSource2, self), bstrProtocol, bstrHost, bstrUrl, pfProxyEnabled, pbstrProxyServer, pdwProxyPort, pdwProxyContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMSInternalAdminNetSource3_Value = @import("../zig.zig").Guid.initString("6b63d08e-4590-44af-9eb3-57ff1e73bf80");
pub const IID_IWMSInternalAdminNetSource3 = &IID_IWMSInternalAdminNetSource3_Value;
pub const IWMSInternalAdminNetSource3 = extern struct {
    pub const VTable = extern struct {
        base: IWMSInternalAdminNetSource2.VTable,
        GetNetSourceCreator2: fn(
            self: *const IWMSInternalAdminNetSource3,
            ppNetSourceCreator: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindProxyForURLEx2: fn(
            self: *const IWMSInternalAdminNetSource3,
            bstrProtocol: ?BSTR,
            bstrHost: ?BSTR,
            bstrUrl: ?BSTR,
            pfProxyEnabled: ?*BOOL,
            pbstrProxyServer: ?*?BSTR,
            pdwProxyPort: ?*u32,
            pqwProxyContext: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterProxyFailure2: fn(
            self: *const IWMSInternalAdminNetSource3,
            hrParam: HRESULT,
            qwProxyContext: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShutdownProxyContext2: fn(
            self: *const IWMSInternalAdminNetSource3,
            qwProxyContext: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsUsingIE2: fn(
            self: *const IWMSInternalAdminNetSource3,
            qwProxyContext: u64,
            pfIsUsingIE: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCredentialsEx2: fn(
            self: *const IWMSInternalAdminNetSource3,
            bstrRealm: ?BSTR,
            bstrUrl: ?BSTR,
            fProxy: BOOL,
            bstrName: ?BSTR,
            bstrPassword: ?BSTR,
            fPersist: BOOL,
            fConfirmedGood: BOOL,
            fClearTextAuthentication: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCredentialsEx2: fn(
            self: *const IWMSInternalAdminNetSource3,
            bstrRealm: ?BSTR,
            bstrUrl: ?BSTR,
            fProxy: BOOL,
            fClearTextAuthentication: BOOL,
            pdwUrlPolicy: ?*NETSOURCE_URLCREDPOLICY_SETTINGS,
            pbstrName: ?*?BSTR,
            pbstrPassword: ?*?BSTR,
            pfConfirmedGood: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWMSInternalAdminNetSource2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource3_GetNetSourceCreator2(self: *const T, ppNetSourceCreator: ?*?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource3.VTable, self.vtable).GetNetSourceCreator2(@ptrCast(*const IWMSInternalAdminNetSource3, self), ppNetSourceCreator);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource3_FindProxyForURLEx2(self: *const T, bstrProtocol: ?BSTR, bstrHost: ?BSTR, bstrUrl: ?BSTR, pfProxyEnabled: ?*BOOL, pbstrProxyServer: ?*?BSTR, pdwProxyPort: ?*u32, pqwProxyContext: ?*u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource3.VTable, self.vtable).FindProxyForURLEx2(@ptrCast(*const IWMSInternalAdminNetSource3, self), bstrProtocol, bstrHost, bstrUrl, pfProxyEnabled, pbstrProxyServer, pdwProxyPort, pqwProxyContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource3_RegisterProxyFailure2(self: *const T, hrParam: HRESULT, qwProxyContext: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource3.VTable, self.vtable).RegisterProxyFailure2(@ptrCast(*const IWMSInternalAdminNetSource3, self), hrParam, qwProxyContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource3_ShutdownProxyContext2(self: *const T, qwProxyContext: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource3.VTable, self.vtable).ShutdownProxyContext2(@ptrCast(*const IWMSInternalAdminNetSource3, self), qwProxyContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource3_IsUsingIE2(self: *const T, qwProxyContext: u64, pfIsUsingIE: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource3.VTable, self.vtable).IsUsingIE2(@ptrCast(*const IWMSInternalAdminNetSource3, self), qwProxyContext, pfIsUsingIE);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource3_SetCredentialsEx2(self: *const T, bstrRealm: ?BSTR, bstrUrl: ?BSTR, fProxy: BOOL, bstrName: ?BSTR, bstrPassword: ?BSTR, fPersist: BOOL, fConfirmedGood: BOOL, fClearTextAuthentication: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource3.VTable, self.vtable).SetCredentialsEx2(@ptrCast(*const IWMSInternalAdminNetSource3, self), bstrRealm, bstrUrl, fProxy, bstrName, bstrPassword, fPersist, fConfirmedGood, fClearTextAuthentication);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWMSInternalAdminNetSource3_GetCredentialsEx2(self: *const T, bstrRealm: ?BSTR, bstrUrl: ?BSTR, fProxy: BOOL, fClearTextAuthentication: BOOL, pdwUrlPolicy: ?*NETSOURCE_URLCREDPOLICY_SETTINGS, pbstrName: ?*?BSTR, pbstrPassword: ?*?BSTR, pfConfirmedGood: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWMSInternalAdminNetSource3.VTable, self.vtable).GetCredentialsEx2(@ptrCast(*const IWMSInternalAdminNetSource3, self), bstrRealm, bstrUrl, fProxy, fClearTextAuthentication, pdwUrlPolicy, pbstrName, pbstrPassword, pfConfirmedGood);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (11)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "WMVCore" fn WMIsContentProtected(
    pwszFileName: ?[*:0]const u16,
    pfIsProtected: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "WMVCore" fn WMCreateWriter(
    pUnkCert: ?*IUnknown,
    ppWriter: ?*?*IWMWriter,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "WMVCore" fn WMCreateReader(
    pUnkCert: ?*IUnknown,
    dwRights: u32,
    ppReader: ?*?*IWMReader,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "WMVCore" fn WMCreateSyncReader(
    pUnkCert: ?*IUnknown,
    dwRights: u32,
    ppSyncReader: ?*?*IWMSyncReader,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "WMVCore" fn WMCreateEditor(
    ppEditor: ?*?*IWMMetadataEditor,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "WMVCore" fn WMCreateIndexer(
    ppIndexer: ?*?*IWMIndexer,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "WMVCore" fn WMCreateBackupRestorer(
    pCallback: ?*IUnknown,
    ppBackup: ?*?*IWMLicenseBackup,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "WMVCore" fn WMCreateProfileManager(
    ppProfileManager: ?*?*IWMProfileManager,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "WMVCore" fn WMCreateWriterFileSink(
    ppSink: ?*?*IWMWriterFileSink,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "WMVCore" fn WMCreateWriterNetworkSink(
    ppSink: ?*?*IWMWriterNetworkSink,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "WMVCore" fn WMCreateWriterPushSink(
    ppSink: ?*?*IWMWriterPushSink,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (14)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const AM_MEDIA_TYPE = @import("../media/direct_show.zig").AM_MEDIA_TYPE;
const BITMAPINFOHEADER = @import("../graphics/gdi.zig").BITMAPINFOHEADER;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const IAMVideoAccelerator = @import("../media/direct_show.zig").IAMVideoAccelerator;
const IPin = @import("../media/direct_show.zig").IPin;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const LPARAM = @import("../foundation.zig").LPARAM;
const PWSTR = @import("../foundation.zig").PWSTR;
const RECT = @import("../foundation.zig").RECT;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
