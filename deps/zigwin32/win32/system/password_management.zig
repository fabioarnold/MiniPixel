//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (4)
//--------------------------------------------------------------------------------
pub const CYPHER_BLOCK = extern struct {
    data: [8]CHAR,
};

pub const LM_OWF_PASSWORD = extern struct {
    data: [2]CYPHER_BLOCK,
};

pub const SAMPR_ENCRYPTED_USER_PASSWORD = extern struct {
    Buffer: [516]u8,
};

pub const ENCRYPTED_LM_OWF_PASSWORD = extern struct {
    data: [2]CYPHER_BLOCK,
};


//--------------------------------------------------------------------------------
// Section: Functions (2)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "ADVAPI32" fn MSChapSrvChangePassword(
    ServerName: ?PWSTR,
    UserName: ?PWSTR,
    LmOldPresent: BOOLEAN,
    LmOldOwfPassword: ?*LM_OWF_PASSWORD,
    LmNewOwfPassword: ?*LM_OWF_PASSWORD,
    NtOldOwfPassword: ?*LM_OWF_PASSWORD,
    NtNewOwfPassword: ?*LM_OWF_PASSWORD,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "ADVAPI32" fn MSChapSrvChangePassword2(
    ServerName: ?PWSTR,
    UserName: ?PWSTR,
    NewPasswordEncryptedWithOldNt: ?*SAMPR_ENCRYPTED_USER_PASSWORD,
    OldNtOwfPasswordEncryptedWithNewNt: ?*ENCRYPTED_LM_OWF_PASSWORD,
    LmPresent: BOOLEAN,
    NewPasswordEncryptedWithOldLm: ?*SAMPR_ENCRYPTED_USER_PASSWORD,
    OldLmOwfPasswordEncryptedWithNewLmOrNt: ?*ENCRYPTED_LM_OWF_PASSWORD,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (3)
//--------------------------------------------------------------------------------
const BOOLEAN = @import("../foundation.zig").BOOLEAN;
const CHAR = @import("../foundation.zig").CHAR;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
