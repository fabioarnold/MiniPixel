//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (7)
//--------------------------------------------------------------------------------
pub const CGD_DEFAULT = @as(u32, 0);
pub const CGD_UNKNOWN_PROPERTY = @as(u32, 0);
pub const CGD_STRING_PROPERTY = @as(u32, 1);
pub const CGD_DATE_PROPERTY = @as(u32, 2);
pub const CGD_BINARY_PROPERTY = @as(u32, 4);
pub const CGD_ARRAY_NODE = @as(u32, 8);
pub const CLSID_ContactAggregationManager = Guid.initString("96c8ad95-c199-44de-b34e-ac33c442df39");

//--------------------------------------------------------------------------------
// Section: Types (21)
//--------------------------------------------------------------------------------
const CLSID_Contact_Value = @import("../zig.zig").Guid.initString("61b68808-8eee-4fd1-acb8-3d804c8db056");
pub const CLSID_Contact = &CLSID_Contact_Value;

const CLSID_ContactManager_Value = @import("../zig.zig").Guid.initString("7165c8ab-af88-42bd-86fd-5310b4285a02");
pub const CLSID_ContactManager = &CLSID_ContactManager_Value;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContactManager_Value = @import("../zig.zig").Guid.initString("ad553d98-deb1-474a-8e17-fc0c2075b738");
pub const IID_IContactManager = &IID_IContactManager_Value;
pub const IContactManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IContactManager,
            pszAppName: ?[*:0]const u16,
            pszAppVersion: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Load: fn(
            self: *const IContactManager,
            pszContactID: ?[*:0]const u16,
            ppContact: ?*?*IContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MergeContactIDs: fn(
            self: *const IContactManager,
            pszNewContactID: ?[*:0]const u16,
            pszOldContactID: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMeContact: fn(
            self: *const IContactManager,
            ppMeContact: ?*?*IContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMeContact: fn(
            self: *const IContactManager,
            pMeContact: ?*IContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContactCollection: fn(
            self: *const IContactManager,
            ppContactCollection: ?*?*IContactCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactManager_Initialize(self: *const T, pszAppName: ?[*:0]const u16, pszAppVersion: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactManager.VTable, self.vtable).Initialize(@ptrCast(*const IContactManager, self), pszAppName, pszAppVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactManager_Load(self: *const T, pszContactID: ?[*:0]const u16, ppContact: ?*?*IContact) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactManager.VTable, self.vtable).Load(@ptrCast(*const IContactManager, self), pszContactID, ppContact);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactManager_MergeContactIDs(self: *const T, pszNewContactID: ?[*:0]const u16, pszOldContactID: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactManager.VTable, self.vtable).MergeContactIDs(@ptrCast(*const IContactManager, self), pszNewContactID, pszOldContactID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactManager_GetMeContact(self: *const T, ppMeContact: ?*?*IContact) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactManager.VTable, self.vtable).GetMeContact(@ptrCast(*const IContactManager, self), ppMeContact);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactManager_SetMeContact(self: *const T, pMeContact: ?*IContact) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactManager.VTable, self.vtable).SetMeContact(@ptrCast(*const IContactManager, self), pMeContact);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactManager_GetContactCollection(self: *const T, ppContactCollection: ?*?*IContactCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactManager.VTable, self.vtable).GetContactCollection(@ptrCast(*const IContactManager, self), ppContactCollection);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContactCollection_Value = @import("../zig.zig").Guid.initString("b6afa338-d779-11d9-8bde-f66bad1e3f3a");
pub const IID_IContactCollection = &IID_IContactCollection_Value;
pub const IContactCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Reset: fn(
            self: *const IContactCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: fn(
            self: *const IContactCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrent: fn(
            self: *const IContactCollection,
            ppContact: ?*?*IContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactCollection_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactCollection.VTable, self.vtable).Reset(@ptrCast(*const IContactCollection, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactCollection_Next(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactCollection.VTable, self.vtable).Next(@ptrCast(*const IContactCollection, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactCollection_GetCurrent(self: *const T, ppContact: ?*?*IContact) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactCollection.VTable, self.vtable).GetCurrent(@ptrCast(*const IContactCollection, self), ppContact);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContactProperties_Value = @import("../zig.zig").Guid.initString("70dd27dd-5cbd-46e8-bef0-23b6b346288f");
pub const IID_IContactProperties = &IID_IContactProperties_Value;
pub const IContactProperties = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetString: fn(
            self: *const IContactProperties,
            pszPropertyName: ?[*:0]const u16,
            dwFlags: u32,
            pszValue: [*:0]u16,
            cchValue: u32,
            pdwcchPropertyValueRequired: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDate: fn(
            self: *const IContactProperties,
            pszPropertyName: ?[*:0]const u16,
            dwFlags: u32,
            pftDateTime: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBinary: fn(
            self: *const IContactProperties,
            pszPropertyName: ?[*:0]const u16,
            dwFlags: u32,
            pszContentType: [*:0]u16,
            cchContentType: u32,
            pdwcchContentTypeRequired: ?*u32,
            ppStream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLabels: fn(
            self: *const IContactProperties,
            pszArrayElementName: ?[*:0]const u16,
            dwFlags: u32,
            pszLabels: [*:0]u16,
            cchLabels: u32,
            pdwcchLabelsRequired: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetString: fn(
            self: *const IContactProperties,
            pszPropertyName: ?[*:0]const u16,
            dwFlags: u32,
            pszValue: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDate: fn(
            self: *const IContactProperties,
            pszPropertyName: ?[*:0]const u16,
            dwFlags: u32,
            ftDateTime: FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBinary: fn(
            self: *const IContactProperties,
            pszPropertyName: ?[*:0]const u16,
            dwFlags: u32,
            pszContentType: ?[*:0]const u16,
            pStream: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLabels: fn(
            self: *const IContactProperties,
            pszArrayElementName: ?[*:0]const u16,
            dwFlags: u32,
            dwLabelCount: u32,
            ppszLabels: [*]?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateArrayNode: fn(
            self: *const IContactProperties,
            pszArrayName: ?[*:0]const u16,
            dwFlags: u32,
            fAppend: BOOL,
            pszNewArrayElementName: [*:0]u16,
            cchNewArrayElementName: u32,
            pdwcchNewArrayElementNameRequired: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteProperty: fn(
            self: *const IContactProperties,
            pszPropertyName: ?[*:0]const u16,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteArrayNode: fn(
            self: *const IContactProperties,
            pszArrayElementName: ?[*:0]const u16,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteLabels: fn(
            self: *const IContactProperties,
            pszArrayElementName: ?[*:0]const u16,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyCollection: fn(
            self: *const IContactProperties,
            ppPropertyCollection: ?*?*IContactPropertyCollection,
            dwFlags: u32,
            pszMultiValueName: ?[*:0]const u16,
            dwLabelCount: u32,
            ppszLabels: [*]?PWSTR,
            fAnyLabelMatches: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_GetString(self: *const T, pszPropertyName: ?[*:0]const u16, dwFlags: u32, pszValue: [*:0]u16, cchValue: u32, pdwcchPropertyValueRequired: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactProperties.VTable, self.vtable).GetString(@ptrCast(*const IContactProperties, self), pszPropertyName, dwFlags, pszValue, cchValue, pdwcchPropertyValueRequired);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_GetDate(self: *const T, pszPropertyName: ?[*:0]const u16, dwFlags: u32, pftDateTime: ?*FILETIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactProperties.VTable, self.vtable).GetDate(@ptrCast(*const IContactProperties, self), pszPropertyName, dwFlags, pftDateTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_GetBinary(self: *const T, pszPropertyName: ?[*:0]const u16, dwFlags: u32, pszContentType: [*:0]u16, cchContentType: u32, pdwcchContentTypeRequired: ?*u32, ppStream: ?*?*IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactProperties.VTable, self.vtable).GetBinary(@ptrCast(*const IContactProperties, self), pszPropertyName, dwFlags, pszContentType, cchContentType, pdwcchContentTypeRequired, ppStream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_GetLabels(self: *const T, pszArrayElementName: ?[*:0]const u16, dwFlags: u32, pszLabels: [*:0]u16, cchLabels: u32, pdwcchLabelsRequired: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactProperties.VTable, self.vtable).GetLabels(@ptrCast(*const IContactProperties, self), pszArrayElementName, dwFlags, pszLabels, cchLabels, pdwcchLabelsRequired);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_SetString(self: *const T, pszPropertyName: ?[*:0]const u16, dwFlags: u32, pszValue: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactProperties.VTable, self.vtable).SetString(@ptrCast(*const IContactProperties, self), pszPropertyName, dwFlags, pszValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_SetDate(self: *const T, pszPropertyName: ?[*:0]const u16, dwFlags: u32, ftDateTime: FILETIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactProperties.VTable, self.vtable).SetDate(@ptrCast(*const IContactProperties, self), pszPropertyName, dwFlags, ftDateTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_SetBinary(self: *const T, pszPropertyName: ?[*:0]const u16, dwFlags: u32, pszContentType: ?[*:0]const u16, pStream: ?*IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactProperties.VTable, self.vtable).SetBinary(@ptrCast(*const IContactProperties, self), pszPropertyName, dwFlags, pszContentType, pStream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_SetLabels(self: *const T, pszArrayElementName: ?[*:0]const u16, dwFlags: u32, dwLabelCount: u32, ppszLabels: [*]?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactProperties.VTable, self.vtable).SetLabels(@ptrCast(*const IContactProperties, self), pszArrayElementName, dwFlags, dwLabelCount, ppszLabels);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_CreateArrayNode(self: *const T, pszArrayName: ?[*:0]const u16, dwFlags: u32, fAppend: BOOL, pszNewArrayElementName: [*:0]u16, cchNewArrayElementName: u32, pdwcchNewArrayElementNameRequired: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactProperties.VTable, self.vtable).CreateArrayNode(@ptrCast(*const IContactProperties, self), pszArrayName, dwFlags, fAppend, pszNewArrayElementName, cchNewArrayElementName, pdwcchNewArrayElementNameRequired);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_DeleteProperty(self: *const T, pszPropertyName: ?[*:0]const u16, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactProperties.VTable, self.vtable).DeleteProperty(@ptrCast(*const IContactProperties, self), pszPropertyName, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_DeleteArrayNode(self: *const T, pszArrayElementName: ?[*:0]const u16, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactProperties.VTable, self.vtable).DeleteArrayNode(@ptrCast(*const IContactProperties, self), pszArrayElementName, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_DeleteLabels(self: *const T, pszArrayElementName: ?[*:0]const u16, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactProperties.VTable, self.vtable).DeleteLabels(@ptrCast(*const IContactProperties, self), pszArrayElementName, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_GetPropertyCollection(self: *const T, ppPropertyCollection: ?*?*IContactPropertyCollection, dwFlags: u32, pszMultiValueName: ?[*:0]const u16, dwLabelCount: u32, ppszLabels: [*]?PWSTR, fAnyLabelMatches: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactProperties.VTable, self.vtable).GetPropertyCollection(@ptrCast(*const IContactProperties, self), ppPropertyCollection, dwFlags, pszMultiValueName, dwLabelCount, ppszLabels, fAnyLabelMatches);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContact_Value = @import("../zig.zig").Guid.initString("f941b671-bda7-4f77-884a-f46462f226a7");
pub const IID_IContact = &IID_IContact_Value;
pub const IContact = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetContactID: fn(
            self: *const IContact,
            pszContactID: [*:0]u16,
            cchContactID: u32,
            pdwcchContactIDRequired: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPath: fn(
            self: *const IContact,
            pszPath: [*:0]u16,
            cchPath: u32,
            pdwcchPathRequired: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitChanges: fn(
            self: *const IContact,
            dwCommitFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContact_GetContactID(self: *const T, pszContactID: [*:0]u16, cchContactID: u32, pdwcchContactIDRequired: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContact.VTable, self.vtable).GetContactID(@ptrCast(*const IContact, self), pszContactID, cchContactID, pdwcchContactIDRequired);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContact_GetPath(self: *const T, pszPath: [*:0]u16, cchPath: u32, pdwcchPathRequired: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContact.VTable, self.vtable).GetPath(@ptrCast(*const IContact, self), pszPath, cchPath, pdwcchPathRequired);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContact_CommitChanges(self: *const T, dwCommitFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContact.VTable, self.vtable).CommitChanges(@ptrCast(*const IContact, self), dwCommitFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContactPropertyCollection_Value = @import("../zig.zig").Guid.initString("ffd3adf8-fa64-4328-b1b6-2e0db509cb3c");
pub const IID_IContactPropertyCollection = &IID_IContactPropertyCollection_Value;
pub const IContactPropertyCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Reset: fn(
            self: *const IContactPropertyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: fn(
            self: *const IContactPropertyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyName: fn(
            self: *const IContactPropertyCollection,
            pszPropertyName: [*:0]u16,
            cchPropertyName: u32,
            pdwcchPropertyNameRequired: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyType: fn(
            self: *const IContactPropertyCollection,
            pdwType: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyVersion: fn(
            self: *const IContactPropertyCollection,
            pdwVersion: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyModificationDate: fn(
            self: *const IContactPropertyCollection,
            pftModificationDate: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyArrayElementID: fn(
            self: *const IContactPropertyCollection,
            pszArrayElementID: [*:0]u16,
            cchArrayElementID: u32,
            pdwcchArrayElementIDRequired: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactPropertyCollection_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactPropertyCollection.VTable, self.vtable).Reset(@ptrCast(*const IContactPropertyCollection, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactPropertyCollection_Next(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactPropertyCollection.VTable, self.vtable).Next(@ptrCast(*const IContactPropertyCollection, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactPropertyCollection_GetPropertyName(self: *const T, pszPropertyName: [*:0]u16, cchPropertyName: u32, pdwcchPropertyNameRequired: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactPropertyCollection.VTable, self.vtable).GetPropertyName(@ptrCast(*const IContactPropertyCollection, self), pszPropertyName, cchPropertyName, pdwcchPropertyNameRequired);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactPropertyCollection_GetPropertyType(self: *const T, pdwType: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactPropertyCollection.VTable, self.vtable).GetPropertyType(@ptrCast(*const IContactPropertyCollection, self), pdwType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactPropertyCollection_GetPropertyVersion(self: *const T, pdwVersion: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactPropertyCollection.VTable, self.vtable).GetPropertyVersion(@ptrCast(*const IContactPropertyCollection, self), pdwVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactPropertyCollection_GetPropertyModificationDate(self: *const T, pftModificationDate: ?*FILETIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactPropertyCollection.VTable, self.vtable).GetPropertyModificationDate(@ptrCast(*const IContactPropertyCollection, self), pftModificationDate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactPropertyCollection_GetPropertyArrayElementID(self: *const T, pszArrayElementID: [*:0]u16, cchArrayElementID: u32, pdwcchArrayElementIDRequired: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactPropertyCollection.VTable, self.vtable).GetPropertyArrayElementID(@ptrCast(*const IContactPropertyCollection, self), pszArrayElementID, cchArrayElementID, pdwcchArrayElementIDRequired);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CONTACT_AGGREGATION_CREATE_OR_OPEN_OPTIONS = enum(i32) {
    LOCAL = 0,
    EXTERNAL = 1,
};
pub const CA_CREATE_LOCAL = CONTACT_AGGREGATION_CREATE_OR_OPEN_OPTIONS.LOCAL;
pub const CA_CREATE_EXTERNAL = CONTACT_AGGREGATION_CREATE_OR_OPEN_OPTIONS.EXTERNAL;

pub const CONTACT_AGGREGATION_COLLECTION_OPTIONS = enum(i32) {
    DEFAULT = 0,
    INCLUDE_EXTERNAL = 1,
    EXTERNAL_ONLY = 2,
};
pub const CACO_DEFAULT = CONTACT_AGGREGATION_COLLECTION_OPTIONS.DEFAULT;
pub const CACO_INCLUDE_EXTERNAL = CONTACT_AGGREGATION_COLLECTION_OPTIONS.INCLUDE_EXTERNAL;
pub const CACO_EXTERNAL_ONLY = CONTACT_AGGREGATION_COLLECTION_OPTIONS.EXTERNAL_ONLY;

pub const CONTACT_AGGREGATION_BLOB = extern struct {
    dwCount: u32,
    lpb: ?*u8,
};

const IID_IContactAggregationManager_Value = @import("../zig.zig").Guid.initString("1d865989-4b1f-4b60-8f34-c2ad468b2b50");
pub const IID_IContactAggregationManager = &IID_IContactAggregationManager_Value;
pub const IContactAggregationManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetVersionInfo: fn(
            self: *const IContactAggregationManager,
            plMajorVersion: ?*i32,
            plMinorVersion: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateOrOpenGroup: fn(
            self: *const IContactAggregationManager,
            pGroupName: ?[*:0]const u16,
            options: CONTACT_AGGREGATION_CREATE_OR_OPEN_OPTIONS,
            pCreatedGroup: ?*BOOL,
            ppGroup: ?*?*IContactAggregationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateExternalContact: fn(
            self: *const IContactAggregationManager,
            ppItem: ?*?*IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateServerPerson: fn(
            self: *const IContactAggregationManager,
            ppServerPerson: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateServerContactLink: fn(
            self: *const IContactAggregationManager,
            ppServerContactLink: ?*?*IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Flush: fn(
            self: *const IContactAggregationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenAggregateContact: fn(
            self: *const IContactAggregationManager,
            pItemId: ?[*:0]const u16,
            ppItem: ?*?*IContactAggregationAggregate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenContact: fn(
            self: *const IContactAggregationManager,
            pItemId: ?[*:0]const u16,
            ppItem: ?*?*IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenServerContactLink: fn(
            self: *const IContactAggregationManager,
            pItemId: ?[*:0]const u16,
            ppItem: ?*?*IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenServerPerson: fn(
            self: *const IContactAggregationManager,
            pItemId: ?[*:0]const u16,
            ppItem: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Contacts: fn(
            self: *const IContactAggregationManager,
            options: CONTACT_AGGREGATION_COLLECTION_OPTIONS,
            ppItems: ?*?*IContactAggregationContactCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AggregateContacts: fn(
            self: *const IContactAggregationManager,
            options: CONTACT_AGGREGATION_COLLECTION_OPTIONS,
            ppAggregates: ?*?*IContactAggregationAggregateCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Groups: fn(
            self: *const IContactAggregationManager,
            options: CONTACT_AGGREGATION_COLLECTION_OPTIONS,
            ppGroups: ?*?*IContactAggregationGroupCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServerPersons: fn(
            self: *const IContactAggregationManager,
            ppServerPersonCollection: ?*?*IContactAggregationServerPersonCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServerContactLinks: fn(
            self: *const IContactAggregationManager,
            pPersonItemId: ?[*:0]const u16,
            ppServerContactLinkCollection: ?*?*IContactAggregationLinkCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_GetVersionInfo(self: *const T, plMajorVersion: ?*i32, plMinorVersion: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationManager.VTable, self.vtable).GetVersionInfo(@ptrCast(*const IContactAggregationManager, self), plMajorVersion, plMinorVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_CreateOrOpenGroup(self: *const T, pGroupName: ?[*:0]const u16, options: CONTACT_AGGREGATION_CREATE_OR_OPEN_OPTIONS, pCreatedGroup: ?*BOOL, ppGroup: ?*?*IContactAggregationGroup) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationManager.VTable, self.vtable).CreateOrOpenGroup(@ptrCast(*const IContactAggregationManager, self), pGroupName, options, pCreatedGroup, ppGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_CreateExternalContact(self: *const T, ppItem: ?*?*IContactAggregationContact) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationManager.VTable, self.vtable).CreateExternalContact(@ptrCast(*const IContactAggregationManager, self), ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_CreateServerPerson(self: *const T, ppServerPerson: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationManager.VTable, self.vtable).CreateServerPerson(@ptrCast(*const IContactAggregationManager, self), ppServerPerson);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_CreateServerContactLink(self: *const T, ppServerContactLink: ?*?*IContactAggregationLink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationManager.VTable, self.vtable).CreateServerContactLink(@ptrCast(*const IContactAggregationManager, self), ppServerContactLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_Flush(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationManager.VTable, self.vtable).Flush(@ptrCast(*const IContactAggregationManager, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_OpenAggregateContact(self: *const T, pItemId: ?[*:0]const u16, ppItem: ?*?*IContactAggregationAggregate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationManager.VTable, self.vtable).OpenAggregateContact(@ptrCast(*const IContactAggregationManager, self), pItemId, ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_OpenContact(self: *const T, pItemId: ?[*:0]const u16, ppItem: ?*?*IContactAggregationContact) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationManager.VTable, self.vtable).OpenContact(@ptrCast(*const IContactAggregationManager, self), pItemId, ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_OpenServerContactLink(self: *const T, pItemId: ?[*:0]const u16, ppItem: ?*?*IContactAggregationLink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationManager.VTable, self.vtable).OpenServerContactLink(@ptrCast(*const IContactAggregationManager, self), pItemId, ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_OpenServerPerson(self: *const T, pItemId: ?[*:0]const u16, ppItem: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationManager.VTable, self.vtable).OpenServerPerson(@ptrCast(*const IContactAggregationManager, self), pItemId, ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_get_Contacts(self: *const T, options: CONTACT_AGGREGATION_COLLECTION_OPTIONS, ppItems: ?*?*IContactAggregationContactCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationManager.VTable, self.vtable).get_Contacts(@ptrCast(*const IContactAggregationManager, self), options, ppItems);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_get_AggregateContacts(self: *const T, options: CONTACT_AGGREGATION_COLLECTION_OPTIONS, ppAggregates: ?*?*IContactAggregationAggregateCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationManager.VTable, self.vtable).get_AggregateContacts(@ptrCast(*const IContactAggregationManager, self), options, ppAggregates);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_get_Groups(self: *const T, options: CONTACT_AGGREGATION_COLLECTION_OPTIONS, ppGroups: ?*?*IContactAggregationGroupCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationManager.VTable, self.vtable).get_Groups(@ptrCast(*const IContactAggregationManager, self), options, ppGroups);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_get_ServerPersons(self: *const T, ppServerPersonCollection: ?*?*IContactAggregationServerPersonCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationManager.VTable, self.vtable).get_ServerPersons(@ptrCast(*const IContactAggregationManager, self), ppServerPersonCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_get_ServerContactLinks(self: *const T, pPersonItemId: ?[*:0]const u16, ppServerContactLinkCollection: ?*?*IContactAggregationLinkCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationManager.VTable, self.vtable).get_ServerContactLinks(@ptrCast(*const IContactAggregationManager, self), pPersonItemId, ppServerContactLinkCollection);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationContact_Value = @import("../zig.zig").Guid.initString("1eb22e86-4c86-41f0-9f9f-c251e9fda6c3");
pub const IID_IContactAggregationContact = &IID_IContactAggregationContact_Value;
pub const IContactAggregationContact = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Delete: fn(
            self: *const IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: fn(
            self: *const IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveToAggregate: fn(
            self: *const IContactAggregationContact,
            pAggregateId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unlink: fn(
            self: *const IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AccountId: fn(
            self: *const IContactAggregationContact,
            ppAccountId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AccountId: fn(
            self: *const IContactAggregationContact,
            pAccountId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AggregateId: fn(
            self: *const IContactAggregationContact,
            ppAggregateId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: fn(
            self: *const IContactAggregationContact,
            ppItemId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsMe: fn(
            self: *const IContactAggregationContact,
            pIsMe: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsExternal: fn(
            self: *const IContactAggregationContact,
            pIsExternal: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetworkSourceId: fn(
            self: *const IContactAggregationContact,
            pNetworkSourceId: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NetworkSourceId: fn(
            self: *const IContactAggregationContact,
            networkSourceId: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetworkSourceIdString: fn(
            self: *const IContactAggregationContact,
            ppNetworkSourceId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NetworkSourceIdString: fn(
            self: *const IContactAggregationContact,
            pNetworkSourceId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteObjectId: fn(
            self: *const IContactAggregationContact,
            ppRemoteObjectId: ?*?*CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteObjectId: fn(
            self: *const IContactAggregationContact,
            pRemoteObjectId: ?*const CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SyncIdentityHash: fn(
            self: *const IContactAggregationContact,
            ppSyncIdentityHash: ?*?*CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SyncIdentityHash: fn(
            self: *const IContactAggregationContact,
            pSyncIdentityHash: ?*const CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_Delete(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContact.VTable, self.vtable).Delete(@ptrCast(*const IContactAggregationContact, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_Save(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContact.VTable, self.vtable).Save(@ptrCast(*const IContactAggregationContact, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_MoveToAggregate(self: *const T, pAggregateId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContact.VTable, self.vtable).MoveToAggregate(@ptrCast(*const IContactAggregationContact, self), pAggregateId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_Unlink(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContact.VTable, self.vtable).Unlink(@ptrCast(*const IContactAggregationContact, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_get_AccountId(self: *const T, ppAccountId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContact.VTable, self.vtable).get_AccountId(@ptrCast(*const IContactAggregationContact, self), ppAccountId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_put_AccountId(self: *const T, pAccountId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContact.VTable, self.vtable).put_AccountId(@ptrCast(*const IContactAggregationContact, self), pAccountId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_get_AggregateId(self: *const T, ppAggregateId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContact.VTable, self.vtable).get_AggregateId(@ptrCast(*const IContactAggregationContact, self), ppAggregateId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_get_Id(self: *const T, ppItemId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContact.VTable, self.vtable).get_Id(@ptrCast(*const IContactAggregationContact, self), ppItemId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_get_IsMe(self: *const T, pIsMe: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContact.VTable, self.vtable).get_IsMe(@ptrCast(*const IContactAggregationContact, self), pIsMe);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_get_IsExternal(self: *const T, pIsExternal: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContact.VTable, self.vtable).get_IsExternal(@ptrCast(*const IContactAggregationContact, self), pIsExternal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_get_NetworkSourceId(self: *const T, pNetworkSourceId: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContact.VTable, self.vtable).get_NetworkSourceId(@ptrCast(*const IContactAggregationContact, self), pNetworkSourceId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_put_NetworkSourceId(self: *const T, networkSourceId: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContact.VTable, self.vtable).put_NetworkSourceId(@ptrCast(*const IContactAggregationContact, self), networkSourceId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_get_NetworkSourceIdString(self: *const T, ppNetworkSourceId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContact.VTable, self.vtable).get_NetworkSourceIdString(@ptrCast(*const IContactAggregationContact, self), ppNetworkSourceId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_put_NetworkSourceIdString(self: *const T, pNetworkSourceId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContact.VTable, self.vtable).put_NetworkSourceIdString(@ptrCast(*const IContactAggregationContact, self), pNetworkSourceId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_get_RemoteObjectId(self: *const T, ppRemoteObjectId: ?*?*CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContact.VTable, self.vtable).get_RemoteObjectId(@ptrCast(*const IContactAggregationContact, self), ppRemoteObjectId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_put_RemoteObjectId(self: *const T, pRemoteObjectId: ?*const CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContact.VTable, self.vtable).put_RemoteObjectId(@ptrCast(*const IContactAggregationContact, self), pRemoteObjectId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_get_SyncIdentityHash(self: *const T, ppSyncIdentityHash: ?*?*CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContact.VTable, self.vtable).get_SyncIdentityHash(@ptrCast(*const IContactAggregationContact, self), ppSyncIdentityHash);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_put_SyncIdentityHash(self: *const T, pSyncIdentityHash: ?*const CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContact.VTable, self.vtable).put_SyncIdentityHash(@ptrCast(*const IContactAggregationContact, self), pSyncIdentityHash);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationContactCollection_Value = @import("../zig.zig").Guid.initString("826e66fa-81de-43ca-a6fb-8c785cd996c6");
pub const IID_IContactAggregationContactCollection = &IID_IContactAggregationContactCollection_Value;
pub const IContactAggregationContactCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindFirst: fn(
            self: *const IContactAggregationContactCollection,
            ppItem: ?*?*IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindNext: fn(
            self: *const IContactAggregationContactCollection,
            ppItem: ?*?*IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByIdentityHash: fn(
            self: *const IContactAggregationContactCollection,
            pSourceType: ?[*:0]const u16,
            pAccountId: ?[*:0]const u16,
            pIdentityHash: ?*const CONTACT_AGGREGATION_BLOB,
            ppItem: ?*?*IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: fn(
            self: *const IContactAggregationContactCollection,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByRemoteId: fn(
            self: *const IContactAggregationContactCollection,
            pSourceType: ?[*:0]const u16,
            pAccountId: ?[*:0]const u16,
            pRemoteObjectId: ?*const CONTACT_AGGREGATION_BLOB,
            ppItem: ?*?*IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContactCollection_FindFirst(self: *const T, ppItem: ?*?*IContactAggregationContact) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContactCollection.VTable, self.vtable).FindFirst(@ptrCast(*const IContactAggregationContactCollection, self), ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContactCollection_FindNext(self: *const T, ppItem: ?*?*IContactAggregationContact) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContactCollection.VTable, self.vtable).FindNext(@ptrCast(*const IContactAggregationContactCollection, self), ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContactCollection_FindFirstByIdentityHash(self: *const T, pSourceType: ?[*:0]const u16, pAccountId: ?[*:0]const u16, pIdentityHash: ?*const CONTACT_AGGREGATION_BLOB, ppItem: ?*?*IContactAggregationContact) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContactCollection.VTable, self.vtable).FindFirstByIdentityHash(@ptrCast(*const IContactAggregationContactCollection, self), pSourceType, pAccountId, pIdentityHash, ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContactCollection_get_Count(self: *const T, pCount: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContactCollection.VTable, self.vtable).get_Count(@ptrCast(*const IContactAggregationContactCollection, self), pCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContactCollection_FindFirstByRemoteId(self: *const T, pSourceType: ?[*:0]const u16, pAccountId: ?[*:0]const u16, pRemoteObjectId: ?*const CONTACT_AGGREGATION_BLOB, ppItem: ?*?*IContactAggregationContact) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationContactCollection.VTable, self.vtable).FindFirstByRemoteId(@ptrCast(*const IContactAggregationContactCollection, self), pSourceType, pAccountId, pRemoteObjectId, ppItem);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationAggregate_Value = @import("../zig.zig").Guid.initString("7ed1c814-cd30-43c8-9b8d-2e489e53d54b");
pub const IID_IContactAggregationAggregate = &IID_IContactAggregationAggregate_Value;
pub const IContactAggregationAggregate = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Save: fn(
            self: *const IContactAggregationAggregate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComponentItems: fn(
            self: *const IContactAggregationAggregate,
            pComponentItems: ?*?*IContactAggregationContactCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Link: fn(
            self: *const IContactAggregationAggregate,
            pAggregateId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Groups: fn(
            self: *const IContactAggregationAggregate,
            options: CONTACT_AGGREGATION_COLLECTION_OPTIONS,
            ppGroups: ?*?*IContactAggregationGroupCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AntiLink: fn(
            self: *const IContactAggregationAggregate,
            ppAntiLink: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AntiLink: fn(
            self: *const IContactAggregationAggregate,
            pAntiLink: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FavoriteOrder: fn(
            self: *const IContactAggregationAggregate,
            pFavoriteOrder: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FavoriteOrder: fn(
            self: *const IContactAggregationAggregate,
            favoriteOrder: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: fn(
            self: *const IContactAggregationAggregate,
            ppItemId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregate_Save(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationAggregate.VTable, self.vtable).Save(@ptrCast(*const IContactAggregationAggregate, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregate_GetComponentItems(self: *const T, pComponentItems: ?*?*IContactAggregationContactCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationAggregate.VTable, self.vtable).GetComponentItems(@ptrCast(*const IContactAggregationAggregate, self), pComponentItems);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregate_Link(self: *const T, pAggregateId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationAggregate.VTable, self.vtable).Link(@ptrCast(*const IContactAggregationAggregate, self), pAggregateId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregate_get_Groups(self: *const T, options: CONTACT_AGGREGATION_COLLECTION_OPTIONS, ppGroups: ?*?*IContactAggregationGroupCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationAggregate.VTable, self.vtable).get_Groups(@ptrCast(*const IContactAggregationAggregate, self), options, ppGroups);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregate_get_AntiLink(self: *const T, ppAntiLink: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationAggregate.VTable, self.vtable).get_AntiLink(@ptrCast(*const IContactAggregationAggregate, self), ppAntiLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregate_put_AntiLink(self: *const T, pAntiLink: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationAggregate.VTable, self.vtable).put_AntiLink(@ptrCast(*const IContactAggregationAggregate, self), pAntiLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregate_get_FavoriteOrder(self: *const T, pFavoriteOrder: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationAggregate.VTable, self.vtable).get_FavoriteOrder(@ptrCast(*const IContactAggregationAggregate, self), pFavoriteOrder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregate_put_FavoriteOrder(self: *const T, favoriteOrder: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationAggregate.VTable, self.vtable).put_FavoriteOrder(@ptrCast(*const IContactAggregationAggregate, self), favoriteOrder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregate_get_Id(self: *const T, ppItemId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationAggregate.VTable, self.vtable).get_Id(@ptrCast(*const IContactAggregationAggregate, self), ppItemId);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationAggregateCollection_Value = @import("../zig.zig").Guid.initString("2359f3a6-3a68-40af-98db-0f9eb143c3bb");
pub const IID_IContactAggregationAggregateCollection = &IID_IContactAggregationAggregateCollection_Value;
pub const IContactAggregationAggregateCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindFirst: fn(
            self: *const IContactAggregationAggregateCollection,
            ppAggregate: ?*?*IContactAggregationAggregate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByAntiLinkId: fn(
            self: *const IContactAggregationAggregateCollection,
            pAntiLinkId: ?[*:0]const u16,
            ppAggregate: ?*?*IContactAggregationAggregate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindNext: fn(
            self: *const IContactAggregationAggregateCollection,
            ppAggregate: ?*?*IContactAggregationAggregate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: fn(
            self: *const IContactAggregationAggregateCollection,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregateCollection_FindFirst(self: *const T, ppAggregate: ?*?*IContactAggregationAggregate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationAggregateCollection.VTable, self.vtable).FindFirst(@ptrCast(*const IContactAggregationAggregateCollection, self), ppAggregate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregateCollection_FindFirstByAntiLinkId(self: *const T, pAntiLinkId: ?[*:0]const u16, ppAggregate: ?*?*IContactAggregationAggregate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationAggregateCollection.VTable, self.vtable).FindFirstByAntiLinkId(@ptrCast(*const IContactAggregationAggregateCollection, self), pAntiLinkId, ppAggregate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregateCollection_FindNext(self: *const T, ppAggregate: ?*?*IContactAggregationAggregate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationAggregateCollection.VTable, self.vtable).FindNext(@ptrCast(*const IContactAggregationAggregateCollection, self), ppAggregate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregateCollection_get_Count(self: *const T, pCount: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationAggregateCollection.VTable, self.vtable).get_Count(@ptrCast(*const IContactAggregationAggregateCollection, self), pCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationGroup_Value = @import("../zig.zig").Guid.initString("c93c545f-1284-499b-96af-07372af473e0");
pub const IID_IContactAggregationGroup = &IID_IContactAggregationGroup_Value;
pub const IContactAggregationGroup = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Delete: fn(
            self: *const IContactAggregationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: fn(
            self: *const IContactAggregationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IContactAggregationGroup,
            pAggregateId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IContactAggregationGroup,
            pAggregateId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Members: fn(
            self: *const IContactAggregationGroup,
            ppAggregateContactCollection: ?*?*IContactAggregationAggregateCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GlobalObjectId: fn(
            self: *const IContactAggregationGroup,
            pGlobalObjectId: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GlobalObjectId: fn(
            self: *const IContactAggregationGroup,
            pGlobalObjectId: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: fn(
            self: *const IContactAggregationGroup,
            ppItemId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: fn(
            self: *const IContactAggregationGroup,
            ppName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: fn(
            self: *const IContactAggregationGroup,
            pName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_Delete(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationGroup.VTable, self.vtable).Delete(@ptrCast(*const IContactAggregationGroup, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_Save(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationGroup.VTable, self.vtable).Save(@ptrCast(*const IContactAggregationGroup, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_Add(self: *const T, pAggregateId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationGroup.VTable, self.vtable).Add(@ptrCast(*const IContactAggregationGroup, self), pAggregateId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_Remove(self: *const T, pAggregateId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationGroup.VTable, self.vtable).Remove(@ptrCast(*const IContactAggregationGroup, self), pAggregateId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_get_Members(self: *const T, ppAggregateContactCollection: ?*?*IContactAggregationAggregateCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationGroup.VTable, self.vtable).get_Members(@ptrCast(*const IContactAggregationGroup, self), ppAggregateContactCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_get_GlobalObjectId(self: *const T, pGlobalObjectId: ?*Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationGroup.VTable, self.vtable).get_GlobalObjectId(@ptrCast(*const IContactAggregationGroup, self), pGlobalObjectId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_put_GlobalObjectId(self: *const T, pGlobalObjectId: ?*const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationGroup.VTable, self.vtable).put_GlobalObjectId(@ptrCast(*const IContactAggregationGroup, self), pGlobalObjectId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_get_Id(self: *const T, ppItemId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationGroup.VTable, self.vtable).get_Id(@ptrCast(*const IContactAggregationGroup, self), ppItemId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_get_Name(self: *const T, ppName: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationGroup.VTable, self.vtable).get_Name(@ptrCast(*const IContactAggregationGroup, self), ppName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_put_Name(self: *const T, pName: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationGroup.VTable, self.vtable).put_Name(@ptrCast(*const IContactAggregationGroup, self), pName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationGroupCollection_Value = @import("../zig.zig").Guid.initString("20a19a9c-d2f3-4b83-9143-beffd2cc226d");
pub const IID_IContactAggregationGroupCollection = &IID_IContactAggregationGroupCollection_Value;
pub const IContactAggregationGroupCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindFirst: fn(
            self: *const IContactAggregationGroupCollection,
            ppGroup: ?*?*IContactAggregationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByGlobalObjectId: fn(
            self: *const IContactAggregationGroupCollection,
            pGlobalObjectId: ?*const Guid,
            ppGroup: ?*?*IContactAggregationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindNext: fn(
            self: *const IContactAggregationGroupCollection,
            ppGroup: ?*?*IContactAggregationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: fn(
            self: *const IContactAggregationGroupCollection,
            pCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroupCollection_FindFirst(self: *const T, ppGroup: ?*?*IContactAggregationGroup) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationGroupCollection.VTable, self.vtable).FindFirst(@ptrCast(*const IContactAggregationGroupCollection, self), ppGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroupCollection_FindFirstByGlobalObjectId(self: *const T, pGlobalObjectId: ?*const Guid, ppGroup: ?*?*IContactAggregationGroup) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationGroupCollection.VTable, self.vtable).FindFirstByGlobalObjectId(@ptrCast(*const IContactAggregationGroupCollection, self), pGlobalObjectId, ppGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroupCollection_FindNext(self: *const T, ppGroup: ?*?*IContactAggregationGroup) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationGroupCollection.VTable, self.vtable).FindNext(@ptrCast(*const IContactAggregationGroupCollection, self), ppGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroupCollection_get_Count(self: *const T, pCount: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationGroupCollection.VTable, self.vtable).get_Count(@ptrCast(*const IContactAggregationGroupCollection, self), pCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationLink_Value = @import("../zig.zig").Guid.initString("b6813323-a183-4654-8627-79b30de3a0ec");
pub const IID_IContactAggregationLink = &IID_IContactAggregationLink_Value;
pub const IContactAggregationLink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Delete: fn(
            self: *const IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: fn(
            self: *const IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AccountId: fn(
            self: *const IContactAggregationLink,
            ppAccountId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AccountId: fn(
            self: *const IContactAggregationLink,
            pAccountId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: fn(
            self: *const IContactAggregationLink,
            ppItemId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsLinkResolved: fn(
            self: *const IContactAggregationLink,
            pIsLinkResolved: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IsLinkResolved: fn(
            self: *const IContactAggregationLink,
            isLinkResolved: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetworkSourceIdString: fn(
            self: *const IContactAggregationLink,
            ppNetworkSourceId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NetworkSourceIdString: fn(
            self: *const IContactAggregationLink,
            pNetworkSourceId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteObjectId: fn(
            self: *const IContactAggregationLink,
            ppRemoteObjectId: ?*?*CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteObjectId: fn(
            self: *const IContactAggregationLink,
            pRemoteObjectId: ?*const CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServerPerson: fn(
            self: *const IContactAggregationLink,
            ppServerPersonId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServerPerson: fn(
            self: *const IContactAggregationLink,
            pServerPersonId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServerPersonBaseline: fn(
            self: *const IContactAggregationLink,
            ppServerPersonId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServerPersonBaseline: fn(
            self: *const IContactAggregationLink,
            pServerPersonId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SyncIdentityHash: fn(
            self: *const IContactAggregationLink,
            ppSyncIdentityHash: ?*?*CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SyncIdentityHash: fn(
            self: *const IContactAggregationLink,
            pSyncIdentityHash: ?*const CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_Delete(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLink.VTable, self.vtable).Delete(@ptrCast(*const IContactAggregationLink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_Save(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLink.VTable, self.vtable).Save(@ptrCast(*const IContactAggregationLink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_get_AccountId(self: *const T, ppAccountId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLink.VTable, self.vtable).get_AccountId(@ptrCast(*const IContactAggregationLink, self), ppAccountId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_put_AccountId(self: *const T, pAccountId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLink.VTable, self.vtable).put_AccountId(@ptrCast(*const IContactAggregationLink, self), pAccountId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_get_Id(self: *const T, ppItemId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLink.VTable, self.vtable).get_Id(@ptrCast(*const IContactAggregationLink, self), ppItemId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_get_IsLinkResolved(self: *const T, pIsLinkResolved: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLink.VTable, self.vtable).get_IsLinkResolved(@ptrCast(*const IContactAggregationLink, self), pIsLinkResolved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_put_IsLinkResolved(self: *const T, isLinkResolved: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLink.VTable, self.vtable).put_IsLinkResolved(@ptrCast(*const IContactAggregationLink, self), isLinkResolved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_get_NetworkSourceIdString(self: *const T, ppNetworkSourceId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLink.VTable, self.vtable).get_NetworkSourceIdString(@ptrCast(*const IContactAggregationLink, self), ppNetworkSourceId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_put_NetworkSourceIdString(self: *const T, pNetworkSourceId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLink.VTable, self.vtable).put_NetworkSourceIdString(@ptrCast(*const IContactAggregationLink, self), pNetworkSourceId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_get_RemoteObjectId(self: *const T, ppRemoteObjectId: ?*?*CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLink.VTable, self.vtable).get_RemoteObjectId(@ptrCast(*const IContactAggregationLink, self), ppRemoteObjectId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_put_RemoteObjectId(self: *const T, pRemoteObjectId: ?*const CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLink.VTable, self.vtable).put_RemoteObjectId(@ptrCast(*const IContactAggregationLink, self), pRemoteObjectId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_get_ServerPerson(self: *const T, ppServerPersonId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLink.VTable, self.vtable).get_ServerPerson(@ptrCast(*const IContactAggregationLink, self), ppServerPersonId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_put_ServerPerson(self: *const T, pServerPersonId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLink.VTable, self.vtable).put_ServerPerson(@ptrCast(*const IContactAggregationLink, self), pServerPersonId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_get_ServerPersonBaseline(self: *const T, ppServerPersonId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLink.VTable, self.vtable).get_ServerPersonBaseline(@ptrCast(*const IContactAggregationLink, self), ppServerPersonId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_put_ServerPersonBaseline(self: *const T, pServerPersonId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLink.VTable, self.vtable).put_ServerPersonBaseline(@ptrCast(*const IContactAggregationLink, self), pServerPersonId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_get_SyncIdentityHash(self: *const T, ppSyncIdentityHash: ?*?*CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLink.VTable, self.vtable).get_SyncIdentityHash(@ptrCast(*const IContactAggregationLink, self), ppSyncIdentityHash);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_put_SyncIdentityHash(self: *const T, pSyncIdentityHash: ?*const CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLink.VTable, self.vtable).put_SyncIdentityHash(@ptrCast(*const IContactAggregationLink, self), pSyncIdentityHash);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationLinkCollection_Value = @import("../zig.zig").Guid.initString("f8bc0e93-fb55-4f28-b9fa-b1c274153292");
pub const IID_IContactAggregationLinkCollection = &IID_IContactAggregationLinkCollection_Value;
pub const IContactAggregationLinkCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindFirst: fn(
            self: *const IContactAggregationLinkCollection,
            ppServerContactLink: ?*?*IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByRemoteId: fn(
            self: *const IContactAggregationLinkCollection,
            pSourceType: ?[*:0]const u16,
            pAccountId: ?[*:0]const u16,
            pRemoteId: ?*const CONTACT_AGGREGATION_BLOB,
            ppServerContactLink: ?*?*IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindNext: fn(
            self: *const IContactAggregationLinkCollection,
            ppServerContactLink: ?*?*IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: fn(
            self: *const IContactAggregationLinkCollection,
            pCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLinkCollection_FindFirst(self: *const T, ppServerContactLink: ?*?*IContactAggregationLink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLinkCollection.VTable, self.vtable).FindFirst(@ptrCast(*const IContactAggregationLinkCollection, self), ppServerContactLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLinkCollection_FindFirstByRemoteId(self: *const T, pSourceType: ?[*:0]const u16, pAccountId: ?[*:0]const u16, pRemoteId: ?*const CONTACT_AGGREGATION_BLOB, ppServerContactLink: ?*?*IContactAggregationLink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLinkCollection.VTable, self.vtable).FindFirstByRemoteId(@ptrCast(*const IContactAggregationLinkCollection, self), pSourceType, pAccountId, pRemoteId, ppServerContactLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLinkCollection_FindNext(self: *const T, ppServerContactLink: ?*?*IContactAggregationLink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLinkCollection.VTable, self.vtable).FindNext(@ptrCast(*const IContactAggregationLinkCollection, self), ppServerContactLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLinkCollection_get_Count(self: *const T, pCount: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationLinkCollection.VTable, self.vtable).get_Count(@ptrCast(*const IContactAggregationLinkCollection, self), pCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationServerPerson_Value = @import("../zig.zig").Guid.initString("7fdc3d4b-1b82-4334-85c5-25184ee5a5f2");
pub const IID_IContactAggregationServerPerson = &IID_IContactAggregationServerPerson_Value;
pub const IContactAggregationServerPerson = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Delete: fn(
            self: *const IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: fn(
            self: *const IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AggregateId: fn(
            self: *const IContactAggregationServerPerson,
            ppAggregateId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AggregateId: fn(
            self: *const IContactAggregationServerPerson,
            pAggregateId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AntiLink: fn(
            self: *const IContactAggregationServerPerson,
            ppAntiLink: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AntiLink: fn(
            self: *const IContactAggregationServerPerson,
            pAntiLink: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AntiLinkBaseline: fn(
            self: *const IContactAggregationServerPerson,
            ppAntiLink: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AntiLinkBaseline: fn(
            self: *const IContactAggregationServerPerson,
            pAntiLink: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FavoriteOrder: fn(
            self: *const IContactAggregationServerPerson,
            pFavoriteOrder: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FavoriteOrder: fn(
            self: *const IContactAggregationServerPerson,
            favoriteOrder: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FavoriteOrderBaseline: fn(
            self: *const IContactAggregationServerPerson,
            pFavoriteOrder: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FavoriteOrderBaseline: fn(
            self: *const IContactAggregationServerPerson,
            favoriteOrder: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Groups: fn(
            self: *const IContactAggregationServerPerson,
            pGroups: ?*?*CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Groups: fn(
            self: *const IContactAggregationServerPerson,
            pGroups: ?*const CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GroupsBaseline: fn(
            self: *const IContactAggregationServerPerson,
            ppGroups: ?*?*CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GroupsBaseline: fn(
            self: *const IContactAggregationServerPerson,
            pGroups: ?*const CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: fn(
            self: *const IContactAggregationServerPerson,
            ppId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsTombstone: fn(
            self: *const IContactAggregationServerPerson,
            pIsTombstone: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IsTombstone: fn(
            self: *const IContactAggregationServerPerson,
            isTombstone: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LinkedAggregateId: fn(
            self: *const IContactAggregationServerPerson,
            ppLinkedAggregateId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LinkedAggregateId: fn(
            self: *const IContactAggregationServerPerson,
            pLinkedAggregateId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectId: fn(
            self: *const IContactAggregationServerPerson,
            ppObjectId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ObjectId: fn(
            self: *const IContactAggregationServerPerson,
            pObjectId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_Delete(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).Delete(@ptrCast(*const IContactAggregationServerPerson, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_Save(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).Save(@ptrCast(*const IContactAggregationServerPerson, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_AggregateId(self: *const T, ppAggregateId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).get_AggregateId(@ptrCast(*const IContactAggregationServerPerson, self), ppAggregateId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_AggregateId(self: *const T, pAggregateId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).put_AggregateId(@ptrCast(*const IContactAggregationServerPerson, self), pAggregateId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_AntiLink(self: *const T, ppAntiLink: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).get_AntiLink(@ptrCast(*const IContactAggregationServerPerson, self), ppAntiLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_AntiLink(self: *const T, pAntiLink: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).put_AntiLink(@ptrCast(*const IContactAggregationServerPerson, self), pAntiLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_AntiLinkBaseline(self: *const T, ppAntiLink: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).get_AntiLinkBaseline(@ptrCast(*const IContactAggregationServerPerson, self), ppAntiLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_AntiLinkBaseline(self: *const T, pAntiLink: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).put_AntiLinkBaseline(@ptrCast(*const IContactAggregationServerPerson, self), pAntiLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_FavoriteOrder(self: *const T, pFavoriteOrder: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).get_FavoriteOrder(@ptrCast(*const IContactAggregationServerPerson, self), pFavoriteOrder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_FavoriteOrder(self: *const T, favoriteOrder: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).put_FavoriteOrder(@ptrCast(*const IContactAggregationServerPerson, self), favoriteOrder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_FavoriteOrderBaseline(self: *const T, pFavoriteOrder: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).get_FavoriteOrderBaseline(@ptrCast(*const IContactAggregationServerPerson, self), pFavoriteOrder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_FavoriteOrderBaseline(self: *const T, favoriteOrder: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).put_FavoriteOrderBaseline(@ptrCast(*const IContactAggregationServerPerson, self), favoriteOrder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_Groups(self: *const T, pGroups: ?*?*CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).get_Groups(@ptrCast(*const IContactAggregationServerPerson, self), pGroups);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_Groups(self: *const T, pGroups: ?*const CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).put_Groups(@ptrCast(*const IContactAggregationServerPerson, self), pGroups);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_GroupsBaseline(self: *const T, ppGroups: ?*?*CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).get_GroupsBaseline(@ptrCast(*const IContactAggregationServerPerson, self), ppGroups);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_GroupsBaseline(self: *const T, pGroups: ?*const CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).put_GroupsBaseline(@ptrCast(*const IContactAggregationServerPerson, self), pGroups);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_Id(self: *const T, ppId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).get_Id(@ptrCast(*const IContactAggregationServerPerson, self), ppId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_IsTombstone(self: *const T, pIsTombstone: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).get_IsTombstone(@ptrCast(*const IContactAggregationServerPerson, self), pIsTombstone);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_IsTombstone(self: *const T, isTombstone: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).put_IsTombstone(@ptrCast(*const IContactAggregationServerPerson, self), isTombstone);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_LinkedAggregateId(self: *const T, ppLinkedAggregateId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).get_LinkedAggregateId(@ptrCast(*const IContactAggregationServerPerson, self), ppLinkedAggregateId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_LinkedAggregateId(self: *const T, pLinkedAggregateId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).put_LinkedAggregateId(@ptrCast(*const IContactAggregationServerPerson, self), pLinkedAggregateId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_ObjectId(self: *const T, ppObjectId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).get_ObjectId(@ptrCast(*const IContactAggregationServerPerson, self), ppObjectId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_ObjectId(self: *const T, pObjectId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPerson.VTable, self.vtable).put_ObjectId(@ptrCast(*const IContactAggregationServerPerson, self), pObjectId);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationServerPersonCollection_Value = @import("../zig.zig").Guid.initString("4f730a4a-6604-47b6-a987-669ecf1e5751");
pub const IID_IContactAggregationServerPersonCollection = &IID_IContactAggregationServerPersonCollection_Value;
pub const IContactAggregationServerPersonCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindFirst: fn(
            self: *const IContactAggregationServerPersonCollection,
            ppServerPerson: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByServerId: fn(
            self: *const IContactAggregationServerPersonCollection,
            pServerId: ?[*:0]const u16,
            ppServerPerson: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByAggregateId: fn(
            self: *const IContactAggregationServerPersonCollection,
            pAggregateId: ?[*:0]const u16,
            ppServerPerson: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByLinkedAggregateId: fn(
            self: *const IContactAggregationServerPersonCollection,
            pAggregateId: ?[*:0]const u16,
            ppServerPerson: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindNext: fn(
            self: *const IContactAggregationServerPersonCollection,
            ppServerPerson: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: fn(
            self: *const IContactAggregationServerPersonCollection,
            pCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPersonCollection_FindFirst(self: *const T, ppServerPerson: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPersonCollection.VTable, self.vtable).FindFirst(@ptrCast(*const IContactAggregationServerPersonCollection, self), ppServerPerson);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPersonCollection_FindFirstByServerId(self: *const T, pServerId: ?[*:0]const u16, ppServerPerson: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPersonCollection.VTable, self.vtable).FindFirstByServerId(@ptrCast(*const IContactAggregationServerPersonCollection, self), pServerId, ppServerPerson);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPersonCollection_FindFirstByAggregateId(self: *const T, pAggregateId: ?[*:0]const u16, ppServerPerson: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPersonCollection.VTable, self.vtable).FindFirstByAggregateId(@ptrCast(*const IContactAggregationServerPersonCollection, self), pAggregateId, ppServerPerson);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPersonCollection_FindFirstByLinkedAggregateId(self: *const T, pAggregateId: ?[*:0]const u16, ppServerPerson: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPersonCollection.VTable, self.vtable).FindFirstByLinkedAggregateId(@ptrCast(*const IContactAggregationServerPersonCollection, self), pAggregateId, ppServerPerson);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPersonCollection_FindNext(self: *const T, ppServerPerson: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPersonCollection.VTable, self.vtable).FindNext(@ptrCast(*const IContactAggregationServerPersonCollection, self), ppServerPerson);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPersonCollection_get_Count(self: *const T, pCount: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactAggregationServerPersonCollection.VTable, self.vtable).get_Count(@ptrCast(*const IContactAggregationServerPersonCollection, self), pCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (7)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const FILETIME = @import("../foundation.zig").FILETIME;
const HRESULT = @import("../foundation.zig").HRESULT;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
