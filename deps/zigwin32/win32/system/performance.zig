//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (183)
//--------------------------------------------------------------------------------
pub const MAX_COUNTER_PATH = @as(u32, 256);
pub const PDH_MAX_COUNTER_NAME = @as(u32, 1024);
pub const PDH_MAX_INSTANCE_NAME = @as(u32, 1024);
pub const PDH_MAX_COUNTER_PATH = @as(u32, 2048);
pub const PDH_MAX_DATASOURCE_PATH = @as(u32, 1024);
pub const H_WBEM_DATASOURCE = @as(i32, -1);
pub const PDH_MAX_SCALE = @as(i32, 7);
pub const PDH_MIN_SCALE = @as(i32, -7);
pub const PDH_NOEXPANDCOUNTERS = @as(u32, 1);
pub const PDH_NOEXPANDINSTANCES = @as(u32, 2);
pub const PDH_REFRESHCOUNTERS = @as(u32, 4);
pub const PDH_LOG_TYPE_RETIRED_BIN = @as(u32, 3);
pub const PDH_LOG_TYPE_TRACE_KERNEL = @as(u32, 4);
pub const PDH_LOG_TYPE_TRACE_GENERIC = @as(u32, 5);
pub const PERF_PROVIDER_USER_MODE = @as(u32, 0);
pub const PERF_PROVIDER_KERNEL_MODE = @as(u32, 1);
pub const PERF_PROVIDER_DRIVER = @as(u32, 2);
pub const PERF_COUNTERSET_FLAG_MULTIPLE = @as(u32, 2);
pub const PERF_COUNTERSET_FLAG_AGGREGATE = @as(u32, 4);
pub const PERF_COUNTERSET_FLAG_HISTORY = @as(u32, 8);
pub const PERF_COUNTERSET_FLAG_INSTANCE = @as(u32, 16);
pub const PERF_COUNTERSET_SINGLE_INSTANCE = @as(u32, 0);
pub const PERF_COUNTERSET_MULTI_INSTANCES = @as(u32, 2);
pub const PERF_COUNTERSET_SINGLE_AGGREGATE = @as(u32, 4);
pub const PERF_AGGREGATE_MAX = @as(u32, 4);
pub const PERF_ATTRIB_BY_REFERENCE = @as(u64, 1);
pub const PERF_ATTRIB_NO_DISPLAYABLE = @as(u64, 2);
pub const PERF_ATTRIB_NO_GROUP_SEPARATOR = @as(u64, 4);
pub const PERF_ATTRIB_DISPLAY_AS_REAL = @as(u64, 8);
pub const PERF_ATTRIB_DISPLAY_AS_HEX = @as(u64, 16);
pub const PERF_WILDCARD_COUNTER = @as(u32, 4294967295);
pub const PERF_MAX_INSTANCE_NAME = @as(u32, 1024);
pub const PERF_ADD_COUNTER = @as(u32, 1);
pub const PERF_REMOVE_COUNTER = @as(u32, 2);
pub const PERF_ENUM_INSTANCES = @as(u32, 3);
pub const PERF_COLLECT_START = @as(u32, 5);
pub const PERF_COLLECT_END = @as(u32, 6);
pub const PERF_FILTER = @as(u32, 9);
pub const PERF_DATA_VERSION = @as(u32, 1);
pub const PERF_DATA_REVISION = @as(u32, 1);
pub const PERF_NO_INSTANCES = @as(i32, -1);
pub const PERF_METADATA_MULTIPLE_INSTANCES = @as(i32, -2);
pub const PERF_METADATA_NO_INSTANCES = @as(i32, -3);
pub const PERF_SIZE_DWORD = @as(u32, 0);
pub const PERF_SIZE_LARGE = @as(u32, 256);
pub const PERF_SIZE_ZERO = @as(u32, 512);
pub const PERF_SIZE_VARIABLE_LEN = @as(u32, 768);
pub const PERF_TYPE_NUMBER = @as(u32, 0);
pub const PERF_TYPE_COUNTER = @as(u32, 1024);
pub const PERF_TYPE_TEXT = @as(u32, 2048);
pub const PERF_TYPE_ZERO = @as(u32, 3072);
pub const PERF_NUMBER_HEX = @as(u32, 0);
pub const PERF_NUMBER_DECIMAL = @as(u32, 65536);
pub const PERF_NUMBER_DEC_1000 = @as(u32, 131072);
pub const PERF_COUNTER_VALUE = @as(u32, 0);
pub const PERF_COUNTER_RATE = @as(u32, 65536);
pub const PERF_COUNTER_FRACTION = @as(u32, 131072);
pub const PERF_COUNTER_BASE = @as(u32, 196608);
pub const PERF_COUNTER_ELAPSED = @as(u32, 262144);
pub const PERF_COUNTER_QUEUELEN = @as(u32, 327680);
pub const PERF_COUNTER_HISTOGRAM = @as(u32, 393216);
pub const PERF_COUNTER_PRECISION = @as(u32, 458752);
pub const PERF_TEXT_UNICODE = @as(u32, 0);
pub const PERF_TEXT_ASCII = @as(u32, 65536);
pub const PERF_TIMER_TICK = @as(u32, 0);
pub const PERF_TIMER_100NS = @as(u32, 1048576);
pub const PERF_OBJECT_TIMER = @as(u32, 2097152);
pub const PERF_DELTA_COUNTER = @as(u32, 4194304);
pub const PERF_DELTA_BASE = @as(u32, 8388608);
pub const PERF_INVERSE_COUNTER = @as(u32, 16777216);
pub const PERF_MULTI_COUNTER = @as(u32, 33554432);
pub const PERF_DISPLAY_NO_SUFFIX = @as(u32, 0);
pub const PERF_DISPLAY_PER_SEC = @as(u32, 268435456);
pub const PERF_DISPLAY_PERCENT = @as(u32, 536870912);
pub const PERF_DISPLAY_SECONDS = @as(u32, 805306368);
pub const PERF_DISPLAY_NOSHOW = @as(u32, 1073741824);
pub const PERF_COUNTER_HISTOGRAM_TYPE = @as(u32, 2147483648);
pub const PERF_NO_UNIQUE_ID = @as(i32, -1);
pub const MAX_PERF_OBJECTS_IN_QUERY_FUNCTION = @as(i32, 64);
pub const WINPERF_LOG_NONE = @as(u32, 0);
pub const WINPERF_LOG_USER = @as(u32, 1);
pub const WINPERF_LOG_DEBUG = @as(u32, 2);
pub const WINPERF_LOG_VERBOSE = @as(u32, 3);
pub const LIBID_SystemMonitor = Guid.initString("1b773e42-2509-11cf-942f-008029004347");
pub const DIID_DICounterItem = Guid.initString("c08c4ff2-0e2e-11cf-942c-008029004347");
pub const DIID_DILogFileItem = Guid.initString("8d093ffc-f777-4917-82d1-833fbc54c58f");
pub const DIID_DISystemMonitor = Guid.initString("13d73d81-c32e-11cf-9398-00aa00a3ddea");
pub const DIID_DISystemMonitorInternal = Guid.initString("194eb242-c32c-11cf-9398-00aa00a3ddea");
pub const DIID_DISystemMonitorEvents = Guid.initString("84979930-4ab3-11cf-943a-008029004347");
pub const PDH_CSTATUS_VALID_DATA = @as(i32, 0);
pub const PDH_CSTATUS_NEW_DATA = @as(i32, 1);
pub const PDH_CSTATUS_NO_MACHINE = @as(i32, -2147481648);
pub const PDH_CSTATUS_NO_INSTANCE = @as(i32, -2147481647);
pub const PDH_MORE_DATA = @as(i32, -2147481646);
pub const PDH_CSTATUS_ITEM_NOT_VALIDATED = @as(i32, -2147481645);
pub const PDH_RETRY = @as(i32, -2147481644);
pub const PDH_NO_DATA = @as(i32, -2147481643);
pub const PDH_CALC_NEGATIVE_DENOMINATOR = @as(i32, -2147481642);
pub const PDH_CALC_NEGATIVE_TIMEBASE = @as(i32, -2147481641);
pub const PDH_CALC_NEGATIVE_VALUE = @as(i32, -2147481640);
pub const PDH_DIALOG_CANCELLED = @as(i32, -2147481639);
pub const PDH_END_OF_LOG_FILE = @as(i32, -2147481638);
pub const PDH_ASYNC_QUERY_TIMEOUT = @as(i32, -2147481637);
pub const PDH_CANNOT_SET_DEFAULT_REALTIME_DATASOURCE = @as(i32, -2147481636);
pub const PDH_UNABLE_MAP_NAME_FILES = @as(i32, -2147480619);
pub const PDH_PLA_VALIDATION_WARNING = @as(i32, -2147480589);
pub const PDH_CSTATUS_NO_OBJECT = @as(i32, -1073738824);
pub const PDH_CSTATUS_NO_COUNTER = @as(i32, -1073738823);
pub const PDH_CSTATUS_INVALID_DATA = @as(i32, -1073738822);
pub const PDH_MEMORY_ALLOCATION_FAILURE = @as(i32, -1073738821);
pub const PDH_INVALID_HANDLE = @as(i32, -1073738820);
pub const PDH_INVALID_ARGUMENT = @as(i32, -1073738819);
pub const PDH_FUNCTION_NOT_FOUND = @as(i32, -1073738818);
pub const PDH_CSTATUS_NO_COUNTERNAME = @as(i32, -1073738817);
pub const PDH_CSTATUS_BAD_COUNTERNAME = @as(i32, -1073738816);
pub const PDH_INVALID_BUFFER = @as(i32, -1073738815);
pub const PDH_INSUFFICIENT_BUFFER = @as(i32, -1073738814);
pub const PDH_CANNOT_CONNECT_MACHINE = @as(i32, -1073738813);
pub const PDH_INVALID_PATH = @as(i32, -1073738812);
pub const PDH_INVALID_INSTANCE = @as(i32, -1073738811);
pub const PDH_INVALID_DATA = @as(i32, -1073738810);
pub const PDH_NO_DIALOG_DATA = @as(i32, -1073738809);
pub const PDH_CANNOT_READ_NAME_STRINGS = @as(i32, -1073738808);
pub const PDH_LOG_FILE_CREATE_ERROR = @as(i32, -1073738807);
pub const PDH_LOG_FILE_OPEN_ERROR = @as(i32, -1073738806);
pub const PDH_LOG_TYPE_NOT_FOUND = @as(i32, -1073738805);
pub const PDH_NO_MORE_DATA = @as(i32, -1073738804);
pub const PDH_ENTRY_NOT_IN_LOG_FILE = @as(i32, -1073738803);
pub const PDH_DATA_SOURCE_IS_LOG_FILE = @as(i32, -1073738802);
pub const PDH_DATA_SOURCE_IS_REAL_TIME = @as(i32, -1073738801);
pub const PDH_UNABLE_READ_LOG_HEADER = @as(i32, -1073738800);
pub const PDH_FILE_NOT_FOUND = @as(i32, -1073738799);
pub const PDH_FILE_ALREADY_EXISTS = @as(i32, -1073738798);
pub const PDH_NOT_IMPLEMENTED = @as(i32, -1073738797);
pub const PDH_STRING_NOT_FOUND = @as(i32, -1073738796);
pub const PDH_UNKNOWN_LOG_FORMAT = @as(i32, -1073738794);
pub const PDH_UNKNOWN_LOGSVC_COMMAND = @as(i32, -1073738793);
pub const PDH_LOGSVC_QUERY_NOT_FOUND = @as(i32, -1073738792);
pub const PDH_LOGSVC_NOT_OPENED = @as(i32, -1073738791);
pub const PDH_WBEM_ERROR = @as(i32, -1073738790);
pub const PDH_ACCESS_DENIED = @as(i32, -1073738789);
pub const PDH_LOG_FILE_TOO_SMALL = @as(i32, -1073738788);
pub const PDH_INVALID_DATASOURCE = @as(i32, -1073738787);
pub const PDH_INVALID_SQLDB = @as(i32, -1073738786);
pub const PDH_NO_COUNTERS = @as(i32, -1073738785);
pub const PDH_SQL_ALLOC_FAILED = @as(i32, -1073738784);
pub const PDH_SQL_ALLOCCON_FAILED = @as(i32, -1073738783);
pub const PDH_SQL_EXEC_DIRECT_FAILED = @as(i32, -1073738782);
pub const PDH_SQL_FETCH_FAILED = @as(i32, -1073738781);
pub const PDH_SQL_ROWCOUNT_FAILED = @as(i32, -1073738780);
pub const PDH_SQL_MORE_RESULTS_FAILED = @as(i32, -1073738779);
pub const PDH_SQL_CONNECT_FAILED = @as(i32, -1073738778);
pub const PDH_SQL_BIND_FAILED = @as(i32, -1073738777);
pub const PDH_CANNOT_CONNECT_WMI_SERVER = @as(i32, -1073738776);
pub const PDH_PLA_COLLECTION_ALREADY_RUNNING = @as(i32, -1073738775);
pub const PDH_PLA_ERROR_SCHEDULE_OVERLAP = @as(i32, -1073738774);
pub const PDH_PLA_COLLECTION_NOT_FOUND = @as(i32, -1073738773);
pub const PDH_PLA_ERROR_SCHEDULE_ELAPSED = @as(i32, -1073738772);
pub const PDH_PLA_ERROR_NOSTART = @as(i32, -1073738771);
pub const PDH_PLA_ERROR_ALREADY_EXISTS = @as(i32, -1073738770);
pub const PDH_PLA_ERROR_TYPE_MISMATCH = @as(i32, -1073738769);
pub const PDH_PLA_ERROR_FILEPATH = @as(i32, -1073738768);
pub const PDH_PLA_SERVICE_ERROR = @as(i32, -1073738767);
pub const PDH_PLA_VALIDATION_ERROR = @as(i32, -1073738766);
pub const PDH_PLA_ERROR_NAME_TOO_LONG = @as(i32, -1073738764);
pub const PDH_INVALID_SQL_LOG_FORMAT = @as(i32, -1073738763);
pub const PDH_COUNTER_ALREADY_IN_QUERY = @as(i32, -1073738762);
pub const PDH_BINARY_LOG_CORRUPT = @as(i32, -1073738761);
pub const PDH_LOG_SAMPLE_TOO_SMALL = @as(i32, -1073738760);
pub const PDH_OS_LATER_VERSION = @as(i32, -1073738759);
pub const PDH_OS_EARLIER_VERSION = @as(i32, -1073738758);
pub const PDH_INCORRECT_APPEND_TIME = @as(i32, -1073738757);
pub const PDH_UNMATCHED_APPEND_COUNTER = @as(i32, -1073738756);
pub const PDH_SQL_ALTER_DETAIL_FAILED = @as(i32, -1073738755);
pub const PDH_QUERY_PERF_DATA_TIMEOUT = @as(i32, -1073738754);
pub const PLA_CAPABILITY_LOCAL = @as(u32, 268435456);
pub const PLA_CAPABILITY_V1_SVC = @as(u32, 1);
pub const PLA_CAPABILITY_V1_SESSION = @as(u32, 2);
pub const PLA_CAPABILITY_V1_SYSTEM = @as(u32, 4);
pub const PLA_CAPABILITY_LEGACY_SESSION = @as(u32, 8);
pub const PLA_CAPABILITY_LEGACY_SVC = @as(u32, 16);
pub const PLA_CAPABILITY_AUTOLOGGER = @as(u32, 32);
pub const S_PDH = Guid.initString("04d66358-c4a1-419b-8023-23b73902de2c");

//--------------------------------------------------------------------------------
// Section: Types (144)
//--------------------------------------------------------------------------------
pub const PERF_DETAIL = enum(u32) {
    NOVICE = 100,
    ADVANCED = 200,
    EXPERT = 300,
    WIZARD = 400,
};
pub const PERF_DETAIL_NOVICE = PERF_DETAIL.NOVICE;
pub const PERF_DETAIL_ADVANCED = PERF_DETAIL.ADVANCED;
pub const PERF_DETAIL_EXPERT = PERF_DETAIL.EXPERT;
pub const PERF_DETAIL_WIZARD = PERF_DETAIL.WIZARD;

pub const REAL_TIME_DATA_SOURCE_ID_FLAGS = enum(u32) {
    REGISTRY = 1,
    WBEM = 4,
};
pub const DATA_SOURCE_REGISTRY = REAL_TIME_DATA_SOURCE_ID_FLAGS.REGISTRY;
pub const DATA_SOURCE_WBEM = REAL_TIME_DATA_SOURCE_ID_FLAGS.WBEM;

pub const PDH_PATH_FLAGS = enum(u32) {
    RESULT = 1,
    INPUT = 2,
    NONE = 0,
};
pub const PDH_PATH_WBEM_RESULT = PDH_PATH_FLAGS.RESULT;
pub const PDH_PATH_WBEM_INPUT = PDH_PATH_FLAGS.INPUT;
pub const PDH_PATH_WBEM_NONE = PDH_PATH_FLAGS.NONE;

pub const PDH_FMT = enum(u32) {
    DOUBLE = 512,
    LARGE = 1024,
    LONG = 256,
};
pub const PDH_FMT_DOUBLE = PDH_FMT.DOUBLE;
pub const PDH_FMT_LARGE = PDH_FMT.LARGE;
pub const PDH_FMT_LONG = PDH_FMT.LONG;

pub const PDH_LOG_TYPE = enum(u32) {
    UNDEFINED = 0,
    CSV = 1,
    SQL = 7,
    TSV = 2,
    BINARY = 8,
    PERFMON = 6,
};
pub const PDH_LOG_TYPE_UNDEFINED = PDH_LOG_TYPE.UNDEFINED;
pub const PDH_LOG_TYPE_CSV = PDH_LOG_TYPE.CSV;
pub const PDH_LOG_TYPE_SQL = PDH_LOG_TYPE.SQL;
pub const PDH_LOG_TYPE_TSV = PDH_LOG_TYPE.TSV;
pub const PDH_LOG_TYPE_BINARY = PDH_LOG_TYPE.BINARY;
pub const PDH_LOG_TYPE_PERFMON = PDH_LOG_TYPE.PERFMON;

pub const PDH_LOG = enum(u32) {
    READ_ACCESS = 65536,
    WRITE_ACCESS = 131072,
    UPDATE_ACCESS = 262144,
};
pub const PDH_LOG_READ_ACCESS = PDH_LOG.READ_ACCESS;
pub const PDH_LOG_WRITE_ACCESS = PDH_LOG.WRITE_ACCESS;
pub const PDH_LOG_UPDATE_ACCESS = PDH_LOG.UPDATE_ACCESS;

pub const PDH_SELECT_DATA_SOURCE_FLAGS = enum(u32) {
    FILE_BROWSER_ONLY = 1,
    NONE = 0,
};
pub const PDH_FLAGS_FILE_BROWSER_ONLY = PDH_SELECT_DATA_SOURCE_FLAGS.FILE_BROWSER_ONLY;
pub const PDH_FLAGS_NONE = PDH_SELECT_DATA_SOURCE_FLAGS.NONE;

pub const PDH_DLL_VERSION = enum(u32) {
    CVERSION_WIN50 = 1280,
    VERSION = 1283,
};
pub const PDH_CVERSION_WIN50 = PDH_DLL_VERSION.CVERSION_WIN50;
pub const PDH_VERSION = PDH_DLL_VERSION.VERSION;

pub const PERF_COUNTER_AGGREGATE_FUNC = enum(u32) {
    UNDEFINED = 0,
    TOTAL = 1,
    AVG = 2,
    MIN = 3,
};
pub const PERF_AGGREGATE_UNDEFINED = PERF_COUNTER_AGGREGATE_FUNC.UNDEFINED;
pub const PERF_AGGREGATE_TOTAL = PERF_COUNTER_AGGREGATE_FUNC.TOTAL;
pub const PERF_AGGREGATE_AVG = PERF_COUNTER_AGGREGATE_FUNC.AVG;
pub const PERF_AGGREGATE_MIN = PERF_COUNTER_AGGREGATE_FUNC.MIN;

// TODO: this type has a FreeFunc 'PerfStopProvider', what can Zig do with this information?
pub const PerfProviderHandle = isize;

// TODO: this type has a FreeFunc 'PerfCloseQueryHandle', what can Zig do with this information?
pub const PerfQueryHandle = isize;

const CLSID_DataCollectorSet_Value = @import("../zig.zig").Guid.initString("03837521-098b-11d8-9414-505054503030");
pub const CLSID_DataCollectorSet = &CLSID_DataCollectorSet_Value;

const CLSID_TraceSession_Value = @import("../zig.zig").Guid.initString("0383751c-098b-11d8-9414-505054503030");
pub const CLSID_TraceSession = &CLSID_TraceSession_Value;

const CLSID_TraceSessionCollection_Value = @import("../zig.zig").Guid.initString("03837530-098b-11d8-9414-505054503030");
pub const CLSID_TraceSessionCollection = &CLSID_TraceSessionCollection_Value;

const CLSID_TraceDataProvider_Value = @import("../zig.zig").Guid.initString("03837513-098b-11d8-9414-505054503030");
pub const CLSID_TraceDataProvider = &CLSID_TraceDataProvider_Value;

const CLSID_TraceDataProviderCollection_Value = @import("../zig.zig").Guid.initString("03837511-098b-11d8-9414-505054503030");
pub const CLSID_TraceDataProviderCollection = &CLSID_TraceDataProviderCollection_Value;

const CLSID_DataCollectorSetCollection_Value = @import("../zig.zig").Guid.initString("03837525-098b-11d8-9414-505054503030");
pub const CLSID_DataCollectorSetCollection = &CLSID_DataCollectorSetCollection_Value;

const CLSID_LegacyDataCollectorSet_Value = @import("../zig.zig").Guid.initString("03837526-098b-11d8-9414-505054503030");
pub const CLSID_LegacyDataCollectorSet = &CLSID_LegacyDataCollectorSet_Value;

const CLSID_LegacyDataCollectorSetCollection_Value = @import("../zig.zig").Guid.initString("03837527-098b-11d8-9414-505054503030");
pub const CLSID_LegacyDataCollectorSetCollection = &CLSID_LegacyDataCollectorSetCollection_Value;

const CLSID_LegacyTraceSession_Value = @import("../zig.zig").Guid.initString("03837528-098b-11d8-9414-505054503030");
pub const CLSID_LegacyTraceSession = &CLSID_LegacyTraceSession_Value;

const CLSID_LegacyTraceSessionCollection_Value = @import("../zig.zig").Guid.initString("03837529-098b-11d8-9414-505054503030");
pub const CLSID_LegacyTraceSessionCollection = &CLSID_LegacyTraceSessionCollection_Value;

const CLSID_ServerDataCollectorSet_Value = @import("../zig.zig").Guid.initString("03837531-098b-11d8-9414-505054503030");
pub const CLSID_ServerDataCollectorSet = &CLSID_ServerDataCollectorSet_Value;

const CLSID_ServerDataCollectorSetCollection_Value = @import("../zig.zig").Guid.initString("03837532-098b-11d8-9414-505054503030");
pub const CLSID_ServerDataCollectorSetCollection = &CLSID_ServerDataCollectorSetCollection_Value;

const CLSID_SystemDataCollectorSet_Value = @import("../zig.zig").Guid.initString("03837546-098b-11d8-9414-505054503030");
pub const CLSID_SystemDataCollectorSet = &CLSID_SystemDataCollectorSet_Value;

const CLSID_SystemDataCollectorSetCollection_Value = @import("../zig.zig").Guid.initString("03837547-098b-11d8-9414-505054503030");
pub const CLSID_SystemDataCollectorSetCollection = &CLSID_SystemDataCollectorSetCollection_Value;

const CLSID_BootTraceSession_Value = @import("../zig.zig").Guid.initString("03837538-098b-11d8-9414-505054503030");
pub const CLSID_BootTraceSession = &CLSID_BootTraceSession_Value;

const CLSID_BootTraceSessionCollection_Value = @import("../zig.zig").Guid.initString("03837539-098b-11d8-9414-505054503030");
pub const CLSID_BootTraceSessionCollection = &CLSID_BootTraceSessionCollection_Value;

pub const DataCollectorType = enum(i32) {
    PerformanceCounter = 0,
    Trace = 1,
    Configuration = 2,
    Alert = 3,
    ApiTrace = 4,
};
pub const plaPerformanceCounter = DataCollectorType.PerformanceCounter;
pub const plaTrace = DataCollectorType.Trace;
pub const plaConfiguration = DataCollectorType.Configuration;
pub const plaAlert = DataCollectorType.Alert;
pub const plaApiTrace = DataCollectorType.ApiTrace;

pub const FileFormat = enum(i32) {
    CommaSeparated = 0,
    TabSeparated = 1,
    Sql = 2,
    Binary = 3,
};
pub const plaCommaSeparated = FileFormat.CommaSeparated;
pub const plaTabSeparated = FileFormat.TabSeparated;
pub const plaSql = FileFormat.Sql;
pub const plaBinary = FileFormat.Binary;

pub const AutoPathFormat = enum(i32) {
    None = 0,
    Pattern = 1,
    Computer = 2,
    MonthDayHour = 256,
    SerialNumber = 512,
    YearDayOfYear = 1024,
    YearMonth = 2048,
    YearMonthDay = 4096,
    YearMonthDayHour = 8192,
    MonthDayHourMinute = 16384,
};
pub const plaNone = AutoPathFormat.None;
pub const plaPattern = AutoPathFormat.Pattern;
pub const plaComputer = AutoPathFormat.Computer;
pub const plaMonthDayHour = AutoPathFormat.MonthDayHour;
pub const plaSerialNumber = AutoPathFormat.SerialNumber;
pub const plaYearDayOfYear = AutoPathFormat.YearDayOfYear;
pub const plaYearMonth = AutoPathFormat.YearMonth;
pub const plaYearMonthDay = AutoPathFormat.YearMonthDay;
pub const plaYearMonthDayHour = AutoPathFormat.YearMonthDayHour;
pub const plaMonthDayHourMinute = AutoPathFormat.MonthDayHourMinute;

pub const DataCollectorSetStatus = enum(i32) {
    Stopped = 0,
    Running = 1,
    Compiling = 2,
    Pending = 3,
    Undefined = 4,
};
pub const plaStopped = DataCollectorSetStatus.Stopped;
pub const plaRunning = DataCollectorSetStatus.Running;
pub const plaCompiling = DataCollectorSetStatus.Compiling;
pub const plaPending = DataCollectorSetStatus.Pending;
pub const plaUndefined = DataCollectorSetStatus.Undefined;

pub const ClockType = enum(i32) {
    TimeStamp = 0,
    Performance = 1,
    System = 2,
    Cycle = 3,
};
pub const plaTimeStamp = ClockType.TimeStamp;
pub const plaPerformance = ClockType.Performance;
pub const plaSystem = ClockType.System;
pub const plaCycle = ClockType.Cycle;

pub const StreamMode = enum(i32) {
    File = 1,
    RealTime = 2,
    Both = 3,
    Buffering = 4,
};
pub const plaFile = StreamMode.File;
pub const plaRealTime = StreamMode.RealTime;
pub const plaBoth = StreamMode.Both;
pub const plaBuffering = StreamMode.Buffering;

pub const CommitMode = enum(i32) {
    CreateNew = 1,
    Modify = 2,
    CreateOrModify = 3,
    UpdateRunningInstance = 16,
    FlushTrace = 32,
    ValidateOnly = 4096,
};
pub const plaCreateNew = CommitMode.CreateNew;
pub const plaModify = CommitMode.Modify;
pub const plaCreateOrModify = CommitMode.CreateOrModify;
pub const plaUpdateRunningInstance = CommitMode.UpdateRunningInstance;
pub const plaFlushTrace = CommitMode.FlushTrace;
pub const plaValidateOnly = CommitMode.ValidateOnly;

pub const ValueMapType = enum(i32) {
    Index = 1,
    Flag = 2,
    FlagArray = 3,
    Validation = 4,
};
pub const plaIndex = ValueMapType.Index;
pub const plaFlag = ValueMapType.Flag;
pub const plaFlagArray = ValueMapType.FlagArray;
pub const plaValidation = ValueMapType.Validation;

pub const WeekDays = enum(i32) {
    RunOnce = 0,
    Sunday = 1,
    Monday = 2,
    Tuesday = 4,
    Wednesday = 8,
    Thursday = 16,
    Friday = 32,
    Saturday = 64,
    Everyday = 127,
};
pub const plaRunOnce = WeekDays.RunOnce;
pub const plaSunday = WeekDays.Sunday;
pub const plaMonday = WeekDays.Monday;
pub const plaTuesday = WeekDays.Tuesday;
pub const plaWednesday = WeekDays.Wednesday;
pub const plaThursday = WeekDays.Thursday;
pub const plaFriday = WeekDays.Friday;
pub const plaSaturday = WeekDays.Saturday;
pub const plaEveryday = WeekDays.Everyday;

pub const ResourcePolicy = enum(i32) {
    Largest = 0,
    Oldest = 1,
};
pub const plaDeleteLargest = ResourcePolicy.Largest;
pub const plaDeleteOldest = ResourcePolicy.Oldest;

pub const DataManagerSteps = enum(i32) {
    CreateReport = 1,
    RunRules = 2,
    CreateHtml = 4,
    FolderActions = 8,
    ResourceFreeing = 16,
};
pub const plaCreateReport = DataManagerSteps.CreateReport;
pub const plaRunRules = DataManagerSteps.RunRules;
pub const plaCreateHtml = DataManagerSteps.CreateHtml;
pub const plaFolderActions = DataManagerSteps.FolderActions;
pub const plaResourceFreeing = DataManagerSteps.ResourceFreeing;

pub const FolderActionSteps = enum(i32) {
    CreateCab = 1,
    DeleteData = 2,
    SendCab = 4,
    DeleteCab = 8,
    DeleteReport = 16,
};
pub const plaCreateCab = FolderActionSteps.CreateCab;
pub const plaDeleteData = FolderActionSteps.DeleteData;
pub const plaSendCab = FolderActionSteps.SendCab;
pub const plaDeleteCab = FolderActionSteps.DeleteCab;
pub const plaDeleteReport = FolderActionSteps.DeleteReport;

pub const PLA_CABEXTRACT_CALLBACK = fn(
    FileName: ?[*:0]const u16,
    Context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDataCollectorSet_Value = @import("../zig.zig").Guid.initString("03837520-098b-11d8-9414-505054503030");
pub const IID_IDataCollectorSet = &IID_IDataCollectorSet_Value;
pub const IDataCollectorSet = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataCollectors: fn(
            self: *const IDataCollectorSet,
            collectors: ?*?*IDataCollectorCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Duration: fn(
            self: *const IDataCollectorSet,
            seconds: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Duration: fn(
            self: *const IDataCollectorSet,
            seconds: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: fn(
            self: *const IDataCollectorSet,
            description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: fn(
            self: *const IDataCollectorSet,
            description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DescriptionUnresolved: fn(
            self: *const IDataCollectorSet,
            Descr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: fn(
            self: *const IDataCollectorSet,
            DisplayName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayName: fn(
            self: *const IDataCollectorSet,
            DisplayName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayNameUnresolved: fn(
            self: *const IDataCollectorSet,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Keywords: fn(
            self: *const IDataCollectorSet,
            keywords: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Keywords: fn(
            self: *const IDataCollectorSet,
            keywords: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LatestOutputLocation: fn(
            self: *const IDataCollectorSet,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LatestOutputLocation: fn(
            self: *const IDataCollectorSet,
            path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: fn(
            self: *const IDataCollectorSet,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OutputLocation: fn(
            self: *const IDataCollectorSet,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RootPath: fn(
            self: *const IDataCollectorSet,
            folder: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RootPath: fn(
            self: *const IDataCollectorSet,
            folder: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Segment: fn(
            self: *const IDataCollectorSet,
            segment: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Segment: fn(
            self: *const IDataCollectorSet,
            segment: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SegmentMaxDuration: fn(
            self: *const IDataCollectorSet,
            seconds: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SegmentMaxDuration: fn(
            self: *const IDataCollectorSet,
            seconds: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SegmentMaxSize: fn(
            self: *const IDataCollectorSet,
            size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SegmentMaxSize: fn(
            self: *const IDataCollectorSet,
            size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SerialNumber: fn(
            self: *const IDataCollectorSet,
            index: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SerialNumber: fn(
            self: *const IDataCollectorSet,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Server: fn(
            self: *const IDataCollectorSet,
            server: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: fn(
            self: *const IDataCollectorSet,
            status: ?*DataCollectorSetStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Subdirectory: fn(
            self: *const IDataCollectorSet,
            folder: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Subdirectory: fn(
            self: *const IDataCollectorSet,
            folder: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubdirectoryFormat: fn(
            self: *const IDataCollectorSet,
            format: ?*AutoPathFormat,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SubdirectoryFormat: fn(
            self: *const IDataCollectorSet,
            format: AutoPathFormat,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubdirectoryFormatPattern: fn(
            self: *const IDataCollectorSet,
            pattern: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SubdirectoryFormatPattern: fn(
            self: *const IDataCollectorSet,
            pattern: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Task: fn(
            self: *const IDataCollectorSet,
            task: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Task: fn(
            self: *const IDataCollectorSet,
            task: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TaskRunAsSelf: fn(
            self: *const IDataCollectorSet,
            RunAsSelf: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TaskRunAsSelf: fn(
            self: *const IDataCollectorSet,
            RunAsSelf: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TaskArguments: fn(
            self: *const IDataCollectorSet,
            task: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TaskArguments: fn(
            self: *const IDataCollectorSet,
            task: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TaskUserTextArguments: fn(
            self: *const IDataCollectorSet,
            UserText: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TaskUserTextArguments: fn(
            self: *const IDataCollectorSet,
            UserText: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Schedules: fn(
            self: *const IDataCollectorSet,
            ppSchedules: ?*?*IScheduleCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SchedulesEnabled: fn(
            self: *const IDataCollectorSet,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SchedulesEnabled: fn(
            self: *const IDataCollectorSet,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserAccount: fn(
            self: *const IDataCollectorSet,
            user: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Xml: fn(
            self: *const IDataCollectorSet,
            xml: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Security: fn(
            self: *const IDataCollectorSet,
            pbstrSecurity: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Security: fn(
            self: *const IDataCollectorSet,
            bstrSecurity: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StopOnCompletion: fn(
            self: *const IDataCollectorSet,
            Stop: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StopOnCompletion: fn(
            self: *const IDataCollectorSet,
            Stop: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataManager: fn(
            self: *const IDataCollectorSet,
            DataManager: ?*?*IDataManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCredentials: fn(
            self: *const IDataCollectorSet,
            user: ?BSTR,
            password: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Query: fn(
            self: *const IDataCollectorSet,
            name: ?BSTR,
            server: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: fn(
            self: *const IDataCollectorSet,
            name: ?BSTR,
            server: ?BSTR,
            mode: CommitMode,
            validation: ?*?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: fn(
            self: *const IDataCollectorSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Start: fn(
            self: *const IDataCollectorSet,
            Synchronous: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: fn(
            self: *const IDataCollectorSet,
            Synchronous: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetXml: fn(
            self: *const IDataCollectorSet,
            xml: ?BSTR,
            validation: ?*?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: fn(
            self: *const IDataCollectorSet,
            key: ?BSTR,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const IDataCollectorSet,
            key: ?BSTR,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_DataCollectors(self: *const T, collectors: ?*?*IDataCollectorCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_DataCollectors(@ptrCast(*const IDataCollectorSet, self), collectors);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_Duration(self: *const T, seconds: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_Duration(@ptrCast(*const IDataCollectorSet, self), seconds);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_Duration(self: *const T, seconds: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_Duration(@ptrCast(*const IDataCollectorSet, self), seconds);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_Description(self: *const T, description: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_Description(@ptrCast(*const IDataCollectorSet, self), description);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_Description(self: *const T, description: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_Description(@ptrCast(*const IDataCollectorSet, self), description);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_DescriptionUnresolved(self: *const T, Descr: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_DescriptionUnresolved(@ptrCast(*const IDataCollectorSet, self), Descr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_DisplayName(self: *const T, DisplayName: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_DisplayName(@ptrCast(*const IDataCollectorSet, self), DisplayName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_DisplayName(self: *const T, DisplayName: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_DisplayName(@ptrCast(*const IDataCollectorSet, self), DisplayName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_DisplayNameUnresolved(self: *const T, name: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_DisplayNameUnresolved(@ptrCast(*const IDataCollectorSet, self), name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_Keywords(self: *const T, keywords: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_Keywords(@ptrCast(*const IDataCollectorSet, self), keywords);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_Keywords(self: *const T, keywords: ?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_Keywords(@ptrCast(*const IDataCollectorSet, self), keywords);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_LatestOutputLocation(self: *const T, path: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_LatestOutputLocation(@ptrCast(*const IDataCollectorSet, self), path);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_LatestOutputLocation(self: *const T, path: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_LatestOutputLocation(@ptrCast(*const IDataCollectorSet, self), path);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_Name(self: *const T, name: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_Name(@ptrCast(*const IDataCollectorSet, self), name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_OutputLocation(self: *const T, path: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_OutputLocation(@ptrCast(*const IDataCollectorSet, self), path);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_RootPath(self: *const T, folder: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_RootPath(@ptrCast(*const IDataCollectorSet, self), folder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_RootPath(self: *const T, folder: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_RootPath(@ptrCast(*const IDataCollectorSet, self), folder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_Segment(self: *const T, segment: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_Segment(@ptrCast(*const IDataCollectorSet, self), segment);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_Segment(self: *const T, segment: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_Segment(@ptrCast(*const IDataCollectorSet, self), segment);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_SegmentMaxDuration(self: *const T, seconds: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_SegmentMaxDuration(@ptrCast(*const IDataCollectorSet, self), seconds);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_SegmentMaxDuration(self: *const T, seconds: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_SegmentMaxDuration(@ptrCast(*const IDataCollectorSet, self), seconds);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_SegmentMaxSize(self: *const T, size: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_SegmentMaxSize(@ptrCast(*const IDataCollectorSet, self), size);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_SegmentMaxSize(self: *const T, size: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_SegmentMaxSize(@ptrCast(*const IDataCollectorSet, self), size);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_SerialNumber(self: *const T, index: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_SerialNumber(@ptrCast(*const IDataCollectorSet, self), index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_SerialNumber(self: *const T, index: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_SerialNumber(@ptrCast(*const IDataCollectorSet, self), index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_Server(self: *const T, server: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_Server(@ptrCast(*const IDataCollectorSet, self), server);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_Status(self: *const T, status: ?*DataCollectorSetStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_Status(@ptrCast(*const IDataCollectorSet, self), status);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_Subdirectory(self: *const T, folder: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_Subdirectory(@ptrCast(*const IDataCollectorSet, self), folder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_Subdirectory(self: *const T, folder: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_Subdirectory(@ptrCast(*const IDataCollectorSet, self), folder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_SubdirectoryFormat(self: *const T, format: ?*AutoPathFormat) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_SubdirectoryFormat(@ptrCast(*const IDataCollectorSet, self), format);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_SubdirectoryFormat(self: *const T, format: AutoPathFormat) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_SubdirectoryFormat(@ptrCast(*const IDataCollectorSet, self), format);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_SubdirectoryFormatPattern(self: *const T, pattern: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_SubdirectoryFormatPattern(@ptrCast(*const IDataCollectorSet, self), pattern);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_SubdirectoryFormatPattern(self: *const T, pattern: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_SubdirectoryFormatPattern(@ptrCast(*const IDataCollectorSet, self), pattern);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_Task(self: *const T, task: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_Task(@ptrCast(*const IDataCollectorSet, self), task);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_Task(self: *const T, task: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_Task(@ptrCast(*const IDataCollectorSet, self), task);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_TaskRunAsSelf(self: *const T, RunAsSelf: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_TaskRunAsSelf(@ptrCast(*const IDataCollectorSet, self), RunAsSelf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_TaskRunAsSelf(self: *const T, RunAsSelf: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_TaskRunAsSelf(@ptrCast(*const IDataCollectorSet, self), RunAsSelf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_TaskArguments(self: *const T, task: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_TaskArguments(@ptrCast(*const IDataCollectorSet, self), task);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_TaskArguments(self: *const T, task: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_TaskArguments(@ptrCast(*const IDataCollectorSet, self), task);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_TaskUserTextArguments(self: *const T, UserText: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_TaskUserTextArguments(@ptrCast(*const IDataCollectorSet, self), UserText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_TaskUserTextArguments(self: *const T, UserText: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_TaskUserTextArguments(@ptrCast(*const IDataCollectorSet, self), UserText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_Schedules(self: *const T, ppSchedules: ?*?*IScheduleCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_Schedules(@ptrCast(*const IDataCollectorSet, self), ppSchedules);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_SchedulesEnabled(self: *const T, enabled: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_SchedulesEnabled(@ptrCast(*const IDataCollectorSet, self), enabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_SchedulesEnabled(self: *const T, enabled: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_SchedulesEnabled(@ptrCast(*const IDataCollectorSet, self), enabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_UserAccount(self: *const T, user: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_UserAccount(@ptrCast(*const IDataCollectorSet, self), user);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_Xml(self: *const T, xml: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_Xml(@ptrCast(*const IDataCollectorSet, self), xml);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_Security(self: *const T, pbstrSecurity: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_Security(@ptrCast(*const IDataCollectorSet, self), pbstrSecurity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_Security(self: *const T, bstrSecurity: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_Security(@ptrCast(*const IDataCollectorSet, self), bstrSecurity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_StopOnCompletion(self: *const T, Stop: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_StopOnCompletion(@ptrCast(*const IDataCollectorSet, self), Stop);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_put_StopOnCompletion(self: *const T, Stop: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).put_StopOnCompletion(@ptrCast(*const IDataCollectorSet, self), Stop);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_get_DataManager(self: *const T, DataManager: ?*?*IDataManager) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).get_DataManager(@ptrCast(*const IDataCollectorSet, self), DataManager);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_SetCredentials(self: *const T, user: ?BSTR, password: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).SetCredentials(@ptrCast(*const IDataCollectorSet, self), user, password);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_Query(self: *const T, name: ?BSTR, server: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).Query(@ptrCast(*const IDataCollectorSet, self), name, server);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_Commit(self: *const T, name: ?BSTR, server: ?BSTR, mode: CommitMode, validation: ?*?*IValueMap) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).Commit(@ptrCast(*const IDataCollectorSet, self), name, server, mode, validation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_Delete(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).Delete(@ptrCast(*const IDataCollectorSet, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_Start(self: *const T, Synchronous: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).Start(@ptrCast(*const IDataCollectorSet, self), Synchronous);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_Stop(self: *const T, Synchronous: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).Stop(@ptrCast(*const IDataCollectorSet, self), Synchronous);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_SetXml(self: *const T, xml: ?BSTR, validation: ?*?*IValueMap) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).SetXml(@ptrCast(*const IDataCollectorSet, self), xml, validation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_SetValue(self: *const T, key: ?BSTR, value: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).SetValue(@ptrCast(*const IDataCollectorSet, self), key, value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSet_GetValue(self: *const T, key: ?BSTR, value: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSet.VTable, self.vtable).GetValue(@ptrCast(*const IDataCollectorSet, self), key, value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDataManager_Value = @import("../zig.zig").Guid.initString("03837541-098b-11d8-9414-505054503030");
pub const IID_IDataManager = &IID_IDataManager_Value;
pub const IDataManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: fn(
            self: *const IDataManager,
            pfEnabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: fn(
            self: *const IDataManager,
            fEnabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CheckBeforeRunning: fn(
            self: *const IDataManager,
            pfCheck: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CheckBeforeRunning: fn(
            self: *const IDataManager,
            fCheck: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinFreeDisk: fn(
            self: *const IDataManager,
            MinFreeDisk: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MinFreeDisk: fn(
            self: *const IDataManager,
            MinFreeDisk: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxSize: fn(
            self: *const IDataManager,
            pulMaxSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxSize: fn(
            self: *const IDataManager,
            ulMaxSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxFolderCount: fn(
            self: *const IDataManager,
            pulMaxFolderCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxFolderCount: fn(
            self: *const IDataManager,
            ulMaxFolderCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResourcePolicy: fn(
            self: *const IDataManager,
            pPolicy: ?*ResourcePolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ResourcePolicy: fn(
            self: *const IDataManager,
            Policy: ResourcePolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FolderActions: fn(
            self: *const IDataManager,
            Actions: ?*?*IFolderActionCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReportSchema: fn(
            self: *const IDataManager,
            ReportSchema: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReportSchema: fn(
            self: *const IDataManager,
            ReportSchema: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReportFileName: fn(
            self: *const IDataManager,
            pbstrFilename: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReportFileName: fn(
            self: *const IDataManager,
            pbstrFilename: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RuleTargetFileName: fn(
            self: *const IDataManager,
            Filename: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RuleTargetFileName: fn(
            self: *const IDataManager,
            Filename: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventsFileName: fn(
            self: *const IDataManager,
            pbstrFilename: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EventsFileName: fn(
            self: *const IDataManager,
            pbstrFilename: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Rules: fn(
            self: *const IDataManager,
            pbstrXml: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Rules: fn(
            self: *const IDataManager,
            bstrXml: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Run: fn(
            self: *const IDataManager,
            Steps: DataManagerSteps,
            bstrFolder: ?BSTR,
            Errors: ?*?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Extract: fn(
            self: *const IDataManager,
            CabFilename: ?BSTR,
            DestinationPath: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_get_Enabled(self: *const T, pfEnabled: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).get_Enabled(@ptrCast(*const IDataManager, self), pfEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_put_Enabled(self: *const T, fEnabled: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).put_Enabled(@ptrCast(*const IDataManager, self), fEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_get_CheckBeforeRunning(self: *const T, pfCheck: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).get_CheckBeforeRunning(@ptrCast(*const IDataManager, self), pfCheck);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_put_CheckBeforeRunning(self: *const T, fCheck: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).put_CheckBeforeRunning(@ptrCast(*const IDataManager, self), fCheck);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_get_MinFreeDisk(self: *const T, MinFreeDisk: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).get_MinFreeDisk(@ptrCast(*const IDataManager, self), MinFreeDisk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_put_MinFreeDisk(self: *const T, MinFreeDisk: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).put_MinFreeDisk(@ptrCast(*const IDataManager, self), MinFreeDisk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_get_MaxSize(self: *const T, pulMaxSize: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).get_MaxSize(@ptrCast(*const IDataManager, self), pulMaxSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_put_MaxSize(self: *const T, ulMaxSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).put_MaxSize(@ptrCast(*const IDataManager, self), ulMaxSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_get_MaxFolderCount(self: *const T, pulMaxFolderCount: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).get_MaxFolderCount(@ptrCast(*const IDataManager, self), pulMaxFolderCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_put_MaxFolderCount(self: *const T, ulMaxFolderCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).put_MaxFolderCount(@ptrCast(*const IDataManager, self), ulMaxFolderCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_get_ResourcePolicy(self: *const T, pPolicy: ?*ResourcePolicy) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).get_ResourcePolicy(@ptrCast(*const IDataManager, self), pPolicy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_put_ResourcePolicy(self: *const T, Policy: ResourcePolicy) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).put_ResourcePolicy(@ptrCast(*const IDataManager, self), Policy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_get_FolderActions(self: *const T, Actions: ?*?*IFolderActionCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).get_FolderActions(@ptrCast(*const IDataManager, self), Actions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_get_ReportSchema(self: *const T, ReportSchema: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).get_ReportSchema(@ptrCast(*const IDataManager, self), ReportSchema);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_put_ReportSchema(self: *const T, ReportSchema: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).put_ReportSchema(@ptrCast(*const IDataManager, self), ReportSchema);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_get_ReportFileName(self: *const T, pbstrFilename: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).get_ReportFileName(@ptrCast(*const IDataManager, self), pbstrFilename);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_put_ReportFileName(self: *const T, pbstrFilename: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).put_ReportFileName(@ptrCast(*const IDataManager, self), pbstrFilename);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_get_RuleTargetFileName(self: *const T, Filename: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).get_RuleTargetFileName(@ptrCast(*const IDataManager, self), Filename);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_put_RuleTargetFileName(self: *const T, Filename: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).put_RuleTargetFileName(@ptrCast(*const IDataManager, self), Filename);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_get_EventsFileName(self: *const T, pbstrFilename: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).get_EventsFileName(@ptrCast(*const IDataManager, self), pbstrFilename);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_put_EventsFileName(self: *const T, pbstrFilename: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).put_EventsFileName(@ptrCast(*const IDataManager, self), pbstrFilename);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_get_Rules(self: *const T, pbstrXml: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).get_Rules(@ptrCast(*const IDataManager, self), pbstrXml);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_put_Rules(self: *const T, bstrXml: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).put_Rules(@ptrCast(*const IDataManager, self), bstrXml);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_Run(self: *const T, Steps: DataManagerSteps, bstrFolder: ?BSTR, Errors: ?*?*IValueMap) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).Run(@ptrCast(*const IDataManager, self), Steps, bstrFolder, Errors);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataManager_Extract(self: *const T, CabFilename: ?BSTR, DestinationPath: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataManager.VTable, self.vtable).Extract(@ptrCast(*const IDataManager, self), CabFilename, DestinationPath);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFolderAction_Value = @import("../zig.zig").Guid.initString("03837543-098b-11d8-9414-505054503030");
pub const IID_IFolderAction = &IID_IFolderAction_Value;
pub const IFolderAction = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Age: fn(
            self: *const IFolderAction,
            pulAge: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Age: fn(
            self: *const IFolderAction,
            ulAge: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Size: fn(
            self: *const IFolderAction,
            pulAge: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Size: fn(
            self: *const IFolderAction,
            ulAge: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Actions: fn(
            self: *const IFolderAction,
            Steps: ?*FolderActionSteps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Actions: fn(
            self: *const IFolderAction,
            Steps: FolderActionSteps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SendCabTo: fn(
            self: *const IFolderAction,
            pbstrDestination: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SendCabTo: fn(
            self: *const IFolderAction,
            bstrDestination: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderAction_get_Age(self: *const T, pulAge: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderAction.VTable, self.vtable).get_Age(@ptrCast(*const IFolderAction, self), pulAge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderAction_put_Age(self: *const T, ulAge: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderAction.VTable, self.vtable).put_Age(@ptrCast(*const IFolderAction, self), ulAge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderAction_get_Size(self: *const T, pulAge: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderAction.VTable, self.vtable).get_Size(@ptrCast(*const IFolderAction, self), pulAge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderAction_put_Size(self: *const T, ulAge: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderAction.VTable, self.vtable).put_Size(@ptrCast(*const IFolderAction, self), ulAge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderAction_get_Actions(self: *const T, Steps: ?*FolderActionSteps) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderAction.VTable, self.vtable).get_Actions(@ptrCast(*const IFolderAction, self), Steps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderAction_put_Actions(self: *const T, Steps: FolderActionSteps) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderAction.VTable, self.vtable).put_Actions(@ptrCast(*const IFolderAction, self), Steps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderAction_get_SendCabTo(self: *const T, pbstrDestination: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderAction.VTable, self.vtable).get_SendCabTo(@ptrCast(*const IFolderAction, self), pbstrDestination);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderAction_put_SendCabTo(self: *const T, bstrDestination: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderAction.VTable, self.vtable).put_SendCabTo(@ptrCast(*const IFolderAction, self), bstrDestination);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFolderActionCollection_Value = @import("../zig.zig").Guid.initString("03837544-098b-11d8-9414-505054503030");
pub const IID_IFolderActionCollection = &IID_IFolderActionCollection_Value;
pub const IFolderActionCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: fn(
            self: *const IFolderActionCollection,
            Count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: fn(
            self: *const IFolderActionCollection,
            Index: VARIANT,
            Action: ?*?*IFolderAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: fn(
            self: *const IFolderActionCollection,
            Enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IFolderActionCollection,
            Action: ?*IFolderAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IFolderActionCollection,
            Index: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IFolderActionCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: fn(
            self: *const IFolderActionCollection,
            Actions: ?*IFolderActionCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFolderAction: fn(
            self: *const IFolderActionCollection,
            FolderAction: ?*?*IFolderAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderActionCollection_get_Count(self: *const T, Count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderActionCollection.VTable, self.vtable).get_Count(@ptrCast(*const IFolderActionCollection, self), Count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderActionCollection_get_Item(self: *const T, Index: VARIANT, Action: ?*?*IFolderAction) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderActionCollection.VTable, self.vtable).get_Item(@ptrCast(*const IFolderActionCollection, self), Index, Action);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderActionCollection_get__NewEnum(self: *const T, Enum: ?*?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderActionCollection.VTable, self.vtable).get__NewEnum(@ptrCast(*const IFolderActionCollection, self), Enum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderActionCollection_Add(self: *const T, Action: ?*IFolderAction) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderActionCollection.VTable, self.vtable).Add(@ptrCast(*const IFolderActionCollection, self), Action);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderActionCollection_Remove(self: *const T, Index: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderActionCollection.VTable, self.vtable).Remove(@ptrCast(*const IFolderActionCollection, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderActionCollection_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderActionCollection.VTable, self.vtable).Clear(@ptrCast(*const IFolderActionCollection, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderActionCollection_AddRange(self: *const T, Actions: ?*IFolderActionCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderActionCollection.VTable, self.vtable).AddRange(@ptrCast(*const IFolderActionCollection, self), Actions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderActionCollection_CreateFolderAction(self: *const T, FolderAction: ?*?*IFolderAction) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderActionCollection.VTable, self.vtable).CreateFolderAction(@ptrCast(*const IFolderActionCollection, self), FolderAction);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDataCollector_Value = @import("../zig.zig").Guid.initString("038374ff-098b-11d8-9414-505054503030");
pub const IID_IDataCollector = &IID_IDataCollector_Value;
pub const IDataCollector = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataCollectorSet: fn(
            self: *const IDataCollector,
            group: ?*?*IDataCollectorSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DataCollectorSet: fn(
            self: *const IDataCollector,
            group: ?*IDataCollectorSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataCollectorType: fn(
            self: *const IDataCollector,
            type: ?*DataCollectorType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileName: fn(
            self: *const IDataCollector,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FileName: fn(
            self: *const IDataCollector,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileNameFormat: fn(
            self: *const IDataCollector,
            format: ?*AutoPathFormat,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FileNameFormat: fn(
            self: *const IDataCollector,
            format: AutoPathFormat,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileNameFormatPattern: fn(
            self: *const IDataCollector,
            pattern: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FileNameFormatPattern: fn(
            self: *const IDataCollector,
            pattern: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LatestOutputLocation: fn(
            self: *const IDataCollector,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LatestOutputLocation: fn(
            self: *const IDataCollector,
            path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogAppend: fn(
            self: *const IDataCollector,
            append: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogAppend: fn(
            self: *const IDataCollector,
            append: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogCircular: fn(
            self: *const IDataCollector,
            circular: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogCircular: fn(
            self: *const IDataCollector,
            circular: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogOverwrite: fn(
            self: *const IDataCollector,
            overwrite: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogOverwrite: fn(
            self: *const IDataCollector,
            overwrite: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: fn(
            self: *const IDataCollector,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: fn(
            self: *const IDataCollector,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OutputLocation: fn(
            self: *const IDataCollector,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Index: fn(
            self: *const IDataCollector,
            index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Index: fn(
            self: *const IDataCollector,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Xml: fn(
            self: *const IDataCollector,
            Xml: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetXml: fn(
            self: *const IDataCollector,
            Xml: ?BSTR,
            Validation: ?*?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateOutputLocation: fn(
            self: *const IDataCollector,
            Latest: i16,
            Location: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_get_DataCollectorSet(self: *const T, group: ?*?*IDataCollectorSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).get_DataCollectorSet(@ptrCast(*const IDataCollector, self), group);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_put_DataCollectorSet(self: *const T, group: ?*IDataCollectorSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).put_DataCollectorSet(@ptrCast(*const IDataCollector, self), group);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_get_DataCollectorType(self: *const T, type_: ?*DataCollectorType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).get_DataCollectorType(@ptrCast(*const IDataCollector, self), type_);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_get_FileName(self: *const T, name: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).get_FileName(@ptrCast(*const IDataCollector, self), name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_put_FileName(self: *const T, name: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).put_FileName(@ptrCast(*const IDataCollector, self), name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_get_FileNameFormat(self: *const T, format: ?*AutoPathFormat) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).get_FileNameFormat(@ptrCast(*const IDataCollector, self), format);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_put_FileNameFormat(self: *const T, format: AutoPathFormat) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).put_FileNameFormat(@ptrCast(*const IDataCollector, self), format);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_get_FileNameFormatPattern(self: *const T, pattern: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).get_FileNameFormatPattern(@ptrCast(*const IDataCollector, self), pattern);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_put_FileNameFormatPattern(self: *const T, pattern: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).put_FileNameFormatPattern(@ptrCast(*const IDataCollector, self), pattern);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_get_LatestOutputLocation(self: *const T, path: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).get_LatestOutputLocation(@ptrCast(*const IDataCollector, self), path);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_put_LatestOutputLocation(self: *const T, path: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).put_LatestOutputLocation(@ptrCast(*const IDataCollector, self), path);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_get_LogAppend(self: *const T, append: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).get_LogAppend(@ptrCast(*const IDataCollector, self), append);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_put_LogAppend(self: *const T, append: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).put_LogAppend(@ptrCast(*const IDataCollector, self), append);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_get_LogCircular(self: *const T, circular: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).get_LogCircular(@ptrCast(*const IDataCollector, self), circular);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_put_LogCircular(self: *const T, circular: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).put_LogCircular(@ptrCast(*const IDataCollector, self), circular);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_get_LogOverwrite(self: *const T, overwrite: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).get_LogOverwrite(@ptrCast(*const IDataCollector, self), overwrite);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_put_LogOverwrite(self: *const T, overwrite: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).put_LogOverwrite(@ptrCast(*const IDataCollector, self), overwrite);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_get_Name(self: *const T, name: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).get_Name(@ptrCast(*const IDataCollector, self), name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_put_Name(self: *const T, name: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).put_Name(@ptrCast(*const IDataCollector, self), name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_get_OutputLocation(self: *const T, path: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).get_OutputLocation(@ptrCast(*const IDataCollector, self), path);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_get_Index(self: *const T, index: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).get_Index(@ptrCast(*const IDataCollector, self), index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_put_Index(self: *const T, index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).put_Index(@ptrCast(*const IDataCollector, self), index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_get_Xml(self: *const T, Xml: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).get_Xml(@ptrCast(*const IDataCollector, self), Xml);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_SetXml(self: *const T, Xml: ?BSTR, Validation: ?*?*IValueMap) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).SetXml(@ptrCast(*const IDataCollector, self), Xml, Validation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollector_CreateOutputLocation(self: *const T, Latest: i16, Location: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollector.VTable, self.vtable).CreateOutputLocation(@ptrCast(*const IDataCollector, self), Latest, Location);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPerformanceCounterDataCollector_Value = @import("../zig.zig").Guid.initString("03837506-098b-11d8-9414-505054503030");
pub const IID_IPerformanceCounterDataCollector = &IID_IPerformanceCounterDataCollector_Value;
pub const IPerformanceCounterDataCollector = extern struct {
    pub const VTable = extern struct {
        base: IDataCollector.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataSourceName: fn(
            self: *const IPerformanceCounterDataCollector,
            dsn: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DataSourceName: fn(
            self: *const IPerformanceCounterDataCollector,
            dsn: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PerformanceCounters: fn(
            self: *const IPerformanceCounterDataCollector,
            counters: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PerformanceCounters: fn(
            self: *const IPerformanceCounterDataCollector,
            counters: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogFileFormat: fn(
            self: *const IPerformanceCounterDataCollector,
            format: ?*FileFormat,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogFileFormat: fn(
            self: *const IPerformanceCounterDataCollector,
            format: FileFormat,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SampleInterval: fn(
            self: *const IPerformanceCounterDataCollector,
            interval: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SampleInterval: fn(
            self: *const IPerformanceCounterDataCollector,
            interval: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SegmentMaxRecords: fn(
            self: *const IPerformanceCounterDataCollector,
            records: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SegmentMaxRecords: fn(
            self: *const IPerformanceCounterDataCollector,
            records: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDataCollector.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPerformanceCounterDataCollector_get_DataSourceName(self: *const T, dsn: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPerformanceCounterDataCollector.VTable, self.vtable).get_DataSourceName(@ptrCast(*const IPerformanceCounterDataCollector, self), dsn);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPerformanceCounterDataCollector_put_DataSourceName(self: *const T, dsn: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPerformanceCounterDataCollector.VTable, self.vtable).put_DataSourceName(@ptrCast(*const IPerformanceCounterDataCollector, self), dsn);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPerformanceCounterDataCollector_get_PerformanceCounters(self: *const T, counters: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPerformanceCounterDataCollector.VTable, self.vtable).get_PerformanceCounters(@ptrCast(*const IPerformanceCounterDataCollector, self), counters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPerformanceCounterDataCollector_put_PerformanceCounters(self: *const T, counters: ?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPerformanceCounterDataCollector.VTable, self.vtable).put_PerformanceCounters(@ptrCast(*const IPerformanceCounterDataCollector, self), counters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPerformanceCounterDataCollector_get_LogFileFormat(self: *const T, format: ?*FileFormat) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPerformanceCounterDataCollector.VTable, self.vtable).get_LogFileFormat(@ptrCast(*const IPerformanceCounterDataCollector, self), format);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPerformanceCounterDataCollector_put_LogFileFormat(self: *const T, format: FileFormat) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPerformanceCounterDataCollector.VTable, self.vtable).put_LogFileFormat(@ptrCast(*const IPerformanceCounterDataCollector, self), format);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPerformanceCounterDataCollector_get_SampleInterval(self: *const T, interval: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPerformanceCounterDataCollector.VTable, self.vtable).get_SampleInterval(@ptrCast(*const IPerformanceCounterDataCollector, self), interval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPerformanceCounterDataCollector_put_SampleInterval(self: *const T, interval: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPerformanceCounterDataCollector.VTable, self.vtable).put_SampleInterval(@ptrCast(*const IPerformanceCounterDataCollector, self), interval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPerformanceCounterDataCollector_get_SegmentMaxRecords(self: *const T, records: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPerformanceCounterDataCollector.VTable, self.vtable).get_SegmentMaxRecords(@ptrCast(*const IPerformanceCounterDataCollector, self), records);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPerformanceCounterDataCollector_put_SegmentMaxRecords(self: *const T, records: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPerformanceCounterDataCollector.VTable, self.vtable).put_SegmentMaxRecords(@ptrCast(*const IPerformanceCounterDataCollector, self), records);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITraceDataCollector_Value = @import("../zig.zig").Guid.initString("0383750b-098b-11d8-9414-505054503030");
pub const IID_ITraceDataCollector = &IID_ITraceDataCollector_Value;
pub const ITraceDataCollector = extern struct {
    pub const VTable = extern struct {
        base: IDataCollector.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BufferSize: fn(
            self: *const ITraceDataCollector,
            size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BufferSize: fn(
            self: *const ITraceDataCollector,
            size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BuffersLost: fn(
            self: *const ITraceDataCollector,
            buffers: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BuffersLost: fn(
            self: *const ITraceDataCollector,
            buffers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BuffersWritten: fn(
            self: *const ITraceDataCollector,
            buffers: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BuffersWritten: fn(
            self: *const ITraceDataCollector,
            buffers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClockType: fn(
            self: *const ITraceDataCollector,
            clock: ?*ClockType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClockType: fn(
            self: *const ITraceDataCollector,
            clock: ClockType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventsLost: fn(
            self: *const ITraceDataCollector,
            events: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EventsLost: fn(
            self: *const ITraceDataCollector,
            events: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExtendedModes: fn(
            self: *const ITraceDataCollector,
            mode: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExtendedModes: fn(
            self: *const ITraceDataCollector,
            mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FlushTimer: fn(
            self: *const ITraceDataCollector,
            seconds: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FlushTimer: fn(
            self: *const ITraceDataCollector,
            seconds: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FreeBuffers: fn(
            self: *const ITraceDataCollector,
            buffers: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FreeBuffers: fn(
            self: *const ITraceDataCollector,
            buffers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Guid: fn(
            self: *const ITraceDataCollector,
            guid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Guid: fn(
            self: *const ITraceDataCollector,
            guid: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsKernelTrace: fn(
            self: *const ITraceDataCollector,
            kernel: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaximumBuffers: fn(
            self: *const ITraceDataCollector,
            buffers: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaximumBuffers: fn(
            self: *const ITraceDataCollector,
            buffers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinimumBuffers: fn(
            self: *const ITraceDataCollector,
            buffers: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MinimumBuffers: fn(
            self: *const ITraceDataCollector,
            buffers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NumberOfBuffers: fn(
            self: *const ITraceDataCollector,
            buffers: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NumberOfBuffers: fn(
            self: *const ITraceDataCollector,
            buffers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PreallocateFile: fn(
            self: *const ITraceDataCollector,
            allocate: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PreallocateFile: fn(
            self: *const ITraceDataCollector,
            allocate: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProcessMode: fn(
            self: *const ITraceDataCollector,
            process: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProcessMode: fn(
            self: *const ITraceDataCollector,
            process: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RealTimeBuffersLost: fn(
            self: *const ITraceDataCollector,
            buffers: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RealTimeBuffersLost: fn(
            self: *const ITraceDataCollector,
            buffers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SessionId: fn(
            self: *const ITraceDataCollector,
            id: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SessionId: fn(
            self: *const ITraceDataCollector,
            id: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SessionName: fn(
            self: *const ITraceDataCollector,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SessionName: fn(
            self: *const ITraceDataCollector,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SessionThreadId: fn(
            self: *const ITraceDataCollector,
            tid: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SessionThreadId: fn(
            self: *const ITraceDataCollector,
            tid: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StreamMode: fn(
            self: *const ITraceDataCollector,
            mode: ?*StreamMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StreamMode: fn(
            self: *const ITraceDataCollector,
            mode: StreamMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TraceDataProviders: fn(
            self: *const ITraceDataCollector,
            providers: ?*?*ITraceDataProviderCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDataCollector.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_BufferSize(self: *const T, size: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_BufferSize(@ptrCast(*const ITraceDataCollector, self), size);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_put_BufferSize(self: *const T, size: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).put_BufferSize(@ptrCast(*const ITraceDataCollector, self), size);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_BuffersLost(self: *const T, buffers: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_BuffersLost(@ptrCast(*const ITraceDataCollector, self), buffers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_put_BuffersLost(self: *const T, buffers: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).put_BuffersLost(@ptrCast(*const ITraceDataCollector, self), buffers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_BuffersWritten(self: *const T, buffers: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_BuffersWritten(@ptrCast(*const ITraceDataCollector, self), buffers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_put_BuffersWritten(self: *const T, buffers: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).put_BuffersWritten(@ptrCast(*const ITraceDataCollector, self), buffers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_ClockType(self: *const T, clock: ?*ClockType) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_ClockType(@ptrCast(*const ITraceDataCollector, self), clock);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_put_ClockType(self: *const T, clock: ClockType) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).put_ClockType(@ptrCast(*const ITraceDataCollector, self), clock);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_EventsLost(self: *const T, events: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_EventsLost(@ptrCast(*const ITraceDataCollector, self), events);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_put_EventsLost(self: *const T, events: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).put_EventsLost(@ptrCast(*const ITraceDataCollector, self), events);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_ExtendedModes(self: *const T, mode: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_ExtendedModes(@ptrCast(*const ITraceDataCollector, self), mode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_put_ExtendedModes(self: *const T, mode: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).put_ExtendedModes(@ptrCast(*const ITraceDataCollector, self), mode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_FlushTimer(self: *const T, seconds: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_FlushTimer(@ptrCast(*const ITraceDataCollector, self), seconds);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_put_FlushTimer(self: *const T, seconds: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).put_FlushTimer(@ptrCast(*const ITraceDataCollector, self), seconds);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_FreeBuffers(self: *const T, buffers: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_FreeBuffers(@ptrCast(*const ITraceDataCollector, self), buffers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_put_FreeBuffers(self: *const T, buffers: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).put_FreeBuffers(@ptrCast(*const ITraceDataCollector, self), buffers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_Guid(self: *const T, guid: ?*Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_Guid(@ptrCast(*const ITraceDataCollector, self), guid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_put_Guid(self: *const T, guid: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).put_Guid(@ptrCast(*const ITraceDataCollector, self), guid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_IsKernelTrace(self: *const T, kernel: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_IsKernelTrace(@ptrCast(*const ITraceDataCollector, self), kernel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_MaximumBuffers(self: *const T, buffers: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_MaximumBuffers(@ptrCast(*const ITraceDataCollector, self), buffers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_put_MaximumBuffers(self: *const T, buffers: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).put_MaximumBuffers(@ptrCast(*const ITraceDataCollector, self), buffers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_MinimumBuffers(self: *const T, buffers: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_MinimumBuffers(@ptrCast(*const ITraceDataCollector, self), buffers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_put_MinimumBuffers(self: *const T, buffers: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).put_MinimumBuffers(@ptrCast(*const ITraceDataCollector, self), buffers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_NumberOfBuffers(self: *const T, buffers: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_NumberOfBuffers(@ptrCast(*const ITraceDataCollector, self), buffers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_put_NumberOfBuffers(self: *const T, buffers: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).put_NumberOfBuffers(@ptrCast(*const ITraceDataCollector, self), buffers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_PreallocateFile(self: *const T, allocate: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_PreallocateFile(@ptrCast(*const ITraceDataCollector, self), allocate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_put_PreallocateFile(self: *const T, allocate: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).put_PreallocateFile(@ptrCast(*const ITraceDataCollector, self), allocate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_ProcessMode(self: *const T, process: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_ProcessMode(@ptrCast(*const ITraceDataCollector, self), process);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_put_ProcessMode(self: *const T, process: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).put_ProcessMode(@ptrCast(*const ITraceDataCollector, self), process);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_RealTimeBuffersLost(self: *const T, buffers: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_RealTimeBuffersLost(@ptrCast(*const ITraceDataCollector, self), buffers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_put_RealTimeBuffersLost(self: *const T, buffers: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).put_RealTimeBuffersLost(@ptrCast(*const ITraceDataCollector, self), buffers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_SessionId(self: *const T, id: ?*u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_SessionId(@ptrCast(*const ITraceDataCollector, self), id);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_put_SessionId(self: *const T, id: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).put_SessionId(@ptrCast(*const ITraceDataCollector, self), id);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_SessionName(self: *const T, name: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_SessionName(@ptrCast(*const ITraceDataCollector, self), name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_put_SessionName(self: *const T, name: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).put_SessionName(@ptrCast(*const ITraceDataCollector, self), name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_SessionThreadId(self: *const T, tid: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_SessionThreadId(@ptrCast(*const ITraceDataCollector, self), tid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_put_SessionThreadId(self: *const T, tid: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).put_SessionThreadId(@ptrCast(*const ITraceDataCollector, self), tid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_StreamMode(self: *const T, mode: ?*StreamMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_StreamMode(@ptrCast(*const ITraceDataCollector, self), mode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_put_StreamMode(self: *const T, mode: StreamMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).put_StreamMode(@ptrCast(*const ITraceDataCollector, self), mode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataCollector_get_TraceDataProviders(self: *const T, providers: ?*?*ITraceDataProviderCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataCollector.VTable, self.vtable).get_TraceDataProviders(@ptrCast(*const ITraceDataCollector, self), providers);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IConfigurationDataCollector_Value = @import("../zig.zig").Guid.initString("03837514-098b-11d8-9414-505054503030");
pub const IID_IConfigurationDataCollector = &IID_IConfigurationDataCollector_Value;
pub const IConfigurationDataCollector = extern struct {
    pub const VTable = extern struct {
        base: IDataCollector.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileMaxCount: fn(
            self: *const IConfigurationDataCollector,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FileMaxCount: fn(
            self: *const IConfigurationDataCollector,
            count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileMaxRecursiveDepth: fn(
            self: *const IConfigurationDataCollector,
            depth: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FileMaxRecursiveDepth: fn(
            self: *const IConfigurationDataCollector,
            depth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileMaxTotalSize: fn(
            self: *const IConfigurationDataCollector,
            size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FileMaxTotalSize: fn(
            self: *const IConfigurationDataCollector,
            size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Files: fn(
            self: *const IConfigurationDataCollector,
            Files: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Files: fn(
            self: *const IConfigurationDataCollector,
            Files: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ManagementQueries: fn(
            self: *const IConfigurationDataCollector,
            Queries: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ManagementQueries: fn(
            self: *const IConfigurationDataCollector,
            Queries: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueryNetworkAdapters: fn(
            self: *const IConfigurationDataCollector,
            network: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_QueryNetworkAdapters: fn(
            self: *const IConfigurationDataCollector,
            network: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RegistryKeys: fn(
            self: *const IConfigurationDataCollector,
            query: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RegistryKeys: fn(
            self: *const IConfigurationDataCollector,
            query: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RegistryMaxRecursiveDepth: fn(
            self: *const IConfigurationDataCollector,
            depth: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RegistryMaxRecursiveDepth: fn(
            self: *const IConfigurationDataCollector,
            depth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SystemStateFile: fn(
            self: *const IConfigurationDataCollector,
            FileName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SystemStateFile: fn(
            self: *const IConfigurationDataCollector,
            FileName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDataCollector.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConfigurationDataCollector_get_FileMaxCount(self: *const T, count: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConfigurationDataCollector.VTable, self.vtable).get_FileMaxCount(@ptrCast(*const IConfigurationDataCollector, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConfigurationDataCollector_put_FileMaxCount(self: *const T, count: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConfigurationDataCollector.VTable, self.vtable).put_FileMaxCount(@ptrCast(*const IConfigurationDataCollector, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConfigurationDataCollector_get_FileMaxRecursiveDepth(self: *const T, depth: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConfigurationDataCollector.VTable, self.vtable).get_FileMaxRecursiveDepth(@ptrCast(*const IConfigurationDataCollector, self), depth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConfigurationDataCollector_put_FileMaxRecursiveDepth(self: *const T, depth: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConfigurationDataCollector.VTable, self.vtable).put_FileMaxRecursiveDepth(@ptrCast(*const IConfigurationDataCollector, self), depth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConfigurationDataCollector_get_FileMaxTotalSize(self: *const T, size: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConfigurationDataCollector.VTable, self.vtable).get_FileMaxTotalSize(@ptrCast(*const IConfigurationDataCollector, self), size);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConfigurationDataCollector_put_FileMaxTotalSize(self: *const T, size: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConfigurationDataCollector.VTable, self.vtable).put_FileMaxTotalSize(@ptrCast(*const IConfigurationDataCollector, self), size);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConfigurationDataCollector_get_Files(self: *const T, Files: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConfigurationDataCollector.VTable, self.vtable).get_Files(@ptrCast(*const IConfigurationDataCollector, self), Files);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConfigurationDataCollector_put_Files(self: *const T, Files: ?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConfigurationDataCollector.VTable, self.vtable).put_Files(@ptrCast(*const IConfigurationDataCollector, self), Files);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConfigurationDataCollector_get_ManagementQueries(self: *const T, Queries: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConfigurationDataCollector.VTable, self.vtable).get_ManagementQueries(@ptrCast(*const IConfigurationDataCollector, self), Queries);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConfigurationDataCollector_put_ManagementQueries(self: *const T, Queries: ?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConfigurationDataCollector.VTable, self.vtable).put_ManagementQueries(@ptrCast(*const IConfigurationDataCollector, self), Queries);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConfigurationDataCollector_get_QueryNetworkAdapters(self: *const T, network: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConfigurationDataCollector.VTable, self.vtable).get_QueryNetworkAdapters(@ptrCast(*const IConfigurationDataCollector, self), network);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConfigurationDataCollector_put_QueryNetworkAdapters(self: *const T, network: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConfigurationDataCollector.VTable, self.vtable).put_QueryNetworkAdapters(@ptrCast(*const IConfigurationDataCollector, self), network);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConfigurationDataCollector_get_RegistryKeys(self: *const T, query: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConfigurationDataCollector.VTable, self.vtable).get_RegistryKeys(@ptrCast(*const IConfigurationDataCollector, self), query);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConfigurationDataCollector_put_RegistryKeys(self: *const T, query: ?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConfigurationDataCollector.VTable, self.vtable).put_RegistryKeys(@ptrCast(*const IConfigurationDataCollector, self), query);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConfigurationDataCollector_get_RegistryMaxRecursiveDepth(self: *const T, depth: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConfigurationDataCollector.VTable, self.vtable).get_RegistryMaxRecursiveDepth(@ptrCast(*const IConfigurationDataCollector, self), depth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConfigurationDataCollector_put_RegistryMaxRecursiveDepth(self: *const T, depth: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConfigurationDataCollector.VTable, self.vtable).put_RegistryMaxRecursiveDepth(@ptrCast(*const IConfigurationDataCollector, self), depth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConfigurationDataCollector_get_SystemStateFile(self: *const T, FileName: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConfigurationDataCollector.VTable, self.vtable).get_SystemStateFile(@ptrCast(*const IConfigurationDataCollector, self), FileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConfigurationDataCollector_put_SystemStateFile(self: *const T, FileName: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConfigurationDataCollector.VTable, self.vtable).put_SystemStateFile(@ptrCast(*const IConfigurationDataCollector, self), FileName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAlertDataCollector_Value = @import("../zig.zig").Guid.initString("03837516-098b-11d8-9414-505054503030");
pub const IID_IAlertDataCollector = &IID_IAlertDataCollector_Value;
pub const IAlertDataCollector = extern struct {
    pub const VTable = extern struct {
        base: IDataCollector.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AlertThresholds: fn(
            self: *const IAlertDataCollector,
            alerts: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AlertThresholds: fn(
            self: *const IAlertDataCollector,
            alerts: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventLog: fn(
            self: *const IAlertDataCollector,
            log: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EventLog: fn(
            self: *const IAlertDataCollector,
            log: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SampleInterval: fn(
            self: *const IAlertDataCollector,
            interval: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SampleInterval: fn(
            self: *const IAlertDataCollector,
            interval: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Task: fn(
            self: *const IAlertDataCollector,
            task: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Task: fn(
            self: *const IAlertDataCollector,
            task: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TaskRunAsSelf: fn(
            self: *const IAlertDataCollector,
            RunAsSelf: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TaskRunAsSelf: fn(
            self: *const IAlertDataCollector,
            RunAsSelf: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TaskArguments: fn(
            self: *const IAlertDataCollector,
            task: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TaskArguments: fn(
            self: *const IAlertDataCollector,
            task: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TaskUserTextArguments: fn(
            self: *const IAlertDataCollector,
            task: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TaskUserTextArguments: fn(
            self: *const IAlertDataCollector,
            task: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TriggerDataCollectorSet: fn(
            self: *const IAlertDataCollector,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TriggerDataCollectorSet: fn(
            self: *const IAlertDataCollector,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDataCollector.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlertDataCollector_get_AlertThresholds(self: *const T, alerts: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlertDataCollector.VTable, self.vtable).get_AlertThresholds(@ptrCast(*const IAlertDataCollector, self), alerts);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlertDataCollector_put_AlertThresholds(self: *const T, alerts: ?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlertDataCollector.VTable, self.vtable).put_AlertThresholds(@ptrCast(*const IAlertDataCollector, self), alerts);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlertDataCollector_get_EventLog(self: *const T, log: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlertDataCollector.VTable, self.vtable).get_EventLog(@ptrCast(*const IAlertDataCollector, self), log);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlertDataCollector_put_EventLog(self: *const T, log: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlertDataCollector.VTable, self.vtable).put_EventLog(@ptrCast(*const IAlertDataCollector, self), log);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlertDataCollector_get_SampleInterval(self: *const T, interval: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlertDataCollector.VTable, self.vtable).get_SampleInterval(@ptrCast(*const IAlertDataCollector, self), interval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlertDataCollector_put_SampleInterval(self: *const T, interval: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlertDataCollector.VTable, self.vtable).put_SampleInterval(@ptrCast(*const IAlertDataCollector, self), interval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlertDataCollector_get_Task(self: *const T, task: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlertDataCollector.VTable, self.vtable).get_Task(@ptrCast(*const IAlertDataCollector, self), task);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlertDataCollector_put_Task(self: *const T, task: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlertDataCollector.VTable, self.vtable).put_Task(@ptrCast(*const IAlertDataCollector, self), task);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlertDataCollector_get_TaskRunAsSelf(self: *const T, RunAsSelf: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlertDataCollector.VTable, self.vtable).get_TaskRunAsSelf(@ptrCast(*const IAlertDataCollector, self), RunAsSelf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlertDataCollector_put_TaskRunAsSelf(self: *const T, RunAsSelf: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlertDataCollector.VTable, self.vtable).put_TaskRunAsSelf(@ptrCast(*const IAlertDataCollector, self), RunAsSelf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlertDataCollector_get_TaskArguments(self: *const T, task: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlertDataCollector.VTable, self.vtable).get_TaskArguments(@ptrCast(*const IAlertDataCollector, self), task);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlertDataCollector_put_TaskArguments(self: *const T, task: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlertDataCollector.VTable, self.vtable).put_TaskArguments(@ptrCast(*const IAlertDataCollector, self), task);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlertDataCollector_get_TaskUserTextArguments(self: *const T, task: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlertDataCollector.VTable, self.vtable).get_TaskUserTextArguments(@ptrCast(*const IAlertDataCollector, self), task);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlertDataCollector_put_TaskUserTextArguments(self: *const T, task: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlertDataCollector.VTable, self.vtable).put_TaskUserTextArguments(@ptrCast(*const IAlertDataCollector, self), task);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlertDataCollector_get_TriggerDataCollectorSet(self: *const T, name: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlertDataCollector.VTable, self.vtable).get_TriggerDataCollectorSet(@ptrCast(*const IAlertDataCollector, self), name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlertDataCollector_put_TriggerDataCollectorSet(self: *const T, name: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlertDataCollector.VTable, self.vtable).put_TriggerDataCollectorSet(@ptrCast(*const IAlertDataCollector, self), name);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IApiTracingDataCollector_Value = @import("../zig.zig").Guid.initString("0383751a-098b-11d8-9414-505054503030");
pub const IID_IApiTracingDataCollector = &IID_IApiTracingDataCollector_Value;
pub const IApiTracingDataCollector = extern struct {
    pub const VTable = extern struct {
        base: IDataCollector.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogApiNamesOnly: fn(
            self: *const IApiTracingDataCollector,
            logapinames: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogApiNamesOnly: fn(
            self: *const IApiTracingDataCollector,
            logapinames: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogApisRecursively: fn(
            self: *const IApiTracingDataCollector,
            logrecursively: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogApisRecursively: fn(
            self: *const IApiTracingDataCollector,
            logrecursively: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExePath: fn(
            self: *const IApiTracingDataCollector,
            exepath: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExePath: fn(
            self: *const IApiTracingDataCollector,
            exepath: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogFilePath: fn(
            self: *const IApiTracingDataCollector,
            logfilepath: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogFilePath: fn(
            self: *const IApiTracingDataCollector,
            logfilepath: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IncludeModules: fn(
            self: *const IApiTracingDataCollector,
            includemodules: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IncludeModules: fn(
            self: *const IApiTracingDataCollector,
            includemodules: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IncludeApis: fn(
            self: *const IApiTracingDataCollector,
            includeapis: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IncludeApis: fn(
            self: *const IApiTracingDataCollector,
            includeapis: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExcludeApis: fn(
            self: *const IApiTracingDataCollector,
            excludeapis: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExcludeApis: fn(
            self: *const IApiTracingDataCollector,
            excludeapis: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDataCollector.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApiTracingDataCollector_get_LogApiNamesOnly(self: *const T, logapinames: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApiTracingDataCollector.VTable, self.vtable).get_LogApiNamesOnly(@ptrCast(*const IApiTracingDataCollector, self), logapinames);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApiTracingDataCollector_put_LogApiNamesOnly(self: *const T, logapinames: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApiTracingDataCollector.VTable, self.vtable).put_LogApiNamesOnly(@ptrCast(*const IApiTracingDataCollector, self), logapinames);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApiTracingDataCollector_get_LogApisRecursively(self: *const T, logrecursively: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApiTracingDataCollector.VTable, self.vtable).get_LogApisRecursively(@ptrCast(*const IApiTracingDataCollector, self), logrecursively);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApiTracingDataCollector_put_LogApisRecursively(self: *const T, logrecursively: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApiTracingDataCollector.VTable, self.vtable).put_LogApisRecursively(@ptrCast(*const IApiTracingDataCollector, self), logrecursively);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApiTracingDataCollector_get_ExePath(self: *const T, exepath: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApiTracingDataCollector.VTable, self.vtable).get_ExePath(@ptrCast(*const IApiTracingDataCollector, self), exepath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApiTracingDataCollector_put_ExePath(self: *const T, exepath: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApiTracingDataCollector.VTable, self.vtable).put_ExePath(@ptrCast(*const IApiTracingDataCollector, self), exepath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApiTracingDataCollector_get_LogFilePath(self: *const T, logfilepath: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApiTracingDataCollector.VTable, self.vtable).get_LogFilePath(@ptrCast(*const IApiTracingDataCollector, self), logfilepath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApiTracingDataCollector_put_LogFilePath(self: *const T, logfilepath: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApiTracingDataCollector.VTable, self.vtable).put_LogFilePath(@ptrCast(*const IApiTracingDataCollector, self), logfilepath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApiTracingDataCollector_get_IncludeModules(self: *const T, includemodules: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApiTracingDataCollector.VTable, self.vtable).get_IncludeModules(@ptrCast(*const IApiTracingDataCollector, self), includemodules);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApiTracingDataCollector_put_IncludeModules(self: *const T, includemodules: ?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApiTracingDataCollector.VTable, self.vtable).put_IncludeModules(@ptrCast(*const IApiTracingDataCollector, self), includemodules);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApiTracingDataCollector_get_IncludeApis(self: *const T, includeapis: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApiTracingDataCollector.VTable, self.vtable).get_IncludeApis(@ptrCast(*const IApiTracingDataCollector, self), includeapis);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApiTracingDataCollector_put_IncludeApis(self: *const T, includeapis: ?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApiTracingDataCollector.VTable, self.vtable).put_IncludeApis(@ptrCast(*const IApiTracingDataCollector, self), includeapis);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApiTracingDataCollector_get_ExcludeApis(self: *const T, excludeapis: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApiTracingDataCollector.VTable, self.vtable).get_ExcludeApis(@ptrCast(*const IApiTracingDataCollector, self), excludeapis);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApiTracingDataCollector_put_ExcludeApis(self: *const T, excludeapis: ?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApiTracingDataCollector.VTable, self.vtable).put_ExcludeApis(@ptrCast(*const IApiTracingDataCollector, self), excludeapis);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDataCollectorCollection_Value = @import("../zig.zig").Guid.initString("03837502-098b-11d8-9414-505054503030");
pub const IID_IDataCollectorCollection = &IID_IDataCollectorCollection_Value;
pub const IDataCollectorCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: fn(
            self: *const IDataCollectorCollection,
            retVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: fn(
            self: *const IDataCollectorCollection,
            index: VARIANT,
            collector: ?*?*IDataCollector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: fn(
            self: *const IDataCollectorCollection,
            retVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IDataCollectorCollection,
            collector: ?*IDataCollector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IDataCollectorCollection,
            collector: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IDataCollectorCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: fn(
            self: *const IDataCollectorCollection,
            collectors: ?*IDataCollectorCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDataCollectorFromXml: fn(
            self: *const IDataCollectorCollection,
            bstrXml: ?BSTR,
            pValidation: ?*?*IValueMap,
            pCollector: ?*?*IDataCollector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDataCollector: fn(
            self: *const IDataCollectorCollection,
            Type: DataCollectorType,
            Collector: ?*?*IDataCollector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorCollection_get_Count(self: *const T, retVal: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorCollection.VTable, self.vtable).get_Count(@ptrCast(*const IDataCollectorCollection, self), retVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorCollection_get_Item(self: *const T, index: VARIANT, collector: ?*?*IDataCollector) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorCollection.VTable, self.vtable).get_Item(@ptrCast(*const IDataCollectorCollection, self), index, collector);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorCollection_get__NewEnum(self: *const T, retVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorCollection.VTable, self.vtable).get__NewEnum(@ptrCast(*const IDataCollectorCollection, self), retVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorCollection_Add(self: *const T, collector: ?*IDataCollector) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorCollection.VTable, self.vtable).Add(@ptrCast(*const IDataCollectorCollection, self), collector);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorCollection_Remove(self: *const T, collector: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorCollection.VTable, self.vtable).Remove(@ptrCast(*const IDataCollectorCollection, self), collector);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorCollection_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorCollection.VTable, self.vtable).Clear(@ptrCast(*const IDataCollectorCollection, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorCollection_AddRange(self: *const T, collectors: ?*IDataCollectorCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorCollection.VTable, self.vtable).AddRange(@ptrCast(*const IDataCollectorCollection, self), collectors);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorCollection_CreateDataCollectorFromXml(self: *const T, bstrXml: ?BSTR, pValidation: ?*?*IValueMap, pCollector: ?*?*IDataCollector) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorCollection.VTable, self.vtable).CreateDataCollectorFromXml(@ptrCast(*const IDataCollectorCollection, self), bstrXml, pValidation, pCollector);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorCollection_CreateDataCollector(self: *const T, Type: DataCollectorType, Collector: ?*?*IDataCollector) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorCollection.VTable, self.vtable).CreateDataCollector(@ptrCast(*const IDataCollectorCollection, self), Type, Collector);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDataCollectorSetCollection_Value = @import("../zig.zig").Guid.initString("03837524-098b-11d8-9414-505054503030");
pub const IID_IDataCollectorSetCollection = &IID_IDataCollectorSetCollection_Value;
pub const IDataCollectorSetCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: fn(
            self: *const IDataCollectorSetCollection,
            retVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: fn(
            self: *const IDataCollectorSetCollection,
            index: VARIANT,
            set: ?*?*IDataCollectorSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: fn(
            self: *const IDataCollectorSetCollection,
            retVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IDataCollectorSetCollection,
            set: ?*IDataCollectorSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IDataCollectorSetCollection,
            set: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IDataCollectorSetCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: fn(
            self: *const IDataCollectorSetCollection,
            sets: ?*IDataCollectorSetCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataCollectorSets: fn(
            self: *const IDataCollectorSetCollection,
            server: ?BSTR,
            filter: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSetCollection_get_Count(self: *const T, retVal: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSetCollection.VTable, self.vtable).get_Count(@ptrCast(*const IDataCollectorSetCollection, self), retVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSetCollection_get_Item(self: *const T, index: VARIANT, set: ?*?*IDataCollectorSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSetCollection.VTable, self.vtable).get_Item(@ptrCast(*const IDataCollectorSetCollection, self), index, set);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSetCollection_get__NewEnum(self: *const T, retVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSetCollection.VTable, self.vtable).get__NewEnum(@ptrCast(*const IDataCollectorSetCollection, self), retVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSetCollection_Add(self: *const T, set: ?*IDataCollectorSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSetCollection.VTable, self.vtable).Add(@ptrCast(*const IDataCollectorSetCollection, self), set);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSetCollection_Remove(self: *const T, set: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSetCollection.VTable, self.vtable).Remove(@ptrCast(*const IDataCollectorSetCollection, self), set);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSetCollection_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSetCollection.VTable, self.vtable).Clear(@ptrCast(*const IDataCollectorSetCollection, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSetCollection_AddRange(self: *const T, sets: ?*IDataCollectorSetCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSetCollection.VTable, self.vtable).AddRange(@ptrCast(*const IDataCollectorSetCollection, self), sets);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataCollectorSetCollection_GetDataCollectorSets(self: *const T, server: ?BSTR, filter: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataCollectorSetCollection.VTable, self.vtable).GetDataCollectorSets(@ptrCast(*const IDataCollectorSetCollection, self), server, filter);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITraceDataProvider_Value = @import("../zig.zig").Guid.initString("03837512-098b-11d8-9414-505054503030");
pub const IID_ITraceDataProvider = &IID_ITraceDataProvider_Value;
pub const ITraceDataProvider = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: fn(
            self: *const ITraceDataProvider,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayName: fn(
            self: *const ITraceDataProvider,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Guid: fn(
            self: *const ITraceDataProvider,
            guid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Guid: fn(
            self: *const ITraceDataProvider,
            guid: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Level: fn(
            self: *const ITraceDataProvider,
            ppLevel: ?*?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeywordsAny: fn(
            self: *const ITraceDataProvider,
            ppKeywords: ?*?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeywordsAll: fn(
            self: *const ITraceDataProvider,
            ppKeywords: ?*?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: fn(
            self: *const ITraceDataProvider,
            ppProperties: ?*?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FilterEnabled: fn(
            self: *const ITraceDataProvider,
            FilterEnabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FilterEnabled: fn(
            self: *const ITraceDataProvider,
            FilterEnabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FilterType: fn(
            self: *const ITraceDataProvider,
            pulType: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FilterType: fn(
            self: *const ITraceDataProvider,
            ulType: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FilterData: fn(
            self: *const ITraceDataProvider,
            ppData: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FilterData: fn(
            self: *const ITraceDataProvider,
            pData: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Query: fn(
            self: *const ITraceDataProvider,
            bstrName: ?BSTR,
            bstrServer: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resolve: fn(
            self: *const ITraceDataProvider,
            pFrom: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSecurity: fn(
            self: *const ITraceDataProvider,
            Sddl: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecurity: fn(
            self: *const ITraceDataProvider,
            SecurityInfo: u32,
            Sddl: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegisteredProcesses: fn(
            self: *const ITraceDataProvider,
            Processes: ?*?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProvider_get_DisplayName(self: *const T, name: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProvider.VTable, self.vtable).get_DisplayName(@ptrCast(*const ITraceDataProvider, self), name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProvider_put_DisplayName(self: *const T, name: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProvider.VTable, self.vtable).put_DisplayName(@ptrCast(*const ITraceDataProvider, self), name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProvider_get_Guid(self: *const T, guid: ?*Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProvider.VTable, self.vtable).get_Guid(@ptrCast(*const ITraceDataProvider, self), guid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProvider_put_Guid(self: *const T, guid: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProvider.VTable, self.vtable).put_Guid(@ptrCast(*const ITraceDataProvider, self), guid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProvider_get_Level(self: *const T, ppLevel: ?*?*IValueMap) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProvider.VTable, self.vtable).get_Level(@ptrCast(*const ITraceDataProvider, self), ppLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProvider_get_KeywordsAny(self: *const T, ppKeywords: ?*?*IValueMap) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProvider.VTable, self.vtable).get_KeywordsAny(@ptrCast(*const ITraceDataProvider, self), ppKeywords);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProvider_get_KeywordsAll(self: *const T, ppKeywords: ?*?*IValueMap) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProvider.VTable, self.vtable).get_KeywordsAll(@ptrCast(*const ITraceDataProvider, self), ppKeywords);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProvider_get_Properties(self: *const T, ppProperties: ?*?*IValueMap) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProvider.VTable, self.vtable).get_Properties(@ptrCast(*const ITraceDataProvider, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProvider_get_FilterEnabled(self: *const T, FilterEnabled: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProvider.VTable, self.vtable).get_FilterEnabled(@ptrCast(*const ITraceDataProvider, self), FilterEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProvider_put_FilterEnabled(self: *const T, FilterEnabled: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProvider.VTable, self.vtable).put_FilterEnabled(@ptrCast(*const ITraceDataProvider, self), FilterEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProvider_get_FilterType(self: *const T, pulType: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProvider.VTable, self.vtable).get_FilterType(@ptrCast(*const ITraceDataProvider, self), pulType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProvider_put_FilterType(self: *const T, ulType: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProvider.VTable, self.vtable).put_FilterType(@ptrCast(*const ITraceDataProvider, self), ulType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProvider_get_FilterData(self: *const T, ppData: ?*?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProvider.VTable, self.vtable).get_FilterData(@ptrCast(*const ITraceDataProvider, self), ppData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProvider_put_FilterData(self: *const T, pData: ?*SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProvider.VTable, self.vtable).put_FilterData(@ptrCast(*const ITraceDataProvider, self), pData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProvider_Query(self: *const T, bstrName: ?BSTR, bstrServer: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProvider.VTable, self.vtable).Query(@ptrCast(*const ITraceDataProvider, self), bstrName, bstrServer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProvider_Resolve(self: *const T, pFrom: ?*IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProvider.VTable, self.vtable).Resolve(@ptrCast(*const ITraceDataProvider, self), pFrom);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProvider_SetSecurity(self: *const T, Sddl: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProvider.VTable, self.vtable).SetSecurity(@ptrCast(*const ITraceDataProvider, self), Sddl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProvider_GetSecurity(self: *const T, SecurityInfo: u32, Sddl: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProvider.VTable, self.vtable).GetSecurity(@ptrCast(*const ITraceDataProvider, self), SecurityInfo, Sddl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProvider_GetRegisteredProcesses(self: *const T, Processes: ?*?*IValueMap) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProvider.VTable, self.vtable).GetRegisteredProcesses(@ptrCast(*const ITraceDataProvider, self), Processes);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITraceDataProviderCollection_Value = @import("../zig.zig").Guid.initString("03837510-098b-11d8-9414-505054503030");
pub const IID_ITraceDataProviderCollection = &IID_ITraceDataProviderCollection_Value;
pub const ITraceDataProviderCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: fn(
            self: *const ITraceDataProviderCollection,
            retVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: fn(
            self: *const ITraceDataProviderCollection,
            index: VARIANT,
            ppProvider: ?*?*ITraceDataProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: fn(
            self: *const ITraceDataProviderCollection,
            retVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ITraceDataProviderCollection,
            pProvider: ?*ITraceDataProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ITraceDataProviderCollection,
            vProvider: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const ITraceDataProviderCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: fn(
            self: *const ITraceDataProviderCollection,
            providers: ?*ITraceDataProviderCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTraceDataProvider: fn(
            self: *const ITraceDataProviderCollection,
            Provider: ?*?*ITraceDataProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTraceDataProviders: fn(
            self: *const ITraceDataProviderCollection,
            server: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTraceDataProvidersByProcess: fn(
            self: *const ITraceDataProviderCollection,
            Server: ?BSTR,
            Pid: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProviderCollection_get_Count(self: *const T, retVal: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProviderCollection.VTable, self.vtable).get_Count(@ptrCast(*const ITraceDataProviderCollection, self), retVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProviderCollection_get_Item(self: *const T, index: VARIANT, ppProvider: ?*?*ITraceDataProvider) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProviderCollection.VTable, self.vtable).get_Item(@ptrCast(*const ITraceDataProviderCollection, self), index, ppProvider);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProviderCollection_get__NewEnum(self: *const T, retVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProviderCollection.VTable, self.vtable).get__NewEnum(@ptrCast(*const ITraceDataProviderCollection, self), retVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProviderCollection_Add(self: *const T, pProvider: ?*ITraceDataProvider) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProviderCollection.VTable, self.vtable).Add(@ptrCast(*const ITraceDataProviderCollection, self), pProvider);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProviderCollection_Remove(self: *const T, vProvider: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProviderCollection.VTable, self.vtable).Remove(@ptrCast(*const ITraceDataProviderCollection, self), vProvider);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProviderCollection_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProviderCollection.VTable, self.vtable).Clear(@ptrCast(*const ITraceDataProviderCollection, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProviderCollection_AddRange(self: *const T, providers: ?*ITraceDataProviderCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProviderCollection.VTable, self.vtable).AddRange(@ptrCast(*const ITraceDataProviderCollection, self), providers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProviderCollection_CreateTraceDataProvider(self: *const T, Provider: ?*?*ITraceDataProvider) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProviderCollection.VTable, self.vtable).CreateTraceDataProvider(@ptrCast(*const ITraceDataProviderCollection, self), Provider);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProviderCollection_GetTraceDataProviders(self: *const T, server: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProviderCollection.VTable, self.vtable).GetTraceDataProviders(@ptrCast(*const ITraceDataProviderCollection, self), server);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceDataProviderCollection_GetTraceDataProvidersByProcess(self: *const T, Server: ?BSTR, Pid: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceDataProviderCollection.VTable, self.vtable).GetTraceDataProvidersByProcess(@ptrCast(*const ITraceDataProviderCollection, self), Server, Pid);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISchedule_Value = @import("../zig.zig").Guid.initString("0383753a-098b-11d8-9414-505054503030");
pub const IID_ISchedule = &IID_ISchedule_Value;
pub const ISchedule = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartDate: fn(
            self: *const ISchedule,
            start: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StartDate: fn(
            self: *const ISchedule,
            start: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EndDate: fn(
            self: *const ISchedule,
            end: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EndDate: fn(
            self: *const ISchedule,
            end: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartTime: fn(
            self: *const ISchedule,
            start: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StartTime: fn(
            self: *const ISchedule,
            start: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Days: fn(
            self: *const ISchedule,
            days: ?*WeekDays,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Days: fn(
            self: *const ISchedule,
            days: WeekDays,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISchedule_get_StartDate(self: *const T, start: ?*VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISchedule.VTable, self.vtable).get_StartDate(@ptrCast(*const ISchedule, self), start);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISchedule_put_StartDate(self: *const T, start: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISchedule.VTable, self.vtable).put_StartDate(@ptrCast(*const ISchedule, self), start);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISchedule_get_EndDate(self: *const T, end: ?*VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISchedule.VTable, self.vtable).get_EndDate(@ptrCast(*const ISchedule, self), end);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISchedule_put_EndDate(self: *const T, end: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISchedule.VTable, self.vtable).put_EndDate(@ptrCast(*const ISchedule, self), end);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISchedule_get_StartTime(self: *const T, start: ?*VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISchedule.VTable, self.vtable).get_StartTime(@ptrCast(*const ISchedule, self), start);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISchedule_put_StartTime(self: *const T, start: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISchedule.VTable, self.vtable).put_StartTime(@ptrCast(*const ISchedule, self), start);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISchedule_get_Days(self: *const T, days: ?*WeekDays) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISchedule.VTable, self.vtable).get_Days(@ptrCast(*const ISchedule, self), days);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISchedule_put_Days(self: *const T, days: WeekDays) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISchedule.VTable, self.vtable).put_Days(@ptrCast(*const ISchedule, self), days);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IScheduleCollection_Value = @import("../zig.zig").Guid.initString("0383753d-098b-11d8-9414-505054503030");
pub const IID_IScheduleCollection = &IID_IScheduleCollection_Value;
pub const IScheduleCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: fn(
            self: *const IScheduleCollection,
            retVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: fn(
            self: *const IScheduleCollection,
            index: VARIANT,
            ppSchedule: ?*?*ISchedule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: fn(
            self: *const IScheduleCollection,
            ienum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IScheduleCollection,
            pSchedule: ?*ISchedule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IScheduleCollection,
            vSchedule: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IScheduleCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: fn(
            self: *const IScheduleCollection,
            pSchedules: ?*IScheduleCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSchedule: fn(
            self: *const IScheduleCollection,
            Schedule: ?*?*ISchedule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IScheduleCollection_get_Count(self: *const T, retVal: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IScheduleCollection.VTable, self.vtable).get_Count(@ptrCast(*const IScheduleCollection, self), retVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IScheduleCollection_get_Item(self: *const T, index: VARIANT, ppSchedule: ?*?*ISchedule) callconv(.Inline) HRESULT {
            return @ptrCast(*const IScheduleCollection.VTable, self.vtable).get_Item(@ptrCast(*const IScheduleCollection, self), index, ppSchedule);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IScheduleCollection_get__NewEnum(self: *const T, ienum: ?*?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IScheduleCollection.VTable, self.vtable).get__NewEnum(@ptrCast(*const IScheduleCollection, self), ienum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IScheduleCollection_Add(self: *const T, pSchedule: ?*ISchedule) callconv(.Inline) HRESULT {
            return @ptrCast(*const IScheduleCollection.VTable, self.vtable).Add(@ptrCast(*const IScheduleCollection, self), pSchedule);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IScheduleCollection_Remove(self: *const T, vSchedule: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IScheduleCollection.VTable, self.vtable).Remove(@ptrCast(*const IScheduleCollection, self), vSchedule);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IScheduleCollection_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IScheduleCollection.VTable, self.vtable).Clear(@ptrCast(*const IScheduleCollection, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IScheduleCollection_AddRange(self: *const T, pSchedules: ?*IScheduleCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IScheduleCollection.VTable, self.vtable).AddRange(@ptrCast(*const IScheduleCollection, self), pSchedules);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IScheduleCollection_CreateSchedule(self: *const T, Schedule: ?*?*ISchedule) callconv(.Inline) HRESULT {
            return @ptrCast(*const IScheduleCollection.VTable, self.vtable).CreateSchedule(@ptrCast(*const IScheduleCollection, self), Schedule);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IValueMapItem_Value = @import("../zig.zig").Guid.initString("03837533-098b-11d8-9414-505054503030");
pub const IID_IValueMapItem = &IID_IValueMapItem_Value;
pub const IValueMapItem = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: fn(
            self: *const IValueMapItem,
            description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: fn(
            self: *const IValueMapItem,
            description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: fn(
            self: *const IValueMapItem,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: fn(
            self: *const IValueMapItem,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Key: fn(
            self: *const IValueMapItem,
            key: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Key: fn(
            self: *const IValueMapItem,
            key: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: fn(
            self: *const IValueMapItem,
            Value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: fn(
            self: *const IValueMapItem,
            Value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ValueMapType: fn(
            self: *const IValueMapItem,
            type: ?*ValueMapType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ValueMapType: fn(
            self: *const IValueMapItem,
            type: ValueMapType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMapItem_get_Description(self: *const T, description: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMapItem.VTable, self.vtable).get_Description(@ptrCast(*const IValueMapItem, self), description);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMapItem_put_Description(self: *const T, description: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMapItem.VTable, self.vtable).put_Description(@ptrCast(*const IValueMapItem, self), description);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMapItem_get_Enabled(self: *const T, enabled: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMapItem.VTable, self.vtable).get_Enabled(@ptrCast(*const IValueMapItem, self), enabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMapItem_put_Enabled(self: *const T, enabled: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMapItem.VTable, self.vtable).put_Enabled(@ptrCast(*const IValueMapItem, self), enabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMapItem_get_Key(self: *const T, key: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMapItem.VTable, self.vtable).get_Key(@ptrCast(*const IValueMapItem, self), key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMapItem_put_Key(self: *const T, key: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMapItem.VTable, self.vtable).put_Key(@ptrCast(*const IValueMapItem, self), key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMapItem_get_Value(self: *const T, Value: ?*VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMapItem.VTable, self.vtable).get_Value(@ptrCast(*const IValueMapItem, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMapItem_put_Value(self: *const T, Value: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMapItem.VTable, self.vtable).put_Value(@ptrCast(*const IValueMapItem, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMapItem_get_ValueMapType(self: *const T, type_: ?*ValueMapType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMapItem.VTable, self.vtable).get_ValueMapType(@ptrCast(*const IValueMapItem, self), type_);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMapItem_put_ValueMapType(self: *const T, type_: ValueMapType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMapItem.VTable, self.vtable).put_ValueMapType(@ptrCast(*const IValueMapItem, self), type_);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IValueMap_Value = @import("../zig.zig").Guid.initString("03837534-098b-11d8-9414-505054503030");
pub const IID_IValueMap = &IID_IValueMap_Value;
pub const IValueMap = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: fn(
            self: *const IValueMap,
            retVal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: fn(
            self: *const IValueMap,
            index: VARIANT,
            value: ?*?*IValueMapItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: fn(
            self: *const IValueMap,
            retVal: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: fn(
            self: *const IValueMap,
            description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: fn(
            self: *const IValueMap,
            description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: fn(
            self: *const IValueMap,
            Value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: fn(
            self: *const IValueMap,
            Value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ValueMapType: fn(
            self: *const IValueMap,
            type: ?*ValueMapType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ValueMapType: fn(
            self: *const IValueMap,
            type: ValueMapType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IValueMap,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IValueMap,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: fn(
            self: *const IValueMap,
            map: ?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateValueMapItem: fn(
            self: *const IValueMap,
            Item: ?*?*IValueMapItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMap_get_Count(self: *const T, retVal: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMap.VTable, self.vtable).get_Count(@ptrCast(*const IValueMap, self), retVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMap_get_Item(self: *const T, index: VARIANT, value: ?*?*IValueMapItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMap.VTable, self.vtable).get_Item(@ptrCast(*const IValueMap, self), index, value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMap_get__NewEnum(self: *const T, retVal: ?*?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMap.VTable, self.vtable).get__NewEnum(@ptrCast(*const IValueMap, self), retVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMap_get_Description(self: *const T, description: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMap.VTable, self.vtable).get_Description(@ptrCast(*const IValueMap, self), description);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMap_put_Description(self: *const T, description: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMap.VTable, self.vtable).put_Description(@ptrCast(*const IValueMap, self), description);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMap_get_Value(self: *const T, Value: ?*VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMap.VTable, self.vtable).get_Value(@ptrCast(*const IValueMap, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMap_put_Value(self: *const T, Value: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMap.VTable, self.vtable).put_Value(@ptrCast(*const IValueMap, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMap_get_ValueMapType(self: *const T, type_: ?*ValueMapType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMap.VTable, self.vtable).get_ValueMapType(@ptrCast(*const IValueMap, self), type_);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMap_put_ValueMapType(self: *const T, type_: ValueMapType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMap.VTable, self.vtable).put_ValueMapType(@ptrCast(*const IValueMap, self), type_);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMap_Add(self: *const T, value: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMap.VTable, self.vtable).Add(@ptrCast(*const IValueMap, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMap_Remove(self: *const T, value: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMap.VTable, self.vtable).Remove(@ptrCast(*const IValueMap, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMap_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMap.VTable, self.vtable).Clear(@ptrCast(*const IValueMap, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMap_AddRange(self: *const T, map: ?*IValueMap) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMap.VTable, self.vtable).AddRange(@ptrCast(*const IValueMap, self), map);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IValueMap_CreateValueMapItem(self: *const T, Item: ?*?*IValueMapItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IValueMap.VTable, self.vtable).CreateValueMapItem(@ptrCast(*const IValueMap, self), Item);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PERF_COUNTERSET_INFO = extern struct {
    CounterSetGuid: Guid,
    ProviderGuid: Guid,
    NumCounters: u32,
    InstanceType: u32,
};

pub const PERF_COUNTER_INFO = extern struct {
    CounterId: u32,
    Type: u32,
    Attrib: u64,
    Size: u32,
    DetailLevel: u32,
    Scale: i32,
    Offset: u32,
};

pub const PERF_COUNTERSET_INSTANCE = extern struct {
    CounterSetGuid: Guid,
    dwSize: u32,
    InstanceId: u32,
    InstanceNameOffset: u32,
    InstanceNameSize: u32,
};

pub const PERF_COUNTER_IDENTITY = extern struct {
    CounterSetGuid: Guid,
    BufferSize: u32,
    CounterId: u32,
    InstanceId: u32,
    MachineOffset: u32,
    NameOffset: u32,
    Reserved: u32,
};

pub const PERFLIBREQUEST = fn(
    RequestCode: u32,
    Buffer: ?*anyopaque,
    BufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PERF_MEM_ALLOC = fn(
    AllocSize: usize,
    pContext: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

pub const PERF_MEM_FREE = fn(
    pBuffer: ?*anyopaque,
    pContext: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PERF_PROVIDER_CONTEXT = extern struct {
    ContextSize: u32,
    Reserved: u32,
    ControlCallback: ?PERFLIBREQUEST,
    MemAllocRoutine: ?PERF_MEM_ALLOC,
    MemFreeRoutine: ?PERF_MEM_FREE,
    pMemContext: ?*anyopaque,
};

pub const PERF_INSTANCE_HEADER = extern struct {
    Size: u32,
    InstanceId: u32,
};

pub const PerfRegInfoType = enum(i32) {
    COUNTERSET_STRUCT = 1,
    COUNTER_STRUCT = 2,
    COUNTERSET_NAME_STRING = 3,
    COUNTERSET_HELP_STRING = 4,
    COUNTER_NAME_STRINGS = 5,
    COUNTER_HELP_STRINGS = 6,
    PROVIDER_NAME = 7,
    PROVIDER_GUID = 8,
    COUNTERSET_ENGLISH_NAME = 9,
    COUNTER_ENGLISH_NAMES = 10,
};
pub const PERF_REG_COUNTERSET_STRUCT = PerfRegInfoType.COUNTERSET_STRUCT;
pub const PERF_REG_COUNTER_STRUCT = PerfRegInfoType.COUNTER_STRUCT;
pub const PERF_REG_COUNTERSET_NAME_STRING = PerfRegInfoType.COUNTERSET_NAME_STRING;
pub const PERF_REG_COUNTERSET_HELP_STRING = PerfRegInfoType.COUNTERSET_HELP_STRING;
pub const PERF_REG_COUNTER_NAME_STRINGS = PerfRegInfoType.COUNTER_NAME_STRINGS;
pub const PERF_REG_COUNTER_HELP_STRINGS = PerfRegInfoType.COUNTER_HELP_STRINGS;
pub const PERF_REG_PROVIDER_NAME = PerfRegInfoType.PROVIDER_NAME;
pub const PERF_REG_PROVIDER_GUID = PerfRegInfoType.PROVIDER_GUID;
pub const PERF_REG_COUNTERSET_ENGLISH_NAME = PerfRegInfoType.COUNTERSET_ENGLISH_NAME;
pub const PERF_REG_COUNTER_ENGLISH_NAMES = PerfRegInfoType.COUNTER_ENGLISH_NAMES;

pub const PERF_COUNTERSET_REG_INFO = extern struct {
    CounterSetGuid: Guid,
    CounterSetType: u32,
    DetailLevel: u32,
    NumCounters: u32,
    InstanceType: u32,
};

pub const PERF_COUNTER_REG_INFO = extern struct {
    CounterId: u32,
    Type: u32,
    Attrib: u64,
    DetailLevel: u32,
    DefaultScale: i32,
    BaseCounterId: u32,
    PerfTimeId: u32,
    PerfFreqId: u32,
    MultiId: u32,
    AggregateFunc: PERF_COUNTER_AGGREGATE_FUNC,
    Reserved: u32,
};

pub const PERF_STRING_BUFFER_HEADER = extern struct {
    dwSize: u32,
    dwCounters: u32,
};

pub const PERF_STRING_COUNTER_HEADER = extern struct {
    dwCounterId: u32,
    dwOffset: u32,
};

pub const PERF_COUNTER_IDENTIFIER = extern struct {
    CounterSetGuid: Guid,
    Status: u32,
    Size: u32,
    CounterId: u32,
    InstanceId: u32,
    Index: u32,
    Reserved: u32,
};

pub const PERF_DATA_HEADER = extern struct {
    dwTotalSize: u32,
    dwNumCounters: u32,
    PerfTimeStamp: i64,
    PerfTime100NSec: i64,
    PerfFreq: i64,
    SystemTime: SYSTEMTIME,
};

pub const PerfCounterDataType = enum(i32) {
    ERROR_RETURN = 0,
    SINGLE_COUNTER = 1,
    MULTIPLE_COUNTERS = 2,
    MULTIPLE_INSTANCES = 4,
    COUNTERSET = 6,
};
pub const PERF_ERROR_RETURN = PerfCounterDataType.ERROR_RETURN;
pub const PERF_SINGLE_COUNTER = PerfCounterDataType.SINGLE_COUNTER;
pub const PERF_MULTIPLE_COUNTERS = PerfCounterDataType.MULTIPLE_COUNTERS;
pub const PERF_MULTIPLE_INSTANCES = PerfCounterDataType.MULTIPLE_INSTANCES;
pub const PERF_COUNTERSET = PerfCounterDataType.COUNTERSET;

pub const PERF_COUNTER_HEADER = extern struct {
    dwStatus: u32,
    dwType: PerfCounterDataType,
    dwSize: u32,
    Reserved: u32,
};

pub const PERF_MULTI_INSTANCES = extern struct {
    dwTotalSize: u32,
    dwInstances: u32,
};

pub const PERF_MULTI_COUNTERS = extern struct {
    dwSize: u32,
    dwCounters: u32,
};

pub const PERF_COUNTER_DATA = extern struct {
    dwDataSize: u32,
    dwSize: u32,
};

pub const PERF_DATA_BLOCK = extern struct {
    Signature: [4]u16,
    LittleEndian: u32,
    Version: u32,
    Revision: u32,
    TotalByteLength: u32,
    HeaderLength: u32,
    NumObjectTypes: u32,
    DefaultObject: i32,
    SystemTime: SYSTEMTIME,
    PerfTime: LARGE_INTEGER,
    PerfFreq: LARGE_INTEGER,
    PerfTime100nSec: LARGE_INTEGER,
    SystemNameLength: u32,
    SystemNameOffset: u32,
};



pub const PERF_INSTANCE_DEFINITION = extern struct {
    ByteLength: u32,
    ParentObjectTitleIndex: u32,
    ParentObjectInstance: u32,
    UniqueID: i32,
    NameOffset: u32,
    NameLength: u32,
};

pub const PERF_COUNTER_BLOCK = extern struct {
    ByteLength: u32,
};

pub const PM_OPEN_PROC = fn(
    pContext: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PM_COLLECT_PROC = fn(
    pValueName: ?PWSTR,
    ppData: ?*?*anyopaque,
    pcbTotalBytes: ?*u32,
    pNumObjectTypes: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PM_CLOSE_PROC = fn(
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PDH_RAW_COUNTER = extern struct {
    CStatus: u32,
    TimeStamp: FILETIME,
    FirstValue: i64,
    SecondValue: i64,
    MultiCount: u32,
};

pub const PDH_RAW_COUNTER_ITEM_A = extern struct {
    szName: ?PSTR,
    RawValue: PDH_RAW_COUNTER,
};

pub const PDH_RAW_COUNTER_ITEM_W = extern struct {
    szName: ?PWSTR,
    RawValue: PDH_RAW_COUNTER,
};

pub const PDH_FMT_COUNTERVALUE = extern struct {
    CStatus: u32,
    Anonymous: extern union {
        longValue: i32,
        doubleValue: f64,
        largeValue: i64,
        AnsiStringValue: ?[*:0]const u8,
        WideStringValue: ?[*:0]const u16,
    },
};

pub const PDH_FMT_COUNTERVALUE_ITEM_A = extern struct {
    szName: ?PSTR,
    FmtValue: PDH_FMT_COUNTERVALUE,
};

pub const PDH_FMT_COUNTERVALUE_ITEM_W = extern struct {
    szName: ?PWSTR,
    FmtValue: PDH_FMT_COUNTERVALUE,
};

pub const PDH_STATISTICS = extern struct {
    dwFormat: u32,
    count: u32,
    min: PDH_FMT_COUNTERVALUE,
    max: PDH_FMT_COUNTERVALUE,
    mean: PDH_FMT_COUNTERVALUE,
};

pub const PDH_COUNTER_PATH_ELEMENTS_A = extern struct {
    szMachineName: ?PSTR,
    szObjectName: ?PSTR,
    szInstanceName: ?PSTR,
    szParentInstance: ?PSTR,
    dwInstanceIndex: u32,
    szCounterName: ?PSTR,
};

pub const PDH_COUNTER_PATH_ELEMENTS_W = extern struct {
    szMachineName: ?PWSTR,
    szObjectName: ?PWSTR,
    szInstanceName: ?PWSTR,
    szParentInstance: ?PWSTR,
    dwInstanceIndex: u32,
    szCounterName: ?PWSTR,
};

pub const PDH_DATA_ITEM_PATH_ELEMENTS_A = extern struct {
    szMachineName: ?PSTR,
    ObjectGUID: Guid,
    dwItemId: u32,
    szInstanceName: ?PSTR,
};

pub const PDH_DATA_ITEM_PATH_ELEMENTS_W = extern struct {
    szMachineName: ?PWSTR,
    ObjectGUID: Guid,
    dwItemId: u32,
    szInstanceName: ?PWSTR,
};

pub const PDH_COUNTER_INFO_A = extern struct {
    dwLength: u32,
    dwType: u32,
    CVersion: u32,
    CStatus: u32,
    lScale: i32,
    lDefaultScale: i32,
    dwUserData: usize,
    dwQueryUserData: usize,
    szFullPath: ?PSTR,
    Anonymous: extern union {
        DataItemPath: PDH_DATA_ITEM_PATH_ELEMENTS_A,
        CounterPath: PDH_COUNTER_PATH_ELEMENTS_A,
        Anonymous: extern struct {
            szMachineName: ?PSTR,
            szObjectName: ?PSTR,
            szInstanceName: ?PSTR,
            szParentInstance: ?PSTR,
            dwInstanceIndex: u32,
            szCounterName: ?PSTR,
        },
    },
    szExplainText: ?PSTR,
    DataBuffer: [1]u32,
};

pub const PDH_COUNTER_INFO_W = extern struct {
    dwLength: u32,
    dwType: u32,
    CVersion: u32,
    CStatus: u32,
    lScale: i32,
    lDefaultScale: i32,
    dwUserData: usize,
    dwQueryUserData: usize,
    szFullPath: ?PWSTR,
    Anonymous: extern union {
        DataItemPath: PDH_DATA_ITEM_PATH_ELEMENTS_W,
        CounterPath: PDH_COUNTER_PATH_ELEMENTS_W,
        Anonymous: extern struct {
            szMachineName: ?PWSTR,
            szObjectName: ?PWSTR,
            szInstanceName: ?PWSTR,
            szParentInstance: ?PWSTR,
            dwInstanceIndex: u32,
            szCounterName: ?PWSTR,
        },
    },
    szExplainText: ?PWSTR,
    DataBuffer: [1]u32,
};

pub const PDH_TIME_INFO = extern struct {
    StartTime: i64,
    EndTime: i64,
    SampleCount: u32,
};

pub const PDH_RAW_LOG_RECORD = extern struct {
    dwStructureSize: u32,
    dwRecordType: PDH_LOG_TYPE,
    dwItems: u32,
    RawBytes: [1]u8,
};

pub const PDH_LOG_SERVICE_QUERY_INFO_A = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwLogQuota: u32,
    szLogFileCaption: ?PSTR,
    szDefaultDir: ?PSTR,
    szBaseFileName: ?PSTR,
    dwFileType: u32,
    dwReserved: u32,
    Anonymous: extern union {
        Anonymous1: extern struct {
            PdlAutoNameInterval: u32,
            PdlAutoNameUnits: u32,
            PdlCommandFilename: ?PSTR,
            PdlCounterList: ?PSTR,
            PdlAutoNameFormat: u32,
            PdlSampleInterval: u32,
            PdlLogStartTime: FILETIME,
            PdlLogEndTime: FILETIME,
        },
        Anonymous2: extern struct {
            TlNumberOfBuffers: u32,
            TlMinimumBuffers: u32,
            TlMaximumBuffers: u32,
            TlFreeBuffers: u32,
            TlBufferSize: u32,
            TlEventsLost: u32,
            TlLoggerThreadId: u32,
            TlBuffersWritten: u32,
            TlLogHandle: u32,
            TlLogFileName: ?PSTR,
        },
    },
};

pub const PDH_LOG_SERVICE_QUERY_INFO_W = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwLogQuota: u32,
    szLogFileCaption: ?PWSTR,
    szDefaultDir: ?PWSTR,
    szBaseFileName: ?PWSTR,
    dwFileType: u32,
    dwReserved: u32,
    Anonymous: extern union {
        Anonymous1: extern struct {
            PdlAutoNameInterval: u32,
            PdlAutoNameUnits: u32,
            PdlCommandFilename: ?PWSTR,
            PdlCounterList: ?PWSTR,
            PdlAutoNameFormat: u32,
            PdlSampleInterval: u32,
            PdlLogStartTime: FILETIME,
            PdlLogEndTime: FILETIME,
        },
        Anonymous2: extern struct {
            TlNumberOfBuffers: u32,
            TlMinimumBuffers: u32,
            TlMaximumBuffers: u32,
            TlFreeBuffers: u32,
            TlBufferSize: u32,
            TlEventsLost: u32,
            TlLoggerThreadId: u32,
            TlBuffersWritten: u32,
            TlLogHandle: u32,
            TlLogFileName: ?PWSTR,
        },
    },
};

pub const CounterPathCallBack = fn(
    param0: usize,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PDH_BROWSE_DLG_CONFIG_HW = extern struct {
    _bitfield: u32,
    hWndOwner: ?HWND,
    hDataSource: isize,
    szReturnPathBuffer: ?PWSTR,
    cchReturnPathLength: u32,
    pCallBack: ?CounterPathCallBack,
    dwCallBackArg: usize,
    CallBackStatus: i32,
    dwDefaultDetailLevel: PERF_DETAIL,
    szDialogBoxCaption: ?PWSTR,
};

pub const PDH_BROWSE_DLG_CONFIG_HA = extern struct {
    _bitfield: u32,
    hWndOwner: ?HWND,
    hDataSource: isize,
    szReturnPathBuffer: ?PSTR,
    cchReturnPathLength: u32,
    pCallBack: ?CounterPathCallBack,
    dwCallBackArg: usize,
    CallBackStatus: i32,
    dwDefaultDetailLevel: PERF_DETAIL,
    szDialogBoxCaption: ?PSTR,
};

pub const PDH_BROWSE_DLG_CONFIG_W = extern struct {
    _bitfield: u32,
    hWndOwner: ?HWND,
    szDataSource: ?PWSTR,
    szReturnPathBuffer: ?PWSTR,
    cchReturnPathLength: u32,
    pCallBack: ?CounterPathCallBack,
    dwCallBackArg: usize,
    CallBackStatus: i32,
    dwDefaultDetailLevel: PERF_DETAIL,
    szDialogBoxCaption: ?PWSTR,
};

pub const PDH_BROWSE_DLG_CONFIG_A = extern struct {
    _bitfield: u32,
    hWndOwner: ?HWND,
    szDataSource: ?PSTR,
    szReturnPathBuffer: ?PSTR,
    cchReturnPathLength: u32,
    pCallBack: ?CounterPathCallBack,
    dwCallBackArg: usize,
    CallBackStatus: i32,
    dwDefaultDetailLevel: PERF_DETAIL,
    szDialogBoxCaption: ?PSTR,
};

const CLSID_SystemMonitor_Value = @import("../zig.zig").Guid.initString("c4d2d8e0-d1dd-11ce-940f-008029004347");
pub const CLSID_SystemMonitor = &CLSID_SystemMonitor_Value;

const CLSID_CounterItem_Value = @import("../zig.zig").Guid.initString("c4d2d8e0-d1dd-11ce-940f-008029004348");
pub const CLSID_CounterItem = &CLSID_CounterItem_Value;

const CLSID_Counters_Value = @import("../zig.zig").Guid.initString("b2b066d2-2aac-11cf-942f-008029004347");
pub const CLSID_Counters = &CLSID_Counters_Value;

const CLSID_LogFileItem_Value = @import("../zig.zig").Guid.initString("16ec5be8-df93-4237-94e4-9ee918111d71");
pub const CLSID_LogFileItem = &CLSID_LogFileItem_Value;

const CLSID_LogFiles_Value = @import("../zig.zig").Guid.initString("2735d9fd-f6b9-4f19-a5d9-e2d068584bc5");
pub const CLSID_LogFiles = &CLSID_LogFiles_Value;

const CLSID_CounterItem2_Value = @import("../zig.zig").Guid.initString("43196c62-c31f-4ce3-a02e-79efe0f6a525");
pub const CLSID_CounterItem2 = &CLSID_CounterItem2_Value;

const CLSID_SystemMonitor2_Value = @import("../zig.zig").Guid.initString("7f30578c-5f38-4612-acfe-6ed04c7b7af8");
pub const CLSID_SystemMonitor2 = &CLSID_SystemMonitor2_Value;

const CLSID_AppearPropPage_Value = @import("../zig.zig").Guid.initString("e49741e9-93a8-4ab1-8e96-bf4482282e9c");
pub const CLSID_AppearPropPage = &CLSID_AppearPropPage_Value;

const CLSID_GeneralPropPage_Value = @import("../zig.zig").Guid.initString("c3e5d3d2-1a03-11cf-942d-008029004347");
pub const CLSID_GeneralPropPage = &CLSID_GeneralPropPage_Value;

const CLSID_GraphPropPage_Value = @import("../zig.zig").Guid.initString("c3e5d3d3-1a03-11cf-942d-008029004347");
pub const CLSID_GraphPropPage = &CLSID_GraphPropPage_Value;

const CLSID_SourcePropPage_Value = @import("../zig.zig").Guid.initString("0cf32aa1-7571-11d0-93c4-00aa00a3ddea");
pub const CLSID_SourcePropPage = &CLSID_SourcePropPage_Value;

const CLSID_CounterPropPage_Value = @import("../zig.zig").Guid.initString("cf948561-ede8-11ce-941e-008029004347");
pub const CLSID_CounterPropPage = &CLSID_CounterPropPage_Value;

pub const DisplayTypeConstants = enum(i32) {
    LineGraph = 1,
    Histogram = 2,
    Report = 3,
    ChartArea = 4,
    ChartStackedArea = 5,
};
pub const sysmonLineGraph = DisplayTypeConstants.LineGraph;
pub const sysmonHistogram = DisplayTypeConstants.Histogram;
pub const sysmonReport = DisplayTypeConstants.Report;
pub const sysmonChartArea = DisplayTypeConstants.ChartArea;
pub const sysmonChartStackedArea = DisplayTypeConstants.ChartStackedArea;

pub const ReportValueTypeConstants = enum(i32) {
    DefaultValue = 0,
    CurrentValue = 1,
    Average = 2,
    Minimum = 3,
    Maximum = 4,
};
pub const sysmonDefaultValue = ReportValueTypeConstants.DefaultValue;
pub const sysmonCurrentValue = ReportValueTypeConstants.CurrentValue;
pub const sysmonAverage = ReportValueTypeConstants.Average;
pub const sysmonMinimum = ReportValueTypeConstants.Minimum;
pub const sysmonMaximum = ReportValueTypeConstants.Maximum;

pub const DataSourceTypeConstants = enum(i32) {
    NullDataSource = -1,
    CurrentActivity = 1,
    LogFiles = 2,
    SqlLog = 3,
};
pub const sysmonNullDataSource = DataSourceTypeConstants.NullDataSource;
pub const sysmonCurrentActivity = DataSourceTypeConstants.CurrentActivity;
pub const sysmonLogFiles = DataSourceTypeConstants.LogFiles;
pub const sysmonSqlLog = DataSourceTypeConstants.SqlLog;

pub const SysmonFileType = enum(i32) {
    Html = 1,
    Report = 2,
    Csv = 3,
    Tsv = 4,
    Blg = 5,
    RetiredBlg = 6,
    Gif = 7,
};
pub const sysmonFileHtml = SysmonFileType.Html;
pub const sysmonFileReport = SysmonFileType.Report;
pub const sysmonFileCsv = SysmonFileType.Csv;
pub const sysmonFileTsv = SysmonFileType.Tsv;
pub const sysmonFileBlg = SysmonFileType.Blg;
pub const sysmonFileRetiredBlg = SysmonFileType.RetiredBlg;
pub const sysmonFileGif = SysmonFileType.Gif;

pub const SysmonDataType = enum(i32) {
    Avg = 1,
    Min = 2,
    Max = 3,
    Time = 4,
    Count = 5,
};
pub const sysmonDataAvg = SysmonDataType.Avg;
pub const sysmonDataMin = SysmonDataType.Min;
pub const sysmonDataMax = SysmonDataType.Max;
pub const sysmonDataTime = SysmonDataType.Time;
pub const sysmonDataCount = SysmonDataType.Count;

pub const SysmonBatchReason = enum(i32) {
    None = 0,
    AddFiles = 1,
    AddCounters = 2,
    AddFilesAutoCounters = 3,
};
pub const sysmonBatchNone = SysmonBatchReason.None;
pub const sysmonBatchAddFiles = SysmonBatchReason.AddFiles;
pub const sysmonBatchAddCounters = SysmonBatchReason.AddCounters;
pub const sysmonBatchAddFilesAutoCounters = SysmonBatchReason.AddFilesAutoCounters;

const IID_ICounterItem_Value = @import("../zig.zig").Guid.initString("771a9520-ee28-11ce-941e-008029004347");
pub const IID_ICounterItem = &IID_ICounterItem_Value;
pub const ICounterItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: fn(
            self: *const ICounterItem,
            pdblValue: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Color: fn(
            self: *const ICounterItem,
            Color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Color: fn(
            self: *const ICounterItem,
            pColor: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Width: fn(
            self: *const ICounterItem,
            iWidth: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Width: fn(
            self: *const ICounterItem,
            piValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LineStyle: fn(
            self: *const ICounterItem,
            iLineStyle: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LineStyle: fn(
            self: *const ICounterItem,
            piValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ScaleFactor: fn(
            self: *const ICounterItem,
            iScale: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ScaleFactor: fn(
            self: *const ICounterItem,
            piValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: fn(
            self: *const ICounterItem,
            pstrValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const ICounterItem,
            Value: ?*f64,
            Status: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatistics: fn(
            self: *const ICounterItem,
            Max: ?*f64,
            Min: ?*f64,
            Avg: ?*f64,
            Status: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounterItem_get_Value(self: *const T, pdblValue: ?*f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounterItem.VTable, self.vtable).get_Value(@ptrCast(*const ICounterItem, self), pdblValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounterItem_put_Color(self: *const T, Color: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounterItem.VTable, self.vtable).put_Color(@ptrCast(*const ICounterItem, self), Color);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounterItem_get_Color(self: *const T, pColor: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounterItem.VTable, self.vtable).get_Color(@ptrCast(*const ICounterItem, self), pColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounterItem_put_Width(self: *const T, iWidth: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounterItem.VTable, self.vtable).put_Width(@ptrCast(*const ICounterItem, self), iWidth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounterItem_get_Width(self: *const T, piValue: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounterItem.VTable, self.vtable).get_Width(@ptrCast(*const ICounterItem, self), piValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounterItem_put_LineStyle(self: *const T, iLineStyle: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounterItem.VTable, self.vtable).put_LineStyle(@ptrCast(*const ICounterItem, self), iLineStyle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounterItem_get_LineStyle(self: *const T, piValue: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounterItem.VTable, self.vtable).get_LineStyle(@ptrCast(*const ICounterItem, self), piValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounterItem_put_ScaleFactor(self: *const T, iScale: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounterItem.VTable, self.vtable).put_ScaleFactor(@ptrCast(*const ICounterItem, self), iScale);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounterItem_get_ScaleFactor(self: *const T, piValue: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounterItem.VTable, self.vtable).get_ScaleFactor(@ptrCast(*const ICounterItem, self), piValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounterItem_get_Path(self: *const T, pstrValue: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounterItem.VTable, self.vtable).get_Path(@ptrCast(*const ICounterItem, self), pstrValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounterItem_GetValue(self: *const T, Value: ?*f64, Status: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounterItem.VTable, self.vtable).GetValue(@ptrCast(*const ICounterItem, self), Value, Status);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounterItem_GetStatistics(self: *const T, Max: ?*f64, Min: ?*f64, Avg: ?*f64, Status: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounterItem.VTable, self.vtable).GetStatistics(@ptrCast(*const ICounterItem, self), Max, Min, Avg, Status);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICounterItem2_Value = @import("../zig.zig").Guid.initString("eefcd4e1-ea1c-4435-b7f4-e341ba03b4f9");
pub const IID_ICounterItem2 = &IID_ICounterItem2_Value;
pub const ICounterItem2 = extern struct {
    pub const VTable = extern struct {
        base: ICounterItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Selected: fn(
            self: *const ICounterItem2,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Selected: fn(
            self: *const ICounterItem2,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Visible: fn(
            self: *const ICounterItem2,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Visible: fn(
            self: *const ICounterItem2,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataAt: fn(
            self: *const ICounterItem2,
            iIndex: i32,
            iWhich: SysmonDataType,
            pVariant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICounterItem.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounterItem2_put_Selected(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounterItem2.VTable, self.vtable).put_Selected(@ptrCast(*const ICounterItem2, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounterItem2_get_Selected(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounterItem2.VTable, self.vtable).get_Selected(@ptrCast(*const ICounterItem2, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounterItem2_put_Visible(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounterItem2.VTable, self.vtable).put_Visible(@ptrCast(*const ICounterItem2, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounterItem2_get_Visible(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounterItem2.VTable, self.vtable).get_Visible(@ptrCast(*const ICounterItem2, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounterItem2_GetDataAt(self: *const T, iIndex: i32, iWhich: SysmonDataType, pVariant: ?*VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounterItem2.VTable, self.vtable).GetDataAt(@ptrCast(*const ICounterItem2, self), iIndex, iWhich, pVariant);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID__ICounterItemUnion_Value = @import("../zig.zig").Guid.initString("de1a6b74-9182-4c41-8e2c-24c2cd30ee83");
pub const IID__ICounterItemUnion = &IID__ICounterItemUnion_Value;
pub const _ICounterItemUnion = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: fn(
            self: *const _ICounterItemUnion,
            pdblValue: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Color: fn(
            self: *const _ICounterItemUnion,
            Color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Color: fn(
            self: *const _ICounterItemUnion,
            pColor: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Width: fn(
            self: *const _ICounterItemUnion,
            iWidth: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Width: fn(
            self: *const _ICounterItemUnion,
            piValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LineStyle: fn(
            self: *const _ICounterItemUnion,
            iLineStyle: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LineStyle: fn(
            self: *const _ICounterItemUnion,
            piValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ScaleFactor: fn(
            self: *const _ICounterItemUnion,
            iScale: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ScaleFactor: fn(
            self: *const _ICounterItemUnion,
            piValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: fn(
            self: *const _ICounterItemUnion,
            pstrValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const _ICounterItemUnion,
            Value: ?*f64,
            Status: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatistics: fn(
            self: *const _ICounterItemUnion,
            Max: ?*f64,
            Min: ?*f64,
            Avg: ?*f64,
            Status: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Selected: fn(
            self: *const _ICounterItemUnion,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Selected: fn(
            self: *const _ICounterItemUnion,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Visible: fn(
            self: *const _ICounterItemUnion,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Visible: fn(
            self: *const _ICounterItemUnion,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataAt: fn(
            self: *const _ICounterItemUnion,
            iIndex: i32,
            iWhich: SysmonDataType,
            pVariant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ICounterItemUnion_get_Value(self: *const T, pdblValue: ?*f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ICounterItemUnion.VTable, self.vtable).get_Value(@ptrCast(*const _ICounterItemUnion, self), pdblValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ICounterItemUnion_put_Color(self: *const T, Color: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ICounterItemUnion.VTable, self.vtable).put_Color(@ptrCast(*const _ICounterItemUnion, self), Color);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ICounterItemUnion_get_Color(self: *const T, pColor: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ICounterItemUnion.VTable, self.vtable).get_Color(@ptrCast(*const _ICounterItemUnion, self), pColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ICounterItemUnion_put_Width(self: *const T, iWidth: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ICounterItemUnion.VTable, self.vtable).put_Width(@ptrCast(*const _ICounterItemUnion, self), iWidth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ICounterItemUnion_get_Width(self: *const T, piValue: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ICounterItemUnion.VTable, self.vtable).get_Width(@ptrCast(*const _ICounterItemUnion, self), piValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ICounterItemUnion_put_LineStyle(self: *const T, iLineStyle: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ICounterItemUnion.VTable, self.vtable).put_LineStyle(@ptrCast(*const _ICounterItemUnion, self), iLineStyle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ICounterItemUnion_get_LineStyle(self: *const T, piValue: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ICounterItemUnion.VTable, self.vtable).get_LineStyle(@ptrCast(*const _ICounterItemUnion, self), piValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ICounterItemUnion_put_ScaleFactor(self: *const T, iScale: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ICounterItemUnion.VTable, self.vtable).put_ScaleFactor(@ptrCast(*const _ICounterItemUnion, self), iScale);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ICounterItemUnion_get_ScaleFactor(self: *const T, piValue: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ICounterItemUnion.VTable, self.vtable).get_ScaleFactor(@ptrCast(*const _ICounterItemUnion, self), piValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ICounterItemUnion_get_Path(self: *const T, pstrValue: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ICounterItemUnion.VTable, self.vtable).get_Path(@ptrCast(*const _ICounterItemUnion, self), pstrValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ICounterItemUnion_GetValue(self: *const T, Value: ?*f64, Status: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ICounterItemUnion.VTable, self.vtable).GetValue(@ptrCast(*const _ICounterItemUnion, self), Value, Status);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ICounterItemUnion_GetStatistics(self: *const T, Max: ?*f64, Min: ?*f64, Avg: ?*f64, Status: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ICounterItemUnion.VTable, self.vtable).GetStatistics(@ptrCast(*const _ICounterItemUnion, self), Max, Min, Avg, Status);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ICounterItemUnion_put_Selected(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ICounterItemUnion.VTable, self.vtable).put_Selected(@ptrCast(*const _ICounterItemUnion, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ICounterItemUnion_get_Selected(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ICounterItemUnion.VTable, self.vtable).get_Selected(@ptrCast(*const _ICounterItemUnion, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ICounterItemUnion_put_Visible(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ICounterItemUnion.VTable, self.vtable).put_Visible(@ptrCast(*const _ICounterItemUnion, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ICounterItemUnion_get_Visible(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ICounterItemUnion.VTable, self.vtable).get_Visible(@ptrCast(*const _ICounterItemUnion, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ICounterItemUnion_GetDataAt(self: *const T, iIndex: i32, iWhich: SysmonDataType, pVariant: ?*VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ICounterItemUnion.VTable, self.vtable).GetDataAt(@ptrCast(*const _ICounterItemUnion, self), iIndex, iWhich, pVariant);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_DICounterItem_Value = @import("../zig.zig").Guid.initString("c08c4ff2-0e2e-11cf-942c-008029004347");
pub const IID_DICounterItem = &IID_DICounterItem_Value;
pub const DICounterItem = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICounters_Value = @import("../zig.zig").Guid.initString("79167962-28fc-11cf-942f-008029004347");
pub const IID_ICounters = &IID_ICounters_Value;
pub const ICounters = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: fn(
            self: *const ICounters,
            pLong: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: fn(
            self: *const ICounters,
            ppIunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: fn(
            self: *const ICounters,
            index: VARIANT,
            ppI: ?*?*DICounterItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ICounters,
            pathname: ?BSTR,
            ppI: ?*?*DICounterItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ICounters,
            index: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounters_get_Count(self: *const T, pLong: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounters.VTable, self.vtable).get_Count(@ptrCast(*const ICounters, self), pLong);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounters_get__NewEnum(self: *const T, ppIunk: ?*?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounters.VTable, self.vtable).get__NewEnum(@ptrCast(*const ICounters, self), ppIunk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounters_get_Item(self: *const T, index: VARIANT, ppI: ?*?*DICounterItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounters.VTable, self.vtable).get_Item(@ptrCast(*const ICounters, self), index, ppI);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounters_Add(self: *const T, pathname: ?BSTR, ppI: ?*?*DICounterItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounters.VTable, self.vtable).Add(@ptrCast(*const ICounters, self), pathname, ppI);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICounters_Remove(self: *const T, index: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICounters.VTable, self.vtable).Remove(@ptrCast(*const ICounters, self), index);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILogFileItem_Value = @import("../zig.zig").Guid.initString("d6b518dd-05c7-418a-89e6-4f9ce8c6841e");
pub const IID_ILogFileItem = &IID_ILogFileItem_Value;
pub const ILogFileItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: fn(
            self: *const ILogFileItem,
            pstrValue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILogFileItem_get_Path(self: *const T, pstrValue: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILogFileItem.VTable, self.vtable).get_Path(@ptrCast(*const ILogFileItem, self), pstrValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_DILogFileItem_Value = @import("../zig.zig").Guid.initString("8d093ffc-f777-4917-82d1-833fbc54c58f");
pub const IID_DILogFileItem = &IID_DILogFileItem_Value;
pub const DILogFileItem = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILogFiles_Value = @import("../zig.zig").Guid.initString("6a2a97e6-6851-41ea-87ad-2a8225335865");
pub const IID_ILogFiles = &IID_ILogFiles_Value;
pub const ILogFiles = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: fn(
            self: *const ILogFiles,
            pLong: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: fn(
            self: *const ILogFiles,
            ppIunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: fn(
            self: *const ILogFiles,
            index: VARIANT,
            ppI: ?*?*DILogFileItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ILogFiles,
            pathname: ?BSTR,
            ppI: ?*?*DILogFileItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ILogFiles,
            index: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILogFiles_get_Count(self: *const T, pLong: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILogFiles.VTable, self.vtable).get_Count(@ptrCast(*const ILogFiles, self), pLong);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILogFiles_get__NewEnum(self: *const T, ppIunk: ?*?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILogFiles.VTable, self.vtable).get__NewEnum(@ptrCast(*const ILogFiles, self), ppIunk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILogFiles_get_Item(self: *const T, index: VARIANT, ppI: ?*?*DILogFileItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILogFiles.VTable, self.vtable).get_Item(@ptrCast(*const ILogFiles, self), index, ppI);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILogFiles_Add(self: *const T, pathname: ?BSTR, ppI: ?*?*DILogFileItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILogFiles.VTable, self.vtable).Add(@ptrCast(*const ILogFiles, self), pathname, ppI);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILogFiles_Remove(self: *const T, index: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILogFiles.VTable, self.vtable).Remove(@ptrCast(*const ILogFiles, self), index);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISystemMonitor_Value = @import("../zig.zig").Guid.initString("194eb241-c32c-11cf-9398-00aa00a3ddea");
pub const IID_ISystemMonitor = &IID_ISystemMonitor_Value;
pub const ISystemMonitor = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Appearance: fn(
            self: *const ISystemMonitor,
            iAppearance: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Appearance: fn(
            self: *const ISystemMonitor,
            iAppearance: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackColor: fn(
            self: *const ISystemMonitor,
            pColor: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BackColor: fn(
            self: *const ISystemMonitor,
            Color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BorderStyle: fn(
            self: *const ISystemMonitor,
            iBorderStyle: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BorderStyle: fn(
            self: *const ISystemMonitor,
            iBorderStyle: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ForeColor: fn(
            self: *const ISystemMonitor,
            pColor: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ForeColor: fn(
            self: *const ISystemMonitor,
            Color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Font: fn(
            self: *const ISystemMonitor,
            ppFont: ?*?*IFontDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Font: fn(
            self: *const ISystemMonitor,
            pFont: ?*IFontDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Counters: fn(
            self: *const ISystemMonitor,
            ppICounters: ?*?*ICounters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowVerticalGrid: fn(
            self: *const ISystemMonitor,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowVerticalGrid: fn(
            self: *const ISystemMonitor,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowHorizontalGrid: fn(
            self: *const ISystemMonitor,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowHorizontalGrid: fn(
            self: *const ISystemMonitor,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowLegend: fn(
            self: *const ISystemMonitor,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowLegend: fn(
            self: *const ISystemMonitor,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowScaleLabels: fn(
            self: *const ISystemMonitor,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowScaleLabels: fn(
            self: *const ISystemMonitor,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowValueBar: fn(
            self: *const ISystemMonitor,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowValueBar: fn(
            self: *const ISystemMonitor,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaximumScale: fn(
            self: *const ISystemMonitor,
            iValue: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaximumScale: fn(
            self: *const ISystemMonitor,
            piValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MinimumScale: fn(
            self: *const ISystemMonitor,
            iValue: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinimumScale: fn(
            self: *const ISystemMonitor,
            piValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UpdateInterval: fn(
            self: *const ISystemMonitor,
            fValue: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UpdateInterval: fn(
            self: *const ISystemMonitor,
            pfValue: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayType: fn(
            self: *const ISystemMonitor,
            eDisplayType: DisplayTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayType: fn(
            self: *const ISystemMonitor,
            peDisplayType: ?*DisplayTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ManualUpdate: fn(
            self: *const ISystemMonitor,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ManualUpdate: fn(
            self: *const ISystemMonitor,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GraphTitle: fn(
            self: *const ISystemMonitor,
            bsTitle: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GraphTitle: fn(
            self: *const ISystemMonitor,
            pbsTitle: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_YAxisLabel: fn(
            self: *const ISystemMonitor,
            bsTitle: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_YAxisLabel: fn(
            self: *const ISystemMonitor,
            pbsTitle: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CollectSample: fn(
            self: *const ISystemMonitor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateGraph: fn(
            self: *const ISystemMonitor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrowseCounters: fn(
            self: *const ISystemMonitor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisplayProperties: fn(
            self: *const ISystemMonitor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Counter: fn(
            self: *const ISystemMonitor,
            iIndex: i32,
            ppICounter: ?*?*ICounterItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCounter: fn(
            self: *const ISystemMonitor,
            bsPath: ?BSTR,
            ppICounter: ?*?*ICounterItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteCounter: fn(
            self: *const ISystemMonitor,
            pCtr: ?*ICounterItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackColorCtl: fn(
            self: *const ISystemMonitor,
            pColor: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BackColorCtl: fn(
            self: *const ISystemMonitor,
            Color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogFileName: fn(
            self: *const ISystemMonitor,
            bsFileName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogFileName: fn(
            self: *const ISystemMonitor,
            bsFileName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogViewStart: fn(
            self: *const ISystemMonitor,
            StartTime: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogViewStart: fn(
            self: *const ISystemMonitor,
            StartTime: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogViewStop: fn(
            self: *const ISystemMonitor,
            StopTime: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogViewStop: fn(
            self: *const ISystemMonitor,
            StopTime: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GridColor: fn(
            self: *const ISystemMonitor,
            pColor: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GridColor: fn(
            self: *const ISystemMonitor,
            Color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TimeBarColor: fn(
            self: *const ISystemMonitor,
            pColor: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TimeBarColor: fn(
            self: *const ISystemMonitor,
            Color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Highlight: fn(
            self: *const ISystemMonitor,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Highlight: fn(
            self: *const ISystemMonitor,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowToolbar: fn(
            self: *const ISystemMonitor,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowToolbar: fn(
            self: *const ISystemMonitor,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Paste: fn(
            self: *const ISystemMonitor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Copy: fn(
            self: *const ISystemMonitor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const ISystemMonitor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReadOnly: fn(
            self: *const ISystemMonitor,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReadOnly: fn(
            self: *const ISystemMonitor,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReportValueType: fn(
            self: *const ISystemMonitor,
            eReportValueType: ReportValueTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReportValueType: fn(
            self: *const ISystemMonitor,
            peReportValueType: ?*ReportValueTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MonitorDuplicateInstances: fn(
            self: *const ISystemMonitor,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MonitorDuplicateInstances: fn(
            self: *const ISystemMonitor,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayFilter: fn(
            self: *const ISystemMonitor,
            iValue: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayFilter: fn(
            self: *const ISystemMonitor,
            piValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogFiles: fn(
            self: *const ISystemMonitor,
            ppILogFiles: ?*?*ILogFiles,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DataSourceType: fn(
            self: *const ISystemMonitor,
            eDataSourceType: DataSourceTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataSourceType: fn(
            self: *const ISystemMonitor,
            peDataSourceType: ?*DataSourceTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SqlDsnName: fn(
            self: *const ISystemMonitor,
            bsSqlDsnName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SqlDsnName: fn(
            self: *const ISystemMonitor,
            bsSqlDsnName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SqlLogSetName: fn(
            self: *const ISystemMonitor,
            bsSqlLogSetName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SqlLogSetName: fn(
            self: *const ISystemMonitor,
            bsSqlLogSetName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_Appearance(self: *const T, iAppearance: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_Appearance(@ptrCast(*const ISystemMonitor, self), iAppearance);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_Appearance(self: *const T, iAppearance: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_Appearance(@ptrCast(*const ISystemMonitor, self), iAppearance);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_BackColor(self: *const T, pColor: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_BackColor(@ptrCast(*const ISystemMonitor, self), pColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_BackColor(self: *const T, Color: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_BackColor(@ptrCast(*const ISystemMonitor, self), Color);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_BorderStyle(self: *const T, iBorderStyle: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_BorderStyle(@ptrCast(*const ISystemMonitor, self), iBorderStyle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_BorderStyle(self: *const T, iBorderStyle: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_BorderStyle(@ptrCast(*const ISystemMonitor, self), iBorderStyle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_ForeColor(self: *const T, pColor: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_ForeColor(@ptrCast(*const ISystemMonitor, self), pColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_ForeColor(self: *const T, Color: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_ForeColor(@ptrCast(*const ISystemMonitor, self), Color);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_Font(self: *const T, ppFont: ?*?*IFontDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_Font(@ptrCast(*const ISystemMonitor, self), ppFont);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_putref_Font(self: *const T, pFont: ?*IFontDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).putref_Font(@ptrCast(*const ISystemMonitor, self), pFont);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_Counters(self: *const T, ppICounters: ?*?*ICounters) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_Counters(@ptrCast(*const ISystemMonitor, self), ppICounters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_ShowVerticalGrid(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_ShowVerticalGrid(@ptrCast(*const ISystemMonitor, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_ShowVerticalGrid(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_ShowVerticalGrid(@ptrCast(*const ISystemMonitor, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_ShowHorizontalGrid(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_ShowHorizontalGrid(@ptrCast(*const ISystemMonitor, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_ShowHorizontalGrid(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_ShowHorizontalGrid(@ptrCast(*const ISystemMonitor, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_ShowLegend(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_ShowLegend(@ptrCast(*const ISystemMonitor, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_ShowLegend(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_ShowLegend(@ptrCast(*const ISystemMonitor, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_ShowScaleLabels(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_ShowScaleLabels(@ptrCast(*const ISystemMonitor, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_ShowScaleLabels(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_ShowScaleLabels(@ptrCast(*const ISystemMonitor, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_ShowValueBar(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_ShowValueBar(@ptrCast(*const ISystemMonitor, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_ShowValueBar(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_ShowValueBar(@ptrCast(*const ISystemMonitor, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_MaximumScale(self: *const T, iValue: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_MaximumScale(@ptrCast(*const ISystemMonitor, self), iValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_MaximumScale(self: *const T, piValue: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_MaximumScale(@ptrCast(*const ISystemMonitor, self), piValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_MinimumScale(self: *const T, iValue: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_MinimumScale(@ptrCast(*const ISystemMonitor, self), iValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_MinimumScale(self: *const T, piValue: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_MinimumScale(@ptrCast(*const ISystemMonitor, self), piValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_UpdateInterval(self: *const T, fValue: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_UpdateInterval(@ptrCast(*const ISystemMonitor, self), fValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_UpdateInterval(self: *const T, pfValue: ?*f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_UpdateInterval(@ptrCast(*const ISystemMonitor, self), pfValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_DisplayType(self: *const T, eDisplayType: DisplayTypeConstants) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_DisplayType(@ptrCast(*const ISystemMonitor, self), eDisplayType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_DisplayType(self: *const T, peDisplayType: ?*DisplayTypeConstants) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_DisplayType(@ptrCast(*const ISystemMonitor, self), peDisplayType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_ManualUpdate(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_ManualUpdate(@ptrCast(*const ISystemMonitor, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_ManualUpdate(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_ManualUpdate(@ptrCast(*const ISystemMonitor, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_GraphTitle(self: *const T, bsTitle: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_GraphTitle(@ptrCast(*const ISystemMonitor, self), bsTitle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_GraphTitle(self: *const T, pbsTitle: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_GraphTitle(@ptrCast(*const ISystemMonitor, self), pbsTitle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_YAxisLabel(self: *const T, bsTitle: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_YAxisLabel(@ptrCast(*const ISystemMonitor, self), bsTitle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_YAxisLabel(self: *const T, pbsTitle: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_YAxisLabel(@ptrCast(*const ISystemMonitor, self), pbsTitle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_CollectSample(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).CollectSample(@ptrCast(*const ISystemMonitor, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_UpdateGraph(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).UpdateGraph(@ptrCast(*const ISystemMonitor, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_BrowseCounters(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).BrowseCounters(@ptrCast(*const ISystemMonitor, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_DisplayProperties(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).DisplayProperties(@ptrCast(*const ISystemMonitor, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_Counter(self: *const T, iIndex: i32, ppICounter: ?*?*ICounterItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).Counter(@ptrCast(*const ISystemMonitor, self), iIndex, ppICounter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_AddCounter(self: *const T, bsPath: ?BSTR, ppICounter: ?*?*ICounterItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).AddCounter(@ptrCast(*const ISystemMonitor, self), bsPath, ppICounter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_DeleteCounter(self: *const T, pCtr: ?*ICounterItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).DeleteCounter(@ptrCast(*const ISystemMonitor, self), pCtr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_BackColorCtl(self: *const T, pColor: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_BackColorCtl(@ptrCast(*const ISystemMonitor, self), pColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_BackColorCtl(self: *const T, Color: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_BackColorCtl(@ptrCast(*const ISystemMonitor, self), Color);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_LogFileName(self: *const T, bsFileName: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_LogFileName(@ptrCast(*const ISystemMonitor, self), bsFileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_LogFileName(self: *const T, bsFileName: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_LogFileName(@ptrCast(*const ISystemMonitor, self), bsFileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_LogViewStart(self: *const T, StartTime: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_LogViewStart(@ptrCast(*const ISystemMonitor, self), StartTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_LogViewStart(self: *const T, StartTime: ?*f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_LogViewStart(@ptrCast(*const ISystemMonitor, self), StartTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_LogViewStop(self: *const T, StopTime: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_LogViewStop(@ptrCast(*const ISystemMonitor, self), StopTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_LogViewStop(self: *const T, StopTime: ?*f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_LogViewStop(@ptrCast(*const ISystemMonitor, self), StopTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_GridColor(self: *const T, pColor: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_GridColor(@ptrCast(*const ISystemMonitor, self), pColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_GridColor(self: *const T, Color: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_GridColor(@ptrCast(*const ISystemMonitor, self), Color);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_TimeBarColor(self: *const T, pColor: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_TimeBarColor(@ptrCast(*const ISystemMonitor, self), pColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_TimeBarColor(self: *const T, Color: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_TimeBarColor(@ptrCast(*const ISystemMonitor, self), Color);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_Highlight(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_Highlight(@ptrCast(*const ISystemMonitor, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_Highlight(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_Highlight(@ptrCast(*const ISystemMonitor, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_ShowToolbar(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_ShowToolbar(@ptrCast(*const ISystemMonitor, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_ShowToolbar(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_ShowToolbar(@ptrCast(*const ISystemMonitor, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_Paste(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).Paste(@ptrCast(*const ISystemMonitor, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_Copy(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).Copy(@ptrCast(*const ISystemMonitor, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).Reset(@ptrCast(*const ISystemMonitor, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_ReadOnly(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_ReadOnly(@ptrCast(*const ISystemMonitor, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_ReadOnly(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_ReadOnly(@ptrCast(*const ISystemMonitor, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_ReportValueType(self: *const T, eReportValueType: ReportValueTypeConstants) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_ReportValueType(@ptrCast(*const ISystemMonitor, self), eReportValueType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_ReportValueType(self: *const T, peReportValueType: ?*ReportValueTypeConstants) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_ReportValueType(@ptrCast(*const ISystemMonitor, self), peReportValueType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_MonitorDuplicateInstances(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_MonitorDuplicateInstances(@ptrCast(*const ISystemMonitor, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_MonitorDuplicateInstances(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_MonitorDuplicateInstances(@ptrCast(*const ISystemMonitor, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_DisplayFilter(self: *const T, iValue: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_DisplayFilter(@ptrCast(*const ISystemMonitor, self), iValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_DisplayFilter(self: *const T, piValue: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_DisplayFilter(@ptrCast(*const ISystemMonitor, self), piValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_LogFiles(self: *const T, ppILogFiles: ?*?*ILogFiles) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_LogFiles(@ptrCast(*const ISystemMonitor, self), ppILogFiles);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_DataSourceType(self: *const T, eDataSourceType: DataSourceTypeConstants) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_DataSourceType(@ptrCast(*const ISystemMonitor, self), eDataSourceType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_DataSourceType(self: *const T, peDataSourceType: ?*DataSourceTypeConstants) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_DataSourceType(@ptrCast(*const ISystemMonitor, self), peDataSourceType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_SqlDsnName(self: *const T, bsSqlDsnName: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_SqlDsnName(@ptrCast(*const ISystemMonitor, self), bsSqlDsnName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_SqlDsnName(self: *const T, bsSqlDsnName: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_SqlDsnName(@ptrCast(*const ISystemMonitor, self), bsSqlDsnName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_put_SqlLogSetName(self: *const T, bsSqlLogSetName: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).put_SqlLogSetName(@ptrCast(*const ISystemMonitor, self), bsSqlLogSetName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor_get_SqlLogSetName(self: *const T, bsSqlLogSetName: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor.VTable, self.vtable).get_SqlLogSetName(@ptrCast(*const ISystemMonitor, self), bsSqlLogSetName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISystemMonitor2_Value = @import("../zig.zig").Guid.initString("08e3206a-5fd2-4fde-a8a5-8cb3b63d2677");
pub const IID_ISystemMonitor2 = &IID_ISystemMonitor2_Value;
pub const ISystemMonitor2 = extern struct {
    pub const VTable = extern struct {
        base: ISystemMonitor.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnableDigitGrouping: fn(
            self: *const ISystemMonitor2,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnableDigitGrouping: fn(
            self: *const ISystemMonitor2,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnableToolTips: fn(
            self: *const ISystemMonitor2,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnableToolTips: fn(
            self: *const ISystemMonitor2,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowTimeAxisLabels: fn(
            self: *const ISystemMonitor2,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowTimeAxisLabels: fn(
            self: *const ISystemMonitor2,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ChartScroll: fn(
            self: *const ISystemMonitor2,
            bScroll: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ChartScroll: fn(
            self: *const ISystemMonitor2,
            pbScroll: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DataPointCount: fn(
            self: *const ISystemMonitor2,
            iNewCount: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataPointCount: fn(
            self: *const ISystemMonitor2,
            piDataPointCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScaleToFit: fn(
            self: *const ISystemMonitor2,
            bSelectedCountersOnly: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveAs: fn(
            self: *const ISystemMonitor2,
            bstrFileName: ?BSTR,
            eSysmonFileType: SysmonFileType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Relog: fn(
            self: *const ISystemMonitor2,
            bstrFileName: ?BSTR,
            eSysmonFileType: SysmonFileType,
            iFilter: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearData: fn(
            self: *const ISystemMonitor2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogSourceStartTime: fn(
            self: *const ISystemMonitor2,
            pDate: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogSourceStopTime: fn(
            self: *const ISystemMonitor2,
            pDate: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLogViewRange: fn(
            self: *const ISystemMonitor2,
            StartTime: f64,
            StopTime: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLogViewRange: fn(
            self: *const ISystemMonitor2,
            StartTime: ?*f64,
            StopTime: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BatchingLock: fn(
            self: *const ISystemMonitor2,
            fLock: i16,
            eBatchReason: SysmonBatchReason,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadSettings: fn(
            self: *const ISystemMonitor2,
            bstrSettingFileName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISystemMonitor.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_put_EnableDigitGrouping(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).put_EnableDigitGrouping(@ptrCast(*const ISystemMonitor2, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_get_EnableDigitGrouping(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).get_EnableDigitGrouping(@ptrCast(*const ISystemMonitor2, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_put_EnableToolTips(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).put_EnableToolTips(@ptrCast(*const ISystemMonitor2, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_get_EnableToolTips(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).get_EnableToolTips(@ptrCast(*const ISystemMonitor2, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_put_ShowTimeAxisLabels(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).put_ShowTimeAxisLabels(@ptrCast(*const ISystemMonitor2, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_get_ShowTimeAxisLabels(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).get_ShowTimeAxisLabels(@ptrCast(*const ISystemMonitor2, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_put_ChartScroll(self: *const T, bScroll: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).put_ChartScroll(@ptrCast(*const ISystemMonitor2, self), bScroll);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_get_ChartScroll(self: *const T, pbScroll: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).get_ChartScroll(@ptrCast(*const ISystemMonitor2, self), pbScroll);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_put_DataPointCount(self: *const T, iNewCount: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).put_DataPointCount(@ptrCast(*const ISystemMonitor2, self), iNewCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_get_DataPointCount(self: *const T, piDataPointCount: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).get_DataPointCount(@ptrCast(*const ISystemMonitor2, self), piDataPointCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_ScaleToFit(self: *const T, bSelectedCountersOnly: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).ScaleToFit(@ptrCast(*const ISystemMonitor2, self), bSelectedCountersOnly);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_SaveAs(self: *const T, bstrFileName: ?BSTR, eSysmonFileType: SysmonFileType) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).SaveAs(@ptrCast(*const ISystemMonitor2, self), bstrFileName, eSysmonFileType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_Relog(self: *const T, bstrFileName: ?BSTR, eSysmonFileType: SysmonFileType, iFilter: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).Relog(@ptrCast(*const ISystemMonitor2, self), bstrFileName, eSysmonFileType, iFilter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_ClearData(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).ClearData(@ptrCast(*const ISystemMonitor2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_get_LogSourceStartTime(self: *const T, pDate: ?*f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).get_LogSourceStartTime(@ptrCast(*const ISystemMonitor2, self), pDate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_get_LogSourceStopTime(self: *const T, pDate: ?*f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).get_LogSourceStopTime(@ptrCast(*const ISystemMonitor2, self), pDate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_SetLogViewRange(self: *const T, StartTime: f64, StopTime: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).SetLogViewRange(@ptrCast(*const ISystemMonitor2, self), StartTime, StopTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_GetLogViewRange(self: *const T, StartTime: ?*f64, StopTime: ?*f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).GetLogViewRange(@ptrCast(*const ISystemMonitor2, self), StartTime, StopTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_BatchingLock(self: *const T, fLock: i16, eBatchReason: SysmonBatchReason) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).BatchingLock(@ptrCast(*const ISystemMonitor2, self), fLock, eBatchReason);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitor2_LoadSettings(self: *const T, bstrSettingFileName: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemMonitor2.VTable, self.vtable).LoadSettings(@ptrCast(*const ISystemMonitor2, self), bstrSettingFileName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID__ISystemMonitorUnion_Value = @import("../zig.zig").Guid.initString("c8a77338-265f-4de5-aa25-c7da1ce5a8f4");
pub const IID__ISystemMonitorUnion = &IID__ISystemMonitorUnion_Value;
pub const _ISystemMonitorUnion = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Appearance: fn(
            self: *const _ISystemMonitorUnion,
            iAppearance: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Appearance: fn(
            self: *const _ISystemMonitorUnion,
            iAppearance: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackColor: fn(
            self: *const _ISystemMonitorUnion,
            pColor: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BackColor: fn(
            self: *const _ISystemMonitorUnion,
            Color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BorderStyle: fn(
            self: *const _ISystemMonitorUnion,
            iBorderStyle: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BorderStyle: fn(
            self: *const _ISystemMonitorUnion,
            iBorderStyle: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ForeColor: fn(
            self: *const _ISystemMonitorUnion,
            pColor: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ForeColor: fn(
            self: *const _ISystemMonitorUnion,
            Color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Font: fn(
            self: *const _ISystemMonitorUnion,
            ppFont: ?*?*IFontDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Font: fn(
            self: *const _ISystemMonitorUnion,
            pFont: ?*IFontDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Counters: fn(
            self: *const _ISystemMonitorUnion,
            ppICounters: ?*?*ICounters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowVerticalGrid: fn(
            self: *const _ISystemMonitorUnion,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowVerticalGrid: fn(
            self: *const _ISystemMonitorUnion,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowHorizontalGrid: fn(
            self: *const _ISystemMonitorUnion,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowHorizontalGrid: fn(
            self: *const _ISystemMonitorUnion,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowLegend: fn(
            self: *const _ISystemMonitorUnion,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowLegend: fn(
            self: *const _ISystemMonitorUnion,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowScaleLabels: fn(
            self: *const _ISystemMonitorUnion,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowScaleLabels: fn(
            self: *const _ISystemMonitorUnion,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowValueBar: fn(
            self: *const _ISystemMonitorUnion,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowValueBar: fn(
            self: *const _ISystemMonitorUnion,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaximumScale: fn(
            self: *const _ISystemMonitorUnion,
            iValue: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaximumScale: fn(
            self: *const _ISystemMonitorUnion,
            piValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MinimumScale: fn(
            self: *const _ISystemMonitorUnion,
            iValue: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinimumScale: fn(
            self: *const _ISystemMonitorUnion,
            piValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UpdateInterval: fn(
            self: *const _ISystemMonitorUnion,
            fValue: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UpdateInterval: fn(
            self: *const _ISystemMonitorUnion,
            pfValue: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayType: fn(
            self: *const _ISystemMonitorUnion,
            eDisplayType: DisplayTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayType: fn(
            self: *const _ISystemMonitorUnion,
            peDisplayType: ?*DisplayTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ManualUpdate: fn(
            self: *const _ISystemMonitorUnion,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ManualUpdate: fn(
            self: *const _ISystemMonitorUnion,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GraphTitle: fn(
            self: *const _ISystemMonitorUnion,
            bsTitle: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GraphTitle: fn(
            self: *const _ISystemMonitorUnion,
            pbsTitle: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_YAxisLabel: fn(
            self: *const _ISystemMonitorUnion,
            bsTitle: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_YAxisLabel: fn(
            self: *const _ISystemMonitorUnion,
            pbsTitle: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CollectSample: fn(
            self: *const _ISystemMonitorUnion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateGraph: fn(
            self: *const _ISystemMonitorUnion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrowseCounters: fn(
            self: *const _ISystemMonitorUnion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisplayProperties: fn(
            self: *const _ISystemMonitorUnion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Counter: fn(
            self: *const _ISystemMonitorUnion,
            iIndex: i32,
            ppICounter: ?*?*ICounterItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCounter: fn(
            self: *const _ISystemMonitorUnion,
            bsPath: ?BSTR,
            ppICounter: ?*?*ICounterItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteCounter: fn(
            self: *const _ISystemMonitorUnion,
            pCtr: ?*ICounterItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackColorCtl: fn(
            self: *const _ISystemMonitorUnion,
            pColor: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BackColorCtl: fn(
            self: *const _ISystemMonitorUnion,
            Color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogFileName: fn(
            self: *const _ISystemMonitorUnion,
            bsFileName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogFileName: fn(
            self: *const _ISystemMonitorUnion,
            bsFileName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogViewStart: fn(
            self: *const _ISystemMonitorUnion,
            StartTime: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogViewStart: fn(
            self: *const _ISystemMonitorUnion,
            StartTime: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogViewStop: fn(
            self: *const _ISystemMonitorUnion,
            StopTime: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogViewStop: fn(
            self: *const _ISystemMonitorUnion,
            StopTime: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GridColor: fn(
            self: *const _ISystemMonitorUnion,
            pColor: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GridColor: fn(
            self: *const _ISystemMonitorUnion,
            Color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TimeBarColor: fn(
            self: *const _ISystemMonitorUnion,
            pColor: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TimeBarColor: fn(
            self: *const _ISystemMonitorUnion,
            Color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Highlight: fn(
            self: *const _ISystemMonitorUnion,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Highlight: fn(
            self: *const _ISystemMonitorUnion,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowToolbar: fn(
            self: *const _ISystemMonitorUnion,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowToolbar: fn(
            self: *const _ISystemMonitorUnion,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Paste: fn(
            self: *const _ISystemMonitorUnion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Copy: fn(
            self: *const _ISystemMonitorUnion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const _ISystemMonitorUnion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReadOnly: fn(
            self: *const _ISystemMonitorUnion,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReadOnly: fn(
            self: *const _ISystemMonitorUnion,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReportValueType: fn(
            self: *const _ISystemMonitorUnion,
            eReportValueType: ReportValueTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReportValueType: fn(
            self: *const _ISystemMonitorUnion,
            peReportValueType: ?*ReportValueTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MonitorDuplicateInstances: fn(
            self: *const _ISystemMonitorUnion,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MonitorDuplicateInstances: fn(
            self: *const _ISystemMonitorUnion,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayFilter: fn(
            self: *const _ISystemMonitorUnion,
            iValue: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayFilter: fn(
            self: *const _ISystemMonitorUnion,
            piValue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogFiles: fn(
            self: *const _ISystemMonitorUnion,
            ppILogFiles: ?*?*ILogFiles,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DataSourceType: fn(
            self: *const _ISystemMonitorUnion,
            eDataSourceType: DataSourceTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataSourceType: fn(
            self: *const _ISystemMonitorUnion,
            peDataSourceType: ?*DataSourceTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SqlDsnName: fn(
            self: *const _ISystemMonitorUnion,
            bsSqlDsnName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SqlDsnName: fn(
            self: *const _ISystemMonitorUnion,
            bsSqlDsnName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SqlLogSetName: fn(
            self: *const _ISystemMonitorUnion,
            bsSqlLogSetName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SqlLogSetName: fn(
            self: *const _ISystemMonitorUnion,
            bsSqlLogSetName: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnableDigitGrouping: fn(
            self: *const _ISystemMonitorUnion,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnableDigitGrouping: fn(
            self: *const _ISystemMonitorUnion,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnableToolTips: fn(
            self: *const _ISystemMonitorUnion,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnableToolTips: fn(
            self: *const _ISystemMonitorUnion,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowTimeAxisLabels: fn(
            self: *const _ISystemMonitorUnion,
            bState: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowTimeAxisLabels: fn(
            self: *const _ISystemMonitorUnion,
            pbState: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ChartScroll: fn(
            self: *const _ISystemMonitorUnion,
            bScroll: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ChartScroll: fn(
            self: *const _ISystemMonitorUnion,
            pbScroll: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DataPointCount: fn(
            self: *const _ISystemMonitorUnion,
            iNewCount: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataPointCount: fn(
            self: *const _ISystemMonitorUnion,
            piDataPointCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScaleToFit: fn(
            self: *const _ISystemMonitorUnion,
            bSelectedCountersOnly: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveAs: fn(
            self: *const _ISystemMonitorUnion,
            bstrFileName: ?BSTR,
            eSysmonFileType: SysmonFileType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Relog: fn(
            self: *const _ISystemMonitorUnion,
            bstrFileName: ?BSTR,
            eSysmonFileType: SysmonFileType,
            iFilter: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearData: fn(
            self: *const _ISystemMonitorUnion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogSourceStartTime: fn(
            self: *const _ISystemMonitorUnion,
            pDate: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogSourceStopTime: fn(
            self: *const _ISystemMonitorUnion,
            pDate: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLogViewRange: fn(
            self: *const _ISystemMonitorUnion,
            StartTime: f64,
            StopTime: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLogViewRange: fn(
            self: *const _ISystemMonitorUnion,
            StartTime: ?*f64,
            StopTime: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BatchingLock: fn(
            self: *const _ISystemMonitorUnion,
            fLock: i16,
            eBatchReason: SysmonBatchReason,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadSettings: fn(
            self: *const _ISystemMonitorUnion,
            bstrSettingFileName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_Appearance(self: *const T, iAppearance: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_Appearance(@ptrCast(*const _ISystemMonitorUnion, self), iAppearance);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_Appearance(self: *const T, iAppearance: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_Appearance(@ptrCast(*const _ISystemMonitorUnion, self), iAppearance);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_BackColor(self: *const T, pColor: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_BackColor(@ptrCast(*const _ISystemMonitorUnion, self), pColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_BackColor(self: *const T, Color: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_BackColor(@ptrCast(*const _ISystemMonitorUnion, self), Color);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_BorderStyle(self: *const T, iBorderStyle: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_BorderStyle(@ptrCast(*const _ISystemMonitorUnion, self), iBorderStyle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_BorderStyle(self: *const T, iBorderStyle: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_BorderStyle(@ptrCast(*const _ISystemMonitorUnion, self), iBorderStyle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_ForeColor(self: *const T, pColor: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_ForeColor(@ptrCast(*const _ISystemMonitorUnion, self), pColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_ForeColor(self: *const T, Color: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_ForeColor(@ptrCast(*const _ISystemMonitorUnion, self), Color);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_Font(self: *const T, ppFont: ?*?*IFontDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_Font(@ptrCast(*const _ISystemMonitorUnion, self), ppFont);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_putref_Font(self: *const T, pFont: ?*IFontDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).putref_Font(@ptrCast(*const _ISystemMonitorUnion, self), pFont);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_Counters(self: *const T, ppICounters: ?*?*ICounters) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_Counters(@ptrCast(*const _ISystemMonitorUnion, self), ppICounters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_ShowVerticalGrid(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_ShowVerticalGrid(@ptrCast(*const _ISystemMonitorUnion, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_ShowVerticalGrid(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_ShowVerticalGrid(@ptrCast(*const _ISystemMonitorUnion, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_ShowHorizontalGrid(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_ShowHorizontalGrid(@ptrCast(*const _ISystemMonitorUnion, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_ShowHorizontalGrid(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_ShowHorizontalGrid(@ptrCast(*const _ISystemMonitorUnion, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_ShowLegend(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_ShowLegend(@ptrCast(*const _ISystemMonitorUnion, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_ShowLegend(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_ShowLegend(@ptrCast(*const _ISystemMonitorUnion, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_ShowScaleLabels(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_ShowScaleLabels(@ptrCast(*const _ISystemMonitorUnion, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_ShowScaleLabels(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_ShowScaleLabels(@ptrCast(*const _ISystemMonitorUnion, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_ShowValueBar(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_ShowValueBar(@ptrCast(*const _ISystemMonitorUnion, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_ShowValueBar(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_ShowValueBar(@ptrCast(*const _ISystemMonitorUnion, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_MaximumScale(self: *const T, iValue: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_MaximumScale(@ptrCast(*const _ISystemMonitorUnion, self), iValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_MaximumScale(self: *const T, piValue: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_MaximumScale(@ptrCast(*const _ISystemMonitorUnion, self), piValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_MinimumScale(self: *const T, iValue: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_MinimumScale(@ptrCast(*const _ISystemMonitorUnion, self), iValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_MinimumScale(self: *const T, piValue: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_MinimumScale(@ptrCast(*const _ISystemMonitorUnion, self), piValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_UpdateInterval(self: *const T, fValue: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_UpdateInterval(@ptrCast(*const _ISystemMonitorUnion, self), fValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_UpdateInterval(self: *const T, pfValue: ?*f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_UpdateInterval(@ptrCast(*const _ISystemMonitorUnion, self), pfValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_DisplayType(self: *const T, eDisplayType: DisplayTypeConstants) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_DisplayType(@ptrCast(*const _ISystemMonitorUnion, self), eDisplayType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_DisplayType(self: *const T, peDisplayType: ?*DisplayTypeConstants) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_DisplayType(@ptrCast(*const _ISystemMonitorUnion, self), peDisplayType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_ManualUpdate(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_ManualUpdate(@ptrCast(*const _ISystemMonitorUnion, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_ManualUpdate(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_ManualUpdate(@ptrCast(*const _ISystemMonitorUnion, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_GraphTitle(self: *const T, bsTitle: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_GraphTitle(@ptrCast(*const _ISystemMonitorUnion, self), bsTitle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_GraphTitle(self: *const T, pbsTitle: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_GraphTitle(@ptrCast(*const _ISystemMonitorUnion, self), pbsTitle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_YAxisLabel(self: *const T, bsTitle: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_YAxisLabel(@ptrCast(*const _ISystemMonitorUnion, self), bsTitle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_YAxisLabel(self: *const T, pbsTitle: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_YAxisLabel(@ptrCast(*const _ISystemMonitorUnion, self), pbsTitle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_CollectSample(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).CollectSample(@ptrCast(*const _ISystemMonitorUnion, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_UpdateGraph(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).UpdateGraph(@ptrCast(*const _ISystemMonitorUnion, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_BrowseCounters(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).BrowseCounters(@ptrCast(*const _ISystemMonitorUnion, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_DisplayProperties(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).DisplayProperties(@ptrCast(*const _ISystemMonitorUnion, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_Counter(self: *const T, iIndex: i32, ppICounter: ?*?*ICounterItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).Counter(@ptrCast(*const _ISystemMonitorUnion, self), iIndex, ppICounter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_AddCounter(self: *const T, bsPath: ?BSTR, ppICounter: ?*?*ICounterItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).AddCounter(@ptrCast(*const _ISystemMonitorUnion, self), bsPath, ppICounter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_DeleteCounter(self: *const T, pCtr: ?*ICounterItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).DeleteCounter(@ptrCast(*const _ISystemMonitorUnion, self), pCtr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_BackColorCtl(self: *const T, pColor: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_BackColorCtl(@ptrCast(*const _ISystemMonitorUnion, self), pColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_BackColorCtl(self: *const T, Color: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_BackColorCtl(@ptrCast(*const _ISystemMonitorUnion, self), Color);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_LogFileName(self: *const T, bsFileName: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_LogFileName(@ptrCast(*const _ISystemMonitorUnion, self), bsFileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_LogFileName(self: *const T, bsFileName: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_LogFileName(@ptrCast(*const _ISystemMonitorUnion, self), bsFileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_LogViewStart(self: *const T, StartTime: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_LogViewStart(@ptrCast(*const _ISystemMonitorUnion, self), StartTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_LogViewStart(self: *const T, StartTime: ?*f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_LogViewStart(@ptrCast(*const _ISystemMonitorUnion, self), StartTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_LogViewStop(self: *const T, StopTime: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_LogViewStop(@ptrCast(*const _ISystemMonitorUnion, self), StopTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_LogViewStop(self: *const T, StopTime: ?*f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_LogViewStop(@ptrCast(*const _ISystemMonitorUnion, self), StopTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_GridColor(self: *const T, pColor: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_GridColor(@ptrCast(*const _ISystemMonitorUnion, self), pColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_GridColor(self: *const T, Color: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_GridColor(@ptrCast(*const _ISystemMonitorUnion, self), Color);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_TimeBarColor(self: *const T, pColor: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_TimeBarColor(@ptrCast(*const _ISystemMonitorUnion, self), pColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_TimeBarColor(self: *const T, Color: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_TimeBarColor(@ptrCast(*const _ISystemMonitorUnion, self), Color);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_Highlight(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_Highlight(@ptrCast(*const _ISystemMonitorUnion, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_Highlight(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_Highlight(@ptrCast(*const _ISystemMonitorUnion, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_ShowToolbar(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_ShowToolbar(@ptrCast(*const _ISystemMonitorUnion, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_ShowToolbar(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_ShowToolbar(@ptrCast(*const _ISystemMonitorUnion, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_Paste(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).Paste(@ptrCast(*const _ISystemMonitorUnion, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_Copy(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).Copy(@ptrCast(*const _ISystemMonitorUnion, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).Reset(@ptrCast(*const _ISystemMonitorUnion, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_ReadOnly(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_ReadOnly(@ptrCast(*const _ISystemMonitorUnion, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_ReadOnly(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_ReadOnly(@ptrCast(*const _ISystemMonitorUnion, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_ReportValueType(self: *const T, eReportValueType: ReportValueTypeConstants) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_ReportValueType(@ptrCast(*const _ISystemMonitorUnion, self), eReportValueType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_ReportValueType(self: *const T, peReportValueType: ?*ReportValueTypeConstants) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_ReportValueType(@ptrCast(*const _ISystemMonitorUnion, self), peReportValueType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_MonitorDuplicateInstances(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_MonitorDuplicateInstances(@ptrCast(*const _ISystemMonitorUnion, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_MonitorDuplicateInstances(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_MonitorDuplicateInstances(@ptrCast(*const _ISystemMonitorUnion, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_DisplayFilter(self: *const T, iValue: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_DisplayFilter(@ptrCast(*const _ISystemMonitorUnion, self), iValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_DisplayFilter(self: *const T, piValue: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_DisplayFilter(@ptrCast(*const _ISystemMonitorUnion, self), piValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_LogFiles(self: *const T, ppILogFiles: ?*?*ILogFiles) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_LogFiles(@ptrCast(*const _ISystemMonitorUnion, self), ppILogFiles);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_DataSourceType(self: *const T, eDataSourceType: DataSourceTypeConstants) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_DataSourceType(@ptrCast(*const _ISystemMonitorUnion, self), eDataSourceType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_DataSourceType(self: *const T, peDataSourceType: ?*DataSourceTypeConstants) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_DataSourceType(@ptrCast(*const _ISystemMonitorUnion, self), peDataSourceType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_SqlDsnName(self: *const T, bsSqlDsnName: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_SqlDsnName(@ptrCast(*const _ISystemMonitorUnion, self), bsSqlDsnName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_SqlDsnName(self: *const T, bsSqlDsnName: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_SqlDsnName(@ptrCast(*const _ISystemMonitorUnion, self), bsSqlDsnName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_SqlLogSetName(self: *const T, bsSqlLogSetName: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_SqlLogSetName(@ptrCast(*const _ISystemMonitorUnion, self), bsSqlLogSetName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_SqlLogSetName(self: *const T, bsSqlLogSetName: ?*?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_SqlLogSetName(@ptrCast(*const _ISystemMonitorUnion, self), bsSqlLogSetName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_EnableDigitGrouping(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_EnableDigitGrouping(@ptrCast(*const _ISystemMonitorUnion, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_EnableDigitGrouping(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_EnableDigitGrouping(@ptrCast(*const _ISystemMonitorUnion, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_EnableToolTips(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_EnableToolTips(@ptrCast(*const _ISystemMonitorUnion, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_EnableToolTips(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_EnableToolTips(@ptrCast(*const _ISystemMonitorUnion, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_ShowTimeAxisLabels(self: *const T, bState: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_ShowTimeAxisLabels(@ptrCast(*const _ISystemMonitorUnion, self), bState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_ShowTimeAxisLabels(self: *const T, pbState: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_ShowTimeAxisLabels(@ptrCast(*const _ISystemMonitorUnion, self), pbState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_ChartScroll(self: *const T, bScroll: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_ChartScroll(@ptrCast(*const _ISystemMonitorUnion, self), bScroll);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_ChartScroll(self: *const T, pbScroll: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_ChartScroll(@ptrCast(*const _ISystemMonitorUnion, self), pbScroll);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_put_DataPointCount(self: *const T, iNewCount: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).put_DataPointCount(@ptrCast(*const _ISystemMonitorUnion, self), iNewCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_DataPointCount(self: *const T, piDataPointCount: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_DataPointCount(@ptrCast(*const _ISystemMonitorUnion, self), piDataPointCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_ScaleToFit(self: *const T, bSelectedCountersOnly: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).ScaleToFit(@ptrCast(*const _ISystemMonitorUnion, self), bSelectedCountersOnly);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_SaveAs(self: *const T, bstrFileName: ?BSTR, eSysmonFileType: SysmonFileType) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).SaveAs(@ptrCast(*const _ISystemMonitorUnion, self), bstrFileName, eSysmonFileType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_Relog(self: *const T, bstrFileName: ?BSTR, eSysmonFileType: SysmonFileType, iFilter: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).Relog(@ptrCast(*const _ISystemMonitorUnion, self), bstrFileName, eSysmonFileType, iFilter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_ClearData(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).ClearData(@ptrCast(*const _ISystemMonitorUnion, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_LogSourceStartTime(self: *const T, pDate: ?*f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_LogSourceStartTime(@ptrCast(*const _ISystemMonitorUnion, self), pDate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_get_LogSourceStopTime(self: *const T, pDate: ?*f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).get_LogSourceStopTime(@ptrCast(*const _ISystemMonitorUnion, self), pDate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_SetLogViewRange(self: *const T, StartTime: f64, StopTime: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).SetLogViewRange(@ptrCast(*const _ISystemMonitorUnion, self), StartTime, StopTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_GetLogViewRange(self: *const T, StartTime: ?*f64, StopTime: ?*f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).GetLogViewRange(@ptrCast(*const _ISystemMonitorUnion, self), StartTime, StopTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_BatchingLock(self: *const T, fLock: i16, eBatchReason: SysmonBatchReason) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).BatchingLock(@ptrCast(*const _ISystemMonitorUnion, self), fLock, eBatchReason);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn _ISystemMonitorUnion_LoadSettings(self: *const T, bstrSettingFileName: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const _ISystemMonitorUnion.VTable, self.vtable).LoadSettings(@ptrCast(*const _ISystemMonitorUnion, self), bstrSettingFileName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_DISystemMonitor_Value = @import("../zig.zig").Guid.initString("13d73d81-c32e-11cf-9398-00aa00a3ddea");
pub const IID_DISystemMonitor = &IID_DISystemMonitor_Value;
pub const DISystemMonitor = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_DISystemMonitorInternal_Value = @import("../zig.zig").Guid.initString("194eb242-c32c-11cf-9398-00aa00a3ddea");
pub const IID_DISystemMonitorInternal = &IID_DISystemMonitorInternal_Value;
pub const DISystemMonitorInternal = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISystemMonitorEvents_Value = @import("../zig.zig").Guid.initString("ee660ea0-4abd-11cf-943a-008029004347");
pub const IID_ISystemMonitorEvents = &IID_ISystemMonitorEvents_Value;
pub const ISystemMonitorEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnCounterSelected: fn(
            self: *const ISystemMonitorEvents,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnCounterAdded: fn(
            self: *const ISystemMonitorEvents,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnCounterDeleted: fn(
            self: *const ISystemMonitorEvents,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnSampleCollected: fn(
            self: *const ISystemMonitorEvents,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnDblClick: fn(
            self: *const ISystemMonitorEvents,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitorEvents_OnCounterSelected(self: *const T, Index: i32) callconv(.Inline) void {
            return @ptrCast(*const ISystemMonitorEvents.VTable, self.vtable).OnCounterSelected(@ptrCast(*const ISystemMonitorEvents, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitorEvents_OnCounterAdded(self: *const T, Index: i32) callconv(.Inline) void {
            return @ptrCast(*const ISystemMonitorEvents.VTable, self.vtable).OnCounterAdded(@ptrCast(*const ISystemMonitorEvents, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitorEvents_OnCounterDeleted(self: *const T, Index: i32) callconv(.Inline) void {
            return @ptrCast(*const ISystemMonitorEvents.VTable, self.vtable).OnCounterDeleted(@ptrCast(*const ISystemMonitorEvents, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitorEvents_OnSampleCollected(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const ISystemMonitorEvents.VTable, self.vtable).OnSampleCollected(@ptrCast(*const ISystemMonitorEvents, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemMonitorEvents_OnDblClick(self: *const T, Index: i32) callconv(.Inline) void {
            return @ptrCast(*const ISystemMonitorEvents.VTable, self.vtable).OnDblClick(@ptrCast(*const ISystemMonitorEvents, self), Index);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_DISystemMonitorEvents_Value = @import("../zig.zig").Guid.initString("84979930-4ab3-11cf-943a-008029004347");
pub const IID_DISystemMonitorEvents = &IID_DISystemMonitorEvents_Value;
pub const DISystemMonitorEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};



pub const PERF_OBJECT_TYPE = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        TotalByteLength: u32,
        DefinitionLength: u32,
        HeaderLength: u32,
        ObjectNameTitleIndex: u32,
        ObjectNameTitle: u32,
        ObjectHelpTitleIndex: u32,
        ObjectHelpTitle: u32,
        DetailLevel: u32,
        NumCounters: u32,
        DefaultCounter: i32,
        NumInstances: i32,
        CodePage: u32,
        PerfTime: LARGE_INTEGER,
        PerfFreq: LARGE_INTEGER,
    },
    .X86 => extern struct {
        TotalByteLength: u32,
        DefinitionLength: u32,
        HeaderLength: u32,
        ObjectNameTitleIndex: u32,
        ObjectNameTitle: ?PWSTR,
        ObjectHelpTitleIndex: u32,
        ObjectHelpTitle: ?PWSTR,
        DetailLevel: u32,
        NumCounters: u32,
        DefaultCounter: i32,
        NumInstances: i32,
        CodePage: u32,
        PerfTime: LARGE_INTEGER,
        PerfFreq: LARGE_INTEGER,
    },
};
pub const PERF_COUNTER_DEFINITION = switch(@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        ByteLength: u32,
        CounterNameTitleIndex: u32,
        CounterNameTitle: u32,
        CounterHelpTitleIndex: u32,
        CounterHelpTitle: u32,
        DefaultScale: i32,
        DetailLevel: u32,
        CounterType: u32,
        CounterSize: u32,
        CounterOffset: u32,
    },
    .X86 => extern struct {
        ByteLength: u32,
        CounterNameTitleIndex: u32,
        CounterNameTitle: ?PWSTR,
        CounterHelpTitleIndex: u32,
        CounterHelpTitle: ?PWSTR,
        DefaultScale: i32,
        DetailLevel: u32,
        CounterType: u32,
        CounterSize: u32,
        CounterOffset: u32,
    },
};

//--------------------------------------------------------------------------------
// Section: Functions (135)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "KERNEL32" fn QueryPerformanceCounter(
    lpPerformanceCount: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "KERNEL32" fn QueryPerformanceFrequency(
    lpFrequency: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "loadperf" fn InstallPerfDllW(
    szComputerName: ?[*:0]const u16,
    lpIniFile: ?[*:0]const u16,
    dwFlags: usize,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn InstallPerfDllA(
    szComputerName: ?[*:0]const u8,
    lpIniFile: ?[*:0]const u8,
    dwFlags: usize,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "loadperf" fn LoadPerfCounterTextStringsA(
    lpCommandLine: ?PSTR,
    bQuietModeArg: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "loadperf" fn LoadPerfCounterTextStringsW(
    lpCommandLine: ?PWSTR,
    bQuietModeArg: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "loadperf" fn UnloadPerfCounterTextStringsW(
    lpCommandLine: ?PWSTR,
    bQuietModeArg: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "loadperf" fn UnloadPerfCounterTextStringsA(
    lpCommandLine: ?PSTR,
    bQuietModeArg: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn UpdatePerfNameFilesA(
    szNewCtrFilePath: ?[*:0]const u8,
    szNewHlpFilePath: ?[*:0]const u8,
    szLanguageID: ?PSTR,
    dwFlags: usize,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn UpdatePerfNameFilesW(
    szNewCtrFilePath: ?[*:0]const u16,
    szNewHlpFilePath: ?[*:0]const u16,
    szLanguageID: ?PWSTR,
    dwFlags: usize,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn SetServiceAsTrustedA(
    szReserved: ?[*:0]const u8,
    szServiceName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn SetServiceAsTrustedW(
    szReserved: ?[*:0]const u16,
    szServiceName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn BackupPerfRegistryToFileW(
    szFileName: ?[*:0]const u16,
    szCommentString: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn RestorePerfRegistryFromFileW(
    szFileName: ?[*:0]const u16,
    szLangId: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfStartProvider(
    ProviderGuid: ?*Guid,
    ControlCallback: ?PERFLIBREQUEST,
    phProvider: ?*PerfProviderHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfStartProviderEx(
    ProviderGuid: ?*Guid,
    ProviderContext: ?*PERF_PROVIDER_CONTEXT,
    Provider: ?*PerfProviderHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfStopProvider(
    ProviderHandle: PerfProviderHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfSetCounterSetInfo(
    ProviderHandle: ?HANDLE,
    // TODO: what to do with BytesParamIndex 2?
    Template: ?*PERF_COUNTERSET_INFO,
    TemplateSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfCreateInstance(
    ProviderHandle: PerfProviderHandle,
    CounterSetGuid: ?*const Guid,
    Name: ?[*:0]const u16,
    Id: u32,
) callconv(@import("std").os.windows.WINAPI) ?*PERF_COUNTERSET_INSTANCE;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfDeleteInstance(
    Provider: PerfProviderHandle,
    InstanceBlock: ?*PERF_COUNTERSET_INSTANCE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfQueryInstance(
    ProviderHandle: ?HANDLE,
    CounterSetGuid: ?*const Guid,
    Name: ?[*:0]const u16,
    Id: u32,
) callconv(@import("std").os.windows.WINAPI) ?*PERF_COUNTERSET_INSTANCE;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfSetCounterRefValue(
    Provider: ?HANDLE,
    Instance: ?*PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Address: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfSetULongCounterValue(
    Provider: ?HANDLE,
    Instance: ?*PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Value: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfSetULongLongCounterValue(
    Provider: ?HANDLE,
    Instance: ?*PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Value: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfIncrementULongCounterValue(
    Provider: ?HANDLE,
    Instance: ?*PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Value: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfIncrementULongLongCounterValue(
    Provider: ?HANDLE,
    Instance: ?*PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Value: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfDecrementULongCounterValue(
    Provider: ?HANDLE,
    Instance: ?*PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Value: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ADVAPI32" fn PerfDecrementULongLongCounterValue(
    Provider: ?HANDLE,
    Instance: ?*PERF_COUNTERSET_INSTANCE,
    CounterId: u32,
    Value: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "ADVAPI32" fn PerfEnumerateCounterSet(
    szMachine: ?[*:0]const u16,
    pCounterSetIds: ?[*]Guid,
    cCounterSetIds: u32,
    pcCounterSetIdsActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "ADVAPI32" fn PerfEnumerateCounterSetInstances(
    szMachine: ?[*:0]const u16,
    pCounterSetId: ?*const Guid,
    // TODO: what to do with BytesParamIndex 3?
    pInstances: ?*PERF_INSTANCE_HEADER,
    cbInstances: u32,
    pcbInstancesActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "ADVAPI32" fn PerfQueryCounterSetRegistrationInfo(
    szMachine: ?[*:0]const u16,
    pCounterSetId: ?*const Guid,
    requestCode: PerfRegInfoType,
    requestLangId: u32,
    // TODO: what to do with BytesParamIndex 5?
    pbRegInfo: ?*u8,
    cbRegInfo: u32,
    pcbRegInfoActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "ADVAPI32" fn PerfOpenQueryHandle(
    szMachine: ?[*:0]const u16,
    phQuery: ?*PerfQueryHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "ADVAPI32" fn PerfCloseQueryHandle(
    hQuery: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "ADVAPI32" fn PerfQueryCounterInfo(
    hQuery: PerfQueryHandle,
    // TODO: what to do with BytesParamIndex 2?
    pCounters: ?*PERF_COUNTER_IDENTIFIER,
    cbCounters: u32,
    pcbCountersActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "ADVAPI32" fn PerfQueryCounterData(
    hQuery: PerfQueryHandle,
    // TODO: what to do with BytesParamIndex 2?
    pCounterBlock: ?*PERF_DATA_HEADER,
    cbCounterBlock: u32,
    pcbCounterBlockActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "ADVAPI32" fn PerfAddCounters(
    hQuery: PerfQueryHandle,
    // TODO: what to do with BytesParamIndex 2?
    pCounters: ?*PERF_COUNTER_IDENTIFIER,
    cbCounters: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "ADVAPI32" fn PerfDeleteCounters(
    hQuery: PerfQueryHandle,
    // TODO: what to do with BytesParamIndex 2?
    pCounters: ?*PERF_COUNTER_IDENTIFIER,
    cbCounters: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDllVersion(
    lpdwVersion: ?*PDH_DLL_VERSION,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhOpenQueryW(
    szDataSource: ?[*:0]const u16,
    dwUserData: usize,
    phQuery: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhOpenQueryA(
    szDataSource: ?[*:0]const u8,
    dwUserData: usize,
    phQuery: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhAddCounterW(
    hQuery: isize,
    szFullCounterPath: ?[*:0]const u16,
    dwUserData: usize,
    phCounter: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhAddCounterA(
    hQuery: isize,
    szFullCounterPath: ?[*:0]const u8,
    dwUserData: usize,
    phCounter: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "pdh" fn PdhAddEnglishCounterW(
    hQuery: isize,
    szFullCounterPath: ?[*:0]const u16,
    dwUserData: usize,
    phCounter: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "pdh" fn PdhAddEnglishCounterA(
    hQuery: isize,
    szFullCounterPath: ?[*:0]const u8,
    dwUserData: usize,
    phCounter: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "pdh" fn PdhCollectQueryDataWithTime(
    hQuery: isize,
    pllTimeStamp: ?*i64,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "pdh" fn PdhValidatePathExW(
    hDataSource: isize,
    szFullPathBuffer: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "pdh" fn PdhValidatePathExA(
    hDataSource: isize,
    szFullPathBuffer: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhRemoveCounter(
    hCounter: isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhCollectQueryData(
    hQuery: isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhCloseQuery(
    hQuery: isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetFormattedCounterValue(
    hCounter: isize,
    dwFormat: PDH_FMT,
    lpdwType: ?*u32,
    pValue: ?*PDH_FMT_COUNTERVALUE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetFormattedCounterArrayA(
    hCounter: isize,
    dwFormat: PDH_FMT,
    lpdwBufferSize: ?*u32,
    lpdwItemCount: ?*u32,
    ItemBuffer: ?*PDH_FMT_COUNTERVALUE_ITEM_A,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetFormattedCounterArrayW(
    hCounter: isize,
    dwFormat: PDH_FMT,
    lpdwBufferSize: ?*u32,
    lpdwItemCount: ?*u32,
    ItemBuffer: ?*PDH_FMT_COUNTERVALUE_ITEM_W,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetRawCounterValue(
    hCounter: isize,
    lpdwType: ?*u32,
    pValue: ?*PDH_RAW_COUNTER,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetRawCounterArrayA(
    hCounter: isize,
    lpdwBufferSize: ?*u32,
    lpdwItemCount: ?*u32,
    ItemBuffer: ?*PDH_RAW_COUNTER_ITEM_A,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetRawCounterArrayW(
    hCounter: isize,
    lpdwBufferSize: ?*u32,
    lpdwItemCount: ?*u32,
    ItemBuffer: ?*PDH_RAW_COUNTER_ITEM_W,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhCalculateCounterFromRawValue(
    hCounter: isize,
    dwFormat: PDH_FMT,
    rawValue1: ?*PDH_RAW_COUNTER,
    rawValue2: ?*PDH_RAW_COUNTER,
    fmtValue: ?*PDH_FMT_COUNTERVALUE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhComputeCounterStatistics(
    hCounter: isize,
    dwFormat: PDH_FMT,
    dwFirstEntry: u32,
    dwNumEntries: u32,
    lpRawValueArray: ?*PDH_RAW_COUNTER,
    data: ?*PDH_STATISTICS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetCounterInfoW(
    hCounter: isize,
    bRetrieveExplainText: BOOLEAN,
    pdwBufferSize: ?*u32,
    lpBuffer: ?*PDH_COUNTER_INFO_W,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetCounterInfoA(
    hCounter: isize,
    bRetrieveExplainText: BOOLEAN,
    pdwBufferSize: ?*u32,
    lpBuffer: ?*PDH_COUNTER_INFO_A,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhSetCounterScaleFactor(
    hCounter: isize,
    lFactor: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhConnectMachineW(
    szMachineName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhConnectMachineA(
    szMachineName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumMachinesW(
    szDataSource: ?[*:0]const u16,
    mszMachineList: ?[*]u16,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumMachinesA(
    szDataSource: ?[*:0]const u8,
    mszMachineList: ?[*]u8,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectsW(
    szDataSource: ?[*:0]const u16,
    szMachineName: ?[*:0]const u16,
    mszObjectList: ?[*]u16,
    pcchBufferSize: ?*u32,
    dwDetailLevel: PERF_DETAIL,
    bRefresh: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectsA(
    szDataSource: ?[*:0]const u8,
    szMachineName: ?[*:0]const u8,
    mszObjectList: ?[*]u8,
    pcchBufferSize: ?*u32,
    dwDetailLevel: PERF_DETAIL,
    bRefresh: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectItemsW(
    szDataSource: ?[*:0]const u16,
    szMachineName: ?[*:0]const u16,
    szObjectName: ?[*:0]const u16,
    mszCounterList: ?[*]u16,
    pcchCounterListLength: ?*u32,
    mszInstanceList: ?[*]u16,
    pcchInstanceListLength: ?*u32,
    dwDetailLevel: PERF_DETAIL,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectItemsA(
    szDataSource: ?[*:0]const u8,
    szMachineName: ?[*:0]const u8,
    szObjectName: ?[*:0]const u8,
    mszCounterList: ?[*]u8,
    pcchCounterListLength: ?*u32,
    mszInstanceList: ?[*]u8,
    pcchInstanceListLength: ?*u32,
    dwDetailLevel: PERF_DETAIL,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhMakeCounterPathW(
    pCounterPathElements: ?*PDH_COUNTER_PATH_ELEMENTS_W,
    szFullPathBuffer: ?PWSTR,
    pcchBufferSize: ?*u32,
    dwFlags: PDH_PATH_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhMakeCounterPathA(
    pCounterPathElements: ?*PDH_COUNTER_PATH_ELEMENTS_A,
    szFullPathBuffer: ?PSTR,
    pcchBufferSize: ?*u32,
    dwFlags: PDH_PATH_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhParseCounterPathW(
    szFullPathBuffer: ?[*:0]const u16,
    pCounterPathElements: ?*PDH_COUNTER_PATH_ELEMENTS_W,
    pdwBufferSize: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhParseCounterPathA(
    szFullPathBuffer: ?[*:0]const u8,
    pCounterPathElements: ?*PDH_COUNTER_PATH_ELEMENTS_A,
    pdwBufferSize: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhParseInstanceNameW(
    szInstanceString: ?[*:0]const u16,
    szInstanceName: ?PWSTR,
    pcchInstanceNameLength: ?*u32,
    szParentName: ?PWSTR,
    pcchParentNameLength: ?*u32,
    lpIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhParseInstanceNameA(
    szInstanceString: ?[*:0]const u8,
    szInstanceName: ?PSTR,
    pcchInstanceNameLength: ?*u32,
    szParentName: ?PSTR,
    pcchParentNameLength: ?*u32,
    lpIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhValidatePathW(
    szFullPathBuffer: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhValidatePathA(
    szFullPathBuffer: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfObjectW(
    szDataSource: ?[*:0]const u16,
    szMachineName: ?[*:0]const u16,
    szDefaultObjectName: ?PWSTR,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfObjectA(
    szDataSource: ?[*:0]const u8,
    szMachineName: ?[*:0]const u8,
    szDefaultObjectName: ?PSTR,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfCounterW(
    szDataSource: ?[*:0]const u16,
    szMachineName: ?[*:0]const u16,
    szObjectName: ?[*:0]const u16,
    szDefaultCounterName: ?PWSTR,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfCounterA(
    szDataSource: ?[*:0]const u8,
    szMachineName: ?[*:0]const u8,
    szObjectName: ?[*:0]const u8,
    szDefaultCounterName: ?PSTR,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhBrowseCountersW(
    pBrowseDlgData: ?*PDH_BROWSE_DLG_CONFIG_W,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhBrowseCountersA(
    pBrowseDlgData: ?*PDH_BROWSE_DLG_CONFIG_A,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhExpandCounterPathW(
    szWildCardPath: ?[*:0]const u16,
    mszExpandedPathList: ?[*]u16,
    pcchPathListLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhExpandCounterPathA(
    szWildCardPath: ?[*:0]const u8,
    mszExpandedPathList: ?[*]u8,
    pcchPathListLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhLookupPerfNameByIndexW(
    szMachineName: ?[*:0]const u16,
    dwNameIndex: u32,
    szNameBuffer: ?PWSTR,
    pcchNameBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhLookupPerfNameByIndexA(
    szMachineName: ?[*:0]const u8,
    dwNameIndex: u32,
    szNameBuffer: ?PSTR,
    pcchNameBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhLookupPerfIndexByNameW(
    szMachineName: ?[*:0]const u16,
    szNameBuffer: ?[*:0]const u16,
    pdwIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhLookupPerfIndexByNameA(
    szMachineName: ?[*:0]const u8,
    szNameBuffer: ?[*:0]const u8,
    pdwIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhExpandWildCardPathA(
    szDataSource: ?[*:0]const u8,
    szWildCardPath: ?[*:0]const u8,
    mszExpandedPathList: ?[*]u8,
    pcchPathListLength: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhExpandWildCardPathW(
    szDataSource: ?[*:0]const u16,
    szWildCardPath: ?[*:0]const u16,
    mszExpandedPathList: ?[*]u16,
    pcchPathListLength: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhOpenLogW(
    szLogFileName: ?[*:0]const u16,
    dwAccessFlags: PDH_LOG,
    lpdwLogType: ?*PDH_LOG_TYPE,
    hQuery: isize,
    dwMaxSize: u32,
    szUserCaption: ?[*:0]const u16,
    phLog: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhOpenLogA(
    szLogFileName: ?[*:0]const u8,
    dwAccessFlags: PDH_LOG,
    lpdwLogType: ?*PDH_LOG_TYPE,
    hQuery: isize,
    dwMaxSize: u32,
    szUserCaption: ?[*:0]const u8,
    phLog: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhUpdateLogW(
    hLog: isize,
    szUserString: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhUpdateLogA(
    hLog: isize,
    szUserString: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhUpdateLogFileCatalog(
    hLog: isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetLogFileSize(
    hLog: isize,
    llSize: ?*i64,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhCloseLog(
    hLog: isize,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhSelectDataSourceW(
    hWndOwner: ?HWND,
    dwFlags: PDH_SELECT_DATA_SOURCE_FLAGS,
    szDataSource: ?PWSTR,
    pcchBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhSelectDataSourceA(
    hWndOwner: ?HWND,
    dwFlags: PDH_SELECT_DATA_SOURCE_FLAGS,
    szDataSource: ?PSTR,
    pcchBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhIsRealTimeQuery(
    hQuery: isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhSetQueryTimeRange(
    hQuery: isize,
    pInfo: ?*PDH_TIME_INFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDataSourceTimeRangeW(
    szDataSource: ?[*:0]const u16,
    pdwNumEntries: ?*u32,
    pInfo: ?*PDH_TIME_INFO,
    pdwBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDataSourceTimeRangeA(
    szDataSource: ?[*:0]const u8,
    pdwNumEntries: ?*u32,
    pInfo: ?*PDH_TIME_INFO,
    pdwBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhCollectQueryDataEx(
    hQuery: isize,
    dwIntervalTime: u32,
    hNewDataEvent: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhFormatFromRawValue(
    dwCounterType: u32,
    dwFormat: PDH_FMT,
    pTimeBase: ?*i64,
    pRawValue1: ?*PDH_RAW_COUNTER,
    pRawValue2: ?*PDH_RAW_COUNTER,
    pFmtValue: ?*PDH_FMT_COUNTERVALUE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetCounterTimeBase(
    hCounter: isize,
    pTimeBase: ?*i64,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhReadRawLogRecord(
    hLog: isize,
    ftRecord: FILETIME,
    pRawLogRecord: ?*PDH_RAW_LOG_RECORD,
    pdwBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhSetDefaultRealTimeDataSource(
    dwDataSourceId: REAL_TIME_DATA_SOURCE_ID_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhBindInputDataSourceW(
    phDataSource: ?*isize,
    LogFileNameList: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhBindInputDataSourceA(
    phDataSource: ?*isize,
    LogFileNameList: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhOpenQueryH(
    hDataSource: isize,
    dwUserData: usize,
    phQuery: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumMachinesHW(
    hDataSource: isize,
    mszMachineList: ?[*]u16,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumMachinesHA(
    hDataSource: isize,
    mszMachineList: ?[*]u8,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectsHW(
    hDataSource: isize,
    szMachineName: ?[*:0]const u16,
    mszObjectList: ?[*]u16,
    pcchBufferSize: ?*u32,
    dwDetailLevel: PERF_DETAIL,
    bRefresh: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectsHA(
    hDataSource: isize,
    szMachineName: ?[*:0]const u8,
    mszObjectList: ?[*]u8,
    pcchBufferSize: ?*u32,
    dwDetailLevel: PERF_DETAIL,
    bRefresh: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectItemsHW(
    hDataSource: isize,
    szMachineName: ?[*:0]const u16,
    szObjectName: ?[*:0]const u16,
    mszCounterList: ?[*]u16,
    pcchCounterListLength: ?*u32,
    mszInstanceList: ?[*]u16,
    pcchInstanceListLength: ?*u32,
    dwDetailLevel: PERF_DETAIL,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectItemsHA(
    hDataSource: isize,
    szMachineName: ?[*:0]const u8,
    szObjectName: ?[*:0]const u8,
    mszCounterList: ?[*]u8,
    pcchCounterListLength: ?*u32,
    mszInstanceList: ?[*]u8,
    pcchInstanceListLength: ?*u32,
    dwDetailLevel: PERF_DETAIL,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhExpandWildCardPathHW(
    hDataSource: isize,
    szWildCardPath: ?[*:0]const u16,
    mszExpandedPathList: ?[*]u16,
    pcchPathListLength: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhExpandWildCardPathHA(
    hDataSource: isize,
    szWildCardPath: ?[*:0]const u8,
    mszExpandedPathList: ?[*]u8,
    pcchPathListLength: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDataSourceTimeRangeH(
    hDataSource: isize,
    pdwNumEntries: ?*u32,
    pInfo: ?*PDH_TIME_INFO,
    pdwBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfObjectHW(
    hDataSource: isize,
    szMachineName: ?[*:0]const u16,
    szDefaultObjectName: ?PWSTR,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfObjectHA(
    hDataSource: isize,
    szMachineName: ?[*:0]const u8,
    szDefaultObjectName: ?PSTR,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfCounterHW(
    hDataSource: isize,
    szMachineName: ?[*:0]const u16,
    szObjectName: ?[*:0]const u16,
    szDefaultCounterName: ?PWSTR,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfCounterHA(
    hDataSource: isize,
    szMachineName: ?[*:0]const u8,
    szObjectName: ?[*:0]const u8,
    szDefaultCounterName: ?PSTR,
    pcchBufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhBrowseCountersHW(
    pBrowseDlgData: ?*PDH_BROWSE_DLG_CONFIG_HW,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhBrowseCountersHA(
    pBrowseDlgData: ?*PDH_BROWSE_DLG_CONFIG_HA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "pdh" fn PdhVerifySQLDBW(
    szDataSource: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "pdh" fn PdhVerifySQLDBA(
    szDataSource: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "pdh" fn PdhCreateSQLTablesW(
    szDataSource: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "pdh" fn PdhCreateSQLTablesA(
    szDataSource: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumLogSetNamesW(
    szDataSource: ?[*:0]const u16,
    mszDataSetNameList: ?[*]u16,
    pcchBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumLogSetNamesA(
    szDataSource: ?[*:0]const u8,
    mszDataSetNameList: ?[*]u8,
    pcchBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "pdh" fn PdhGetLogSetGUID(
    hLog: isize,
    pGuid: ?*Guid,
    pRunId: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "pdh" fn PdhSetLogSetRunID(
    hLog: isize,
    RunId: i32,
) callconv(@import("std").os.windows.WINAPI) i32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (50)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const PDH_RAW_COUNTER_ITEM_ = thismodule.PDH_RAW_COUNTER_ITEM_A;
        pub const PDH_FMT_COUNTERVALUE_ITEM_ = thismodule.PDH_FMT_COUNTERVALUE_ITEM_A;
        pub const PDH_COUNTER_PATH_ELEMENTS_ = thismodule.PDH_COUNTER_PATH_ELEMENTS_A;
        pub const PDH_DATA_ITEM_PATH_ELEMENTS_ = thismodule.PDH_DATA_ITEM_PATH_ELEMENTS_A;
        pub const PDH_COUNTER_INFO_ = thismodule.PDH_COUNTER_INFO_A;
        pub const PDH_LOG_SERVICE_QUERY_INFO_ = thismodule.PDH_LOG_SERVICE_QUERY_INFO_A;
        pub const PDH_BROWSE_DLG_CONFIG_H = thismodule.PDH_BROWSE_DLG_CONFIG_HA;
        pub const PDH_BROWSE_DLG_CONFIG_ = thismodule.PDH_BROWSE_DLG_CONFIG_A;
        pub const InstallPerfDll = thismodule.InstallPerfDllA;
        pub const LoadPerfCounterTextStrings = thismodule.LoadPerfCounterTextStringsA;
        pub const UnloadPerfCounterTextStrings = thismodule.UnloadPerfCounterTextStringsA;
        pub const UpdatePerfNameFiles = thismodule.UpdatePerfNameFilesA;
        pub const SetServiceAsTrusted = thismodule.SetServiceAsTrustedA;
        pub const PdhOpenQuery = thismodule.PdhOpenQueryA;
        pub const PdhAddCounter = thismodule.PdhAddCounterA;
        pub const PdhAddEnglishCounter = thismodule.PdhAddEnglishCounterA;
        pub const PdhValidatePathEx = thismodule.PdhValidatePathExA;
        pub const PdhGetFormattedCounterArray = thismodule.PdhGetFormattedCounterArrayA;
        pub const PdhGetRawCounterArray = thismodule.PdhGetRawCounterArrayA;
        pub const PdhGetCounterInfo = thismodule.PdhGetCounterInfoA;
        pub const PdhConnectMachine = thismodule.PdhConnectMachineA;
        pub const PdhEnumMachines = thismodule.PdhEnumMachinesA;
        pub const PdhEnumObjects = thismodule.PdhEnumObjectsA;
        pub const PdhEnumObjectItems = thismodule.PdhEnumObjectItemsA;
        pub const PdhMakeCounterPath = thismodule.PdhMakeCounterPathA;
        pub const PdhParseCounterPath = thismodule.PdhParseCounterPathA;
        pub const PdhParseInstanceName = thismodule.PdhParseInstanceNameA;
        pub const PdhValidatePath = thismodule.PdhValidatePathA;
        pub const PdhGetDefaultPerfObject = thismodule.PdhGetDefaultPerfObjectA;
        pub const PdhGetDefaultPerfCounter = thismodule.PdhGetDefaultPerfCounterA;
        pub const PdhBrowseCounters = thismodule.PdhBrowseCountersA;
        pub const PdhExpandCounterPath = thismodule.PdhExpandCounterPathA;
        pub const PdhLookupPerfNameByIndex = thismodule.PdhLookupPerfNameByIndexA;
        pub const PdhLookupPerfIndexByName = thismodule.PdhLookupPerfIndexByNameA;
        pub const PdhExpandWildCardPath = thismodule.PdhExpandWildCardPathA;
        pub const PdhOpenLog = thismodule.PdhOpenLogA;
        pub const PdhUpdateLog = thismodule.PdhUpdateLogA;
        pub const PdhSelectDataSource = thismodule.PdhSelectDataSourceA;
        pub const PdhGetDataSourceTimeRange = thismodule.PdhGetDataSourceTimeRangeA;
        pub const PdhBindInputDataSource = thismodule.PdhBindInputDataSourceA;
        pub const PdhEnumMachinesH = thismodule.PdhEnumMachinesHA;
        pub const PdhEnumObjectsH = thismodule.PdhEnumObjectsHA;
        pub const PdhEnumObjectItemsH = thismodule.PdhEnumObjectItemsHA;
        pub const PdhExpandWildCardPathH = thismodule.PdhExpandWildCardPathHA;
        pub const PdhGetDefaultPerfObjectH = thismodule.PdhGetDefaultPerfObjectHA;
        pub const PdhGetDefaultPerfCounterH = thismodule.PdhGetDefaultPerfCounterHA;
        pub const PdhBrowseCountersH = thismodule.PdhBrowseCountersHA;
        pub const PdhVerifySQLDB = thismodule.PdhVerifySQLDBA;
        pub const PdhCreateSQLTables = thismodule.PdhCreateSQLTablesA;
        pub const PdhEnumLogSetNames = thismodule.PdhEnumLogSetNamesA;
    },
    .wide => struct {
        pub const PDH_RAW_COUNTER_ITEM_ = thismodule.PDH_RAW_COUNTER_ITEM_W;
        pub const PDH_FMT_COUNTERVALUE_ITEM_ = thismodule.PDH_FMT_COUNTERVALUE_ITEM_W;
        pub const PDH_COUNTER_PATH_ELEMENTS_ = thismodule.PDH_COUNTER_PATH_ELEMENTS_W;
        pub const PDH_DATA_ITEM_PATH_ELEMENTS_ = thismodule.PDH_DATA_ITEM_PATH_ELEMENTS_W;
        pub const PDH_COUNTER_INFO_ = thismodule.PDH_COUNTER_INFO_W;
        pub const PDH_LOG_SERVICE_QUERY_INFO_ = thismodule.PDH_LOG_SERVICE_QUERY_INFO_W;
        pub const PDH_BROWSE_DLG_CONFIG_H = thismodule.PDH_BROWSE_DLG_CONFIG_HW;
        pub const PDH_BROWSE_DLG_CONFIG_ = thismodule.PDH_BROWSE_DLG_CONFIG_W;
        pub const InstallPerfDll = thismodule.InstallPerfDllW;
        pub const LoadPerfCounterTextStrings = thismodule.LoadPerfCounterTextStringsW;
        pub const UnloadPerfCounterTextStrings = thismodule.UnloadPerfCounterTextStringsW;
        pub const UpdatePerfNameFiles = thismodule.UpdatePerfNameFilesW;
        pub const SetServiceAsTrusted = thismodule.SetServiceAsTrustedW;
        pub const PdhOpenQuery = thismodule.PdhOpenQueryW;
        pub const PdhAddCounter = thismodule.PdhAddCounterW;
        pub const PdhAddEnglishCounter = thismodule.PdhAddEnglishCounterW;
        pub const PdhValidatePathEx = thismodule.PdhValidatePathExW;
        pub const PdhGetFormattedCounterArray = thismodule.PdhGetFormattedCounterArrayW;
        pub const PdhGetRawCounterArray = thismodule.PdhGetRawCounterArrayW;
        pub const PdhGetCounterInfo = thismodule.PdhGetCounterInfoW;
        pub const PdhConnectMachine = thismodule.PdhConnectMachineW;
        pub const PdhEnumMachines = thismodule.PdhEnumMachinesW;
        pub const PdhEnumObjects = thismodule.PdhEnumObjectsW;
        pub const PdhEnumObjectItems = thismodule.PdhEnumObjectItemsW;
        pub const PdhMakeCounterPath = thismodule.PdhMakeCounterPathW;
        pub const PdhParseCounterPath = thismodule.PdhParseCounterPathW;
        pub const PdhParseInstanceName = thismodule.PdhParseInstanceNameW;
        pub const PdhValidatePath = thismodule.PdhValidatePathW;
        pub const PdhGetDefaultPerfObject = thismodule.PdhGetDefaultPerfObjectW;
        pub const PdhGetDefaultPerfCounter = thismodule.PdhGetDefaultPerfCounterW;
        pub const PdhBrowseCounters = thismodule.PdhBrowseCountersW;
        pub const PdhExpandCounterPath = thismodule.PdhExpandCounterPathW;
        pub const PdhLookupPerfNameByIndex = thismodule.PdhLookupPerfNameByIndexW;
        pub const PdhLookupPerfIndexByName = thismodule.PdhLookupPerfIndexByNameW;
        pub const PdhExpandWildCardPath = thismodule.PdhExpandWildCardPathW;
        pub const PdhOpenLog = thismodule.PdhOpenLogW;
        pub const PdhUpdateLog = thismodule.PdhUpdateLogW;
        pub const PdhSelectDataSource = thismodule.PdhSelectDataSourceW;
        pub const PdhGetDataSourceTimeRange = thismodule.PdhGetDataSourceTimeRangeW;
        pub const PdhBindInputDataSource = thismodule.PdhBindInputDataSourceW;
        pub const PdhEnumMachinesH = thismodule.PdhEnumMachinesHW;
        pub const PdhEnumObjectsH = thismodule.PdhEnumObjectsHW;
        pub const PdhEnumObjectItemsH = thismodule.PdhEnumObjectItemsHW;
        pub const PdhExpandWildCardPathH = thismodule.PdhExpandWildCardPathHW;
        pub const PdhGetDefaultPerfObjectH = thismodule.PdhGetDefaultPerfObjectHW;
        pub const PdhGetDefaultPerfCounterH = thismodule.PdhGetDefaultPerfCounterHW;
        pub const PdhBrowseCountersH = thismodule.PdhBrowseCountersHW;
        pub const PdhVerifySQLDB = thismodule.PdhVerifySQLDBW;
        pub const PdhCreateSQLTables = thismodule.PdhCreateSQLTablesW;
        pub const PdhEnumLogSetNames = thismodule.PdhEnumLogSetNamesW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const PDH_RAW_COUNTER_ITEM_ = *opaque{};
        pub const PDH_FMT_COUNTERVALUE_ITEM_ = *opaque{};
        pub const PDH_COUNTER_PATH_ELEMENTS_ = *opaque{};
        pub const PDH_DATA_ITEM_PATH_ELEMENTS_ = *opaque{};
        pub const PDH_COUNTER_INFO_ = *opaque{};
        pub const PDH_LOG_SERVICE_QUERY_INFO_ = *opaque{};
        pub const PDH_BROWSE_DLG_CONFIG_H = *opaque{};
        pub const PDH_BROWSE_DLG_CONFIG_ = *opaque{};
        pub const InstallPerfDll = *opaque{};
        pub const LoadPerfCounterTextStrings = *opaque{};
        pub const UnloadPerfCounterTextStrings = *opaque{};
        pub const UpdatePerfNameFiles = *opaque{};
        pub const SetServiceAsTrusted = *opaque{};
        pub const PdhOpenQuery = *opaque{};
        pub const PdhAddCounter = *opaque{};
        pub const PdhAddEnglishCounter = *opaque{};
        pub const PdhValidatePathEx = *opaque{};
        pub const PdhGetFormattedCounterArray = *opaque{};
        pub const PdhGetRawCounterArray = *opaque{};
        pub const PdhGetCounterInfo = *opaque{};
        pub const PdhConnectMachine = *opaque{};
        pub const PdhEnumMachines = *opaque{};
        pub const PdhEnumObjects = *opaque{};
        pub const PdhEnumObjectItems = *opaque{};
        pub const PdhMakeCounterPath = *opaque{};
        pub const PdhParseCounterPath = *opaque{};
        pub const PdhParseInstanceName = *opaque{};
        pub const PdhValidatePath = *opaque{};
        pub const PdhGetDefaultPerfObject = *opaque{};
        pub const PdhGetDefaultPerfCounter = *opaque{};
        pub const PdhBrowseCounters = *opaque{};
        pub const PdhExpandCounterPath = *opaque{};
        pub const PdhLookupPerfNameByIndex = *opaque{};
        pub const PdhLookupPerfIndexByName = *opaque{};
        pub const PdhExpandWildCardPath = *opaque{};
        pub const PdhOpenLog = *opaque{};
        pub const PdhUpdateLog = *opaque{};
        pub const PdhSelectDataSource = *opaque{};
        pub const PdhGetDataSourceTimeRange = *opaque{};
        pub const PdhBindInputDataSource = *opaque{};
        pub const PdhEnumMachinesH = *opaque{};
        pub const PdhEnumObjectsH = *opaque{};
        pub const PdhEnumObjectItemsH = *opaque{};
        pub const PdhExpandWildCardPathH = *opaque{};
        pub const PdhGetDefaultPerfObjectH = *opaque{};
        pub const PdhGetDefaultPerfCounterH = *opaque{};
        pub const PdhBrowseCountersH = *opaque{};
        pub const PdhVerifySQLDB = *opaque{};
        pub const PdhCreateSQLTables = *opaque{};
        pub const PdhEnumLogSetNames = *opaque{};
    } else struct {
        pub const PDH_RAW_COUNTER_ITEM_ = @compileError("'PDH_RAW_COUNTER_ITEM_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_FMT_COUNTERVALUE_ITEM_ = @compileError("'PDH_FMT_COUNTERVALUE_ITEM_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_COUNTER_PATH_ELEMENTS_ = @compileError("'PDH_COUNTER_PATH_ELEMENTS_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_DATA_ITEM_PATH_ELEMENTS_ = @compileError("'PDH_DATA_ITEM_PATH_ELEMENTS_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_COUNTER_INFO_ = @compileError("'PDH_COUNTER_INFO_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_LOG_SERVICE_QUERY_INFO_ = @compileError("'PDH_LOG_SERVICE_QUERY_INFO_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_BROWSE_DLG_CONFIG_H = @compileError("'PDH_BROWSE_DLG_CONFIG_H' requires that UNICODE be set to true or false in the root module");
        pub const PDH_BROWSE_DLG_CONFIG_ = @compileError("'PDH_BROWSE_DLG_CONFIG_' requires that UNICODE be set to true or false in the root module");
        pub const InstallPerfDll = @compileError("'InstallPerfDll' requires that UNICODE be set to true or false in the root module");
        pub const LoadPerfCounterTextStrings = @compileError("'LoadPerfCounterTextStrings' requires that UNICODE be set to true or false in the root module");
        pub const UnloadPerfCounterTextStrings = @compileError("'UnloadPerfCounterTextStrings' requires that UNICODE be set to true or false in the root module");
        pub const UpdatePerfNameFiles = @compileError("'UpdatePerfNameFiles' requires that UNICODE be set to true or false in the root module");
        pub const SetServiceAsTrusted = @compileError("'SetServiceAsTrusted' requires that UNICODE be set to true or false in the root module");
        pub const PdhOpenQuery = @compileError("'PdhOpenQuery' requires that UNICODE be set to true or false in the root module");
        pub const PdhAddCounter = @compileError("'PdhAddCounter' requires that UNICODE be set to true or false in the root module");
        pub const PdhAddEnglishCounter = @compileError("'PdhAddEnglishCounter' requires that UNICODE be set to true or false in the root module");
        pub const PdhValidatePathEx = @compileError("'PdhValidatePathEx' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetFormattedCounterArray = @compileError("'PdhGetFormattedCounterArray' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetRawCounterArray = @compileError("'PdhGetRawCounterArray' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetCounterInfo = @compileError("'PdhGetCounterInfo' requires that UNICODE be set to true or false in the root module");
        pub const PdhConnectMachine = @compileError("'PdhConnectMachine' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumMachines = @compileError("'PdhEnumMachines' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumObjects = @compileError("'PdhEnumObjects' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumObjectItems = @compileError("'PdhEnumObjectItems' requires that UNICODE be set to true or false in the root module");
        pub const PdhMakeCounterPath = @compileError("'PdhMakeCounterPath' requires that UNICODE be set to true or false in the root module");
        pub const PdhParseCounterPath = @compileError("'PdhParseCounterPath' requires that UNICODE be set to true or false in the root module");
        pub const PdhParseInstanceName = @compileError("'PdhParseInstanceName' requires that UNICODE be set to true or false in the root module");
        pub const PdhValidatePath = @compileError("'PdhValidatePath' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDefaultPerfObject = @compileError("'PdhGetDefaultPerfObject' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDefaultPerfCounter = @compileError("'PdhGetDefaultPerfCounter' requires that UNICODE be set to true or false in the root module");
        pub const PdhBrowseCounters = @compileError("'PdhBrowseCounters' requires that UNICODE be set to true or false in the root module");
        pub const PdhExpandCounterPath = @compileError("'PdhExpandCounterPath' requires that UNICODE be set to true or false in the root module");
        pub const PdhLookupPerfNameByIndex = @compileError("'PdhLookupPerfNameByIndex' requires that UNICODE be set to true or false in the root module");
        pub const PdhLookupPerfIndexByName = @compileError("'PdhLookupPerfIndexByName' requires that UNICODE be set to true or false in the root module");
        pub const PdhExpandWildCardPath = @compileError("'PdhExpandWildCardPath' requires that UNICODE be set to true or false in the root module");
        pub const PdhOpenLog = @compileError("'PdhOpenLog' requires that UNICODE be set to true or false in the root module");
        pub const PdhUpdateLog = @compileError("'PdhUpdateLog' requires that UNICODE be set to true or false in the root module");
        pub const PdhSelectDataSource = @compileError("'PdhSelectDataSource' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDataSourceTimeRange = @compileError("'PdhGetDataSourceTimeRange' requires that UNICODE be set to true or false in the root module");
        pub const PdhBindInputDataSource = @compileError("'PdhBindInputDataSource' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumMachinesH = @compileError("'PdhEnumMachinesH' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumObjectsH = @compileError("'PdhEnumObjectsH' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumObjectItemsH = @compileError("'PdhEnumObjectItemsH' requires that UNICODE be set to true or false in the root module");
        pub const PdhExpandWildCardPathH = @compileError("'PdhExpandWildCardPathH' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDefaultPerfObjectH = @compileError("'PdhGetDefaultPerfObjectH' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDefaultPerfCounterH = @compileError("'PdhGetDefaultPerfCounterH' requires that UNICODE be set to true or false in the root module");
        pub const PdhBrowseCountersH = @compileError("'PdhBrowseCountersH' requires that UNICODE be set to true or false in the root module");
        pub const PdhVerifySQLDB = @compileError("'PdhVerifySQLDB' requires that UNICODE be set to true or false in the root module");
        pub const PdhCreateSQLTables = @compileError("'PdhCreateSQLTables' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumLogSetNames = @compileError("'PdhEnumLogSetNames' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (17)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BOOLEAN = @import("../foundation.zig").BOOLEAN;
const BSTR = @import("../foundation.zig").BSTR;
const FILETIME = @import("../foundation.zig").FILETIME;
const HANDLE = @import("../foundation.zig").HANDLE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IDispatch = @import("../system/com.zig").IDispatch;
const IFontDisp = @import("../system/ole.zig").IFontDisp;
const IUnknown = @import("../system/com.zig").IUnknown;
const LARGE_INTEGER = @import("../foundation.zig").LARGE_INTEGER;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const SAFEARRAY = @import("../system/com.zig").SAFEARRAY;
const SYSTEMTIME = @import("../foundation.zig").SYSTEMTIME;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PLA_CABEXTRACT_CALLBACK")) { _ = PLA_CABEXTRACT_CALLBACK; }
    if (@hasDecl(@This(), "PERFLIBREQUEST")) { _ = PERFLIBREQUEST; }
    if (@hasDecl(@This(), "PERF_MEM_ALLOC")) { _ = PERF_MEM_ALLOC; }
    if (@hasDecl(@This(), "PERF_MEM_FREE")) { _ = PERF_MEM_FREE; }
    if (@hasDecl(@This(), "PM_OPEN_PROC")) { _ = PM_OPEN_PROC; }
    if (@hasDecl(@This(), "PM_COLLECT_PROC")) { _ = PM_COLLECT_PROC; }
    if (@hasDecl(@This(), "PM_CLOSE_PROC")) { _ = PM_CLOSE_PROC; }
    if (@hasDecl(@This(), "CounterPathCallBack")) { _ = CounterPathCallBack; }

    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
//--------------------------------------------------------------------------------
// Section: SubModules (1)
//--------------------------------------------------------------------------------
pub const hardware_counter_profiling = @import("performance/hardware_counter_profiling.zig");
